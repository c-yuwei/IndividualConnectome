%% Pipeline Individual Deviation Connectome Comparison WU

% This is the pipeline script to compare groups of subjects using individual Deviation connectivity built on structural data.
% The structural data can be derived from imaging modalities like T1 weighted MRI (T1-W), static positron emission tomography (PET), or arterial spin labeling (ASL).
% 1. It loads a brain atlas from an XLS file (e.g., desikan_atlas.xlsx).
% 2. It loads the data of a group of subjects from an XLS file (e.g., ST_group1.xlsx).
% 3. It analyzes these data using a structural analysis (ST) based on a binary undirected graph using densities (BUD).

% PDF: /tutorials/pipelines/tut_a_st_wu/tut_a_st_wu.pdf
% README: /tutorials/pipelines/tut_a_st_wu/readme.md

%% Import Brain Atlas
ba = ImporterBrainAtlasXLS('WAITBAR', true).get('GET_FILE').get('BA'); % Load Brain Atlas from XLS % Brain Atlas

%% Group NIfTI healthy reference
gr_t1_healthy = ImporterGroupSubjNIfTI('NIFTI_TYPE', {'T1'}, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group T1 from NIfTI healthy reference group % Healthy Group T1
gr_pet_healthy = ImporterGroupSubjNIfTI('NIFTI_TYPE', {'PET'}, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group PET from NIfTI healthy reference group % Healthy Group PET

%% Group 1 NIfTI
gr_t1_1 = ImporterGroupSubjNIfTI('NIFTI_TYPE', {'T1'}, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group 1 T1 from NIfTI % Group 1 T1
gr_pet_1 = ImporterGroupSubjNIfTI('NIFTI_TYPE', {'PET'}, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group 1 PET from NIfTI % Group 1 PET

%% Group 2 NIfTI
gr_t1_2 = ImporterGroupSubjNIfTI('NIFTI_TYPE', {'T1'}, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group 2 T1 from NIfTI % Group 2 T1
gr_pet_2 = ImporterGroupSubjNIfTI('NIFTI_TYPE', {'PET'}, 'WAITBAR', true).get('GET_DIR').get('GR'); % Load Group 2 PET from NIfTI % Group 2 PET

%% Group Healthy SUVR
suvr_con_healthy = SUVRConstructor('GR_PET',gr_pet_healthy,'GR_T1',gr_t1_healthy,'BA', ba,'ATLAS_PATH_DICT' ,IndexedDictionary('IT_CLASS', 'FILE_PATH','IT_LIST', {FILE_PATH('PATH', '/home/hang/GitHub/IndividualConnectome-WithYuwei/Individualconnectome/group_data/test/atlas/upsampled_AAL2.nii'),FILE_PATH('PATH', '/home/hang/GitHub/IndividualConnectome-WithYuwei/Individualconnectome/group_data/test/atlas/upsampled_TD.nii')}), 'REF_REGION_LIST',{[9100,9110,9120,9130,9140,9150,9160,9170], 7},'ATLAS_KIND', {'AAL2','TD'}); % Construct Healthy Group SUVR % Healthy Group SUVR

%% Group 1 SUVR
suvr_con1 = SUVRConstructor('GR_PET',gr_pet_1,'GR_T1',gr_t1_1,'BA', ba,'ATLAS_PATH_DICT' ,IndexedDictionary('IT_CLASS', 'FILE_PATH','IT_LIST', {FILE_PATH('PATH', '/home/hang/GitHub/IndividualConnectome-WithYuwei/Individualconnectome/group_data/test/atlas/upsampled_AAL2.nii'),FILE_PATH('PATH', '/home/hang/GitHub/IndividualConnectome-WithYuwei/Individualconnectome/group_data/test/atlas/upsampled_TD.nii')}), 'REF_REGION_LIST',{[9100,9110,9120,9130,9140,9150,9160,9170], 7},'ATLAS_KIND', {'AAL2','TD'}); % Construct Group SUVR % Group SUVR

%% Group 2 SUVR
suvr_con2 = SUVRConstructor('GR_PET',gr_pet_2,'GR_T1',gr_t1_2,'BA', ba,'ATLAS_PATH_DICT' ,IndexedDictionary('IT_CLASS', 'FILE_PATH','IT_LIST', {FILE_PATH('PATH', '/home/hang/GitHub/IndividualConnectome-WithYuwei/Individualconnectome/group_data/test/atlas/upsampled_AAL2.nii'),FILE_PATH('PATH', '/home/hang/GitHub/IndividualConnectome-WithYuwei/Individualconnectome/group_data/test/atlas/upsampled_TD.nii')}), 'REF_REGION_LIST',{[9100,9110,9120,9130,9140,9150,9160,9170], 7},'ATLAS_KIND', {'AAL2','TD'}); % Construct Group SUVR % Group SUVR

%% Devitation Connectome Construction
im_gr1 = IndividualDeviationConConstructor('GR_SUVR', suvr_con1.get('GR'),'GR_SUVR_REF', suvr_con_healthy.get('GR')); % Construct Group 1 deviation based individual connectome % Group 1 Deviation Connectivity
im_gr2 = IndividualDeviationConConstructor('GR_SUVR', suvr_con2.get('GR'),'GR_SUVR_REF', suvr_con_healthy.get('GR')); % Construct Group 2 deviation based individual connectome % Group 2 Deviation Connectivity

%% Analysis on individual distance connectivity group 1
a_WU1 = AnalyzeEnsemble_CON_WU('GR', im_gr1.get('GR')); % Analyze Group 1 % Group 1 Analysis

%% Analysis on individual distance connectivity group 2
a_WU2 = AnalyzeEnsemble_CON_WU('TEMPLATE', a_WU1,'GR', im_gr2.get('GR')); % Analyze Group 2 % Group 2 Analysis

%% Comparison
c_WU = CompareEnsemble('P', 1000, 'A1', a_WU1, 'A2', a_WU2, 'MEMORIZE', true); % Compare Groups % Group Comparison