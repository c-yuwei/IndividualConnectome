%EXAMPLE_CON_WU
% Script example pipeline CON WU

clear variables %#ok<*NASGU>

%% Load BrainAtlas
im_ba = ImporterBrainAtlasXLS( ...
    'FILE', [which('aal90_atlas.xlsx')], ...
    'WAITBAR', true ...
    );

ba = im_ba.get('BA');

%%
% Get the number of brain regions in the atlas
num_regions = ba.get('BR_DICT').get('LENGTH');

% Initialize a cell array to store the names of the brain regions
region_names = cell(num_regions, 1);

% Iterate through each region and get its name
for i = 1:num_regions
    % Get the brain region element from the BrainAtlas
    brain_region = ba.get('BR_DICT').get('IT', i);
    
    % Get the name of the brain region
    region_names{i} = brain_region.get('ID');
end

%% load Nifty images
im_gr1_WM_GM = ImporterGroupSubjNifti('DIRECTORY', ['/home/hang/GitHub/Individual-connectome/group_data/test/test'], ...
    'NIFTI_TYPE', {'WM','GM'},...
    'WAITBAR', true);
gr1_WM_GM = im_gr1_WM_GM.get('GR');

im_gr1_PET = ImporterGroupSubjNifti('DIRECTORY', ['/home/hang/GitHub/Individual-connectome/group_data/test/test'], ...
    'NIFTI_TYPE', {'PET'},...
    'WAITBAR', true);
gr1_PET = im_gr1_PET.get('GR');

%% ROI constructor
path_dict = IndexedDictionary(...
    'IT_CLASS', 'FILE_PATH', ...
    'IT_LIST', {FILE_PATH('PATH', '/home/hang/GitHub/Individual-connectome/group_data/test/AAL2_registered.nii'),FILE_PATH('PATH', '/home/hang/GitHub/Individual-connectome/group_data/test/TD_lobe_registered.nii')} ...
    );
%%
gr = SUVRConstructor('GR_PET',gr1_PET, ...
    'GR_T1',gr1_WM_GM, ...
    'BA', ba,.
    'ATLAS_PATH_DICT' ,path_dict, ...
    'REF_REGION_LIST',{[9100,9110,9120,9130,9140,9150,9160,9170], 7}, ...
    'ATLAS_KIND', {'AAL2','TD'});
gr.get('GR')
%% Load Groups of SubjectCON
im_gr1 = ImporterIndividual_Con_Correlation_XLS( ...
    'DIRECTORY', ['/home/hang/GitHub/test_braph/BRAPH-2-Matlab/group_data/MCI/SUVR_Group_XLS'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1 = im_gr1.get('GR');

im_gr2 = ImporterIndividual_Con_Correlation_XLS( ...
    'DIRECTORY', ['/home/hang/GitHub/test_braph/BRAPH-2-Matlab/group_data/Healthy/SUVR_Group_XLS'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2 = im_gr2.get('GR');

%% Load Groups of SubjectCON Divergence based
im_gr1 = ImporterIndividual_JS_Divergence_XLS( ...
    'DIRECTORY', ['/home/hang/GitHub/test_braph/BRAPH-2-Matlab/group_data/MCI/SUVR_Group_XLS'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1 = im_gr1.get('GR');

im_gr2 = ImporterIndividual_JS_Divergence_XLS( ...
    'DIRECTORY', ['/home/hang/GitHub/test_braph/BRAPH-2-Matlab/group_data/Healthy/SUVR_Group_XLS'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2 = im_gr2.get('GR');

%% Load Groups of SubjectCON Distance based
im_gr1 = ImporterIndividual_Distance_XLS( ...
    'DIRECTORY', ['/home/hang/GitHub/test_braph/BRAPH-2-Matlab/group_data/MCI/MeanSUVR_Group_XLS'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr1 = im_gr1.get('GR');

im_gr2 = ImporterIndividual_Distance_XLS( ...
    'DIRECTORY', ['/home/hang/GitHub/test_braph/BRAPH-2-Matlab/group_data/Healthy/MeanSUVR_Group_XLS'], ...
    'BA', ba, ...
    'WAITBAR', true ...
    );

gr2 = im_gr2.get('GR');
%% Load Groups of SubjectCON Deviation based
im_gr1 = ImporterIndividual_Deviation_XLS( ...
    'DIRECTORY', ['/home/hang/GitHub/test_braph/BRAPH-2-Matlab/group_data/MCI/MeanSUVR_Group_XLS'], ...
     'BA', ba, ...
    'WAITBAR', true ...
    );

gr1 = im_gr1.get('GR');

im_gr2 = ImporterIndividual_Deviation_XLS( ...
    'DIRECTORY', ['/home/hang/GitHub/test_braph/BRAPH-2-Matlab/group_data/Healthy/MeanSUVR_Group_XLS'], ...
     'BA', ba, ...
    'WAITBAR', true ...
    );

gr2 = im_gr2.get('GR');
%% Analysis CON WU
a_WU1 = AnalyzeEnsemble_CON_WU( ...
    'GR', gr1 ...
    );

a_WU2 = AnalyzeEnsemble_CON_WU( ...
    'TEMPLATE', a_WU1, ...
    'GR', gr2 ...
    );

%% measure calculation
% % % strength_WU1 = a_WU1.get('MEASUREENSEMBLE', 'Strength').get('M');
% % % strength_av_WU1 = a_WU1.get('MEASUREENSEMBLE', 'StrengthAv').get('M');
degree_WU1 = a_WU1.get('MEASUREENSEMBLE', 'Degree').get('M');
distance_WU1 = a_WU1.get('MEASUREENSEMBLE', 'Distance').get('M');
Clustering_WU1 = a_WU1.get('MEASUREENSEMBLE', 'Clustering').get('M');
% % % strength_WU2 = a_WU2.get('MEASUREENSEMBLE', 'Strength').get('M');
% % % strength_av_WU2 = a_WU2.get('MEASUREENSEMBLE', 'StrengthAv').get('M');
degree_WU2 = a_WU2.get('MEASUREENSEMBLE', 'Degree').get('M');
distance_WU2 = a_WU2.get('MEASUREENSEMBLE', 'Distance').get('M');
Clustering_WU2 = a_WU2.get('MEASUREENSEMBLE', 'Clustering').get('M');
% comparison
c_WU = CompareEnsemble( ...
    'P', 10, ...
    'A1', a_WU1, ...
    'A2', a_WU2, ...
    'WAITBAR', true, ...
    'VERBOSE', false, ...
    'MEMORIZE', true ...
    );


degree_WU_diff = c_WU.get('COMPARISON', 'Degree').get('DIFF');
degree_WU_p1 = c_WU.get('COMPARISON', 'Degree').get('P1');
degree_WU_p2 = c_WU.get('COMPARISON', 'Degree').get('P2');
degree_WU_cil = c_WU.get('COMPARISON', 'Degree').get('CIL');
degree_WU_ciu = c_WU.get('COMPARISON', 'Degree').get('CIU');

Clustering_WU_diff = c_WU.get('COMPARISON', 'Clustering').get('DIFF');
Clustering_WU_p1 = c_WU.get('COMPARISON', 'Clustering').get('P1');
Clustering_WU_p2 = c_WU.get('COMPARISON', 'Clustering').get('P2');
Clustering_WU_cil = c_WU.get('COMPARISON', 'Clustering').get('CIL');
Clustering_WU_ciu = c_WU.get('COMPARISON', 'Clustering').get('CIU');

distance_WU_diff = c_WU.get('COMPARISON', 'Distance').get('DIFF');
distance_WU_p1 = c_WU.get('COMPARISON', 'Distance').get('P1');
distance_WU_p2 = c_WU.get('COMPARISON', 'Distance').get('P2');
distance_WU_cil = c_WU.get('COMPARISON', 'Distance').get('CIL');
distance_WU_ciu = c_WU.get('COMPARISON', 'Distance').get('CIU');

