% EXAMPLE_CON_WU
% Script example pipeline Distance CON WU

clear variables %#ok<*NASGU>
%% Load BrainAtlas
im_ba = ImporterBrainAtlasXLS( ...
    'FILE', [which('aal94_atlas.xlsx')], ...
    'WAITBAR', true ...
    );

ba = im_ba.get('BA');

%% load Nifty images
%%group1
im_gr1_WM_GM = ImporterGroupSubjNifti('DIRECTORY', ['/home/hang/GitHub/Individual-connectome/group_data/ADNI_DATA/AD_PositiveAmyloid'], ...
    'NIFTI_TYPE', {'WM','GM'},...
    'WAITBAR', true);
gr1_WM_GM = im_gr1_WM_GM.get('GR');

im_gr1_PET = ImporterGroupSubjNifti('DIRECTORY', ['/home/hang/GitHub/Individual-connectome/group_data/ADNI_DATA/AD_PositiveAmyloid'], ...
    'NIFTI_TYPE', {'wroriented_raw_pet'},...
    'WAITBAR', true);
gr1_PET = im_gr1_PET.get('GR');

%%group2
im_gr2_WM_GM = ImporterGroupSubjNifti('DIRECTORY', ['/home/hang/GitHub/Individual-connectome/group_data/ADNI_DATA/Healthy_NegativeAmyloid'], ...
    'NIFTI_TYPE', {'WM','GM'},...
    'WAITBAR', true);
gr2_WM_GM = im_gr2_WM_GM.get('GR');

im_gr2_PET = ImporterGroupSubjNifti('DIRECTORY', ['/home/hang/GitHub/Individual-connectome/group_data/ADNI_DATA/Healthy_NegativeAmyloid'], ...
    'NIFTI_TYPE', {'wroriented_raw_pet'},...
    'WAITBAR', true);
gr2_PET = im_gr2_PET.get('GR');

%%group3
im_gr3_WM_GM = ImporterGroupSubjNifti('DIRECTORY', ['/home/hang/GitHub/Individual-connectome/group_data/ADNI_DATA/MCI_PositiveAmyloid'], ...
    'NIFTI_TYPE', {'WM','GM'},...
    'WAITBAR', true);
gr3_WM_GM = im_gr3_WM_GM.get('GR');

im_gr3_PET = ImporterGroupSubjNifti('DIRECTORY', ['/home/hang/GitHub/Individual-connectome/group_data/ADNI_DATA/MCI_PositiveAmyloid'], ...
    'NIFTI_TYPE', {'wroriented_raw_pet'},...
    'WAITBAR', true);
gr3_PET = im_gr3_PET.get('GR');

%% ROI constructor
path_dict = IndexedDictionary(...
    'IT_CLASS', 'FILE_PATH', ...
    'IT_LIST', {FILE_PATH('PATH', '/home/hang/GitHub/Individual-connectome/group_data/test/atlas/upsampled_AAL2.nii'),FILE_PATH('PATH', '/home/hang/GitHub/Individual-connectome/group_data/test/atlas/upsampled_TD.nii')} ...
    );

suvr_brain_label = readtable('group_data/test/atlas/AAL2_Atlas_Labels.csv');
suvr_brain_label = suvr_brain_label.Var4;
gr1 = SUVRConstructor('GR_PET',gr1_PET, ...
    'GR_T1',gr1_WM_GM, ...
    'BA', ba,...
    'ATLAS_PATH_DICT' ,path_dict, ...
    'REF_REGION_LIST',{[9100,9110,9120,9130,9140,9150,9160,9170], 7}, ...
    'ATLAS_KIND', {'AAL2','TD'},...
    'SUVR_REGION_SELECTION',suvr_brain_label);
Con_gr1 = gr1.get('GR');

gr2 = SUVRConstructor('GR_PET',gr2_PET, ...
    'GR_T1',gr2_WM_GM, ...
    'BA', ba,...
    'ATLAS_PATH_DICT' ,path_dict, ...
    'REF_REGION_LIST',{[9100,9110,9120,9130,9140,9150,9160,9170], 7}, ...
    'ATLAS_KIND', {'AAL2','TD'},...
    'SUVR_REGION_SELECTION',suvr_brain_label);
Con_gr2 = gr2.get('GR');

gr3 = SUVRConstructor('GR_PET',gr3_PET, ...
    'GR_T1',gr3_WM_GM, ...
    'BA', ba,...
    'ATLAS_PATH_DICT' ,path_dict, ...
    'REF_REGION_LIST',{[9100,9110,9120,9130,9140,9150,9160,9170], 7}, ...
    'ATLAS_KIND', {'AAL2','TD'},...
    'SUVR_REGION_SELECTION',suvr_brain_label);
Con_gr3 = gr3.get('GR');

%% Load Groups of SubjectCON Distance based
im_gr1 = IndividualDistanceConConsturctor( ...
    'GR_SUVR', Con_gr1 );

gr1 = im_gr1.get('GR');

im_gr2 = IndividualDistanceConConsturctor( ...
    'GR_SUVR', Con_gr2 );

gr2 = im_gr2.get('GR');

im_gr3 = IndividualDistanceConConsturctor( ...
    'GR_SUVR', Con_gr3 );

gr3 = im_gr3.get('GR');



%% Analysis CON WU
a_WU1 = AnalyzeEnsemble_CON_WU( ...
    'GR', gr1 ...
    );

a_WU2 = AnalyzeEnsemble_CON_WU( ...
    'TEMPLATE', a_WU1, ...
    'GR', gr2 ...
    );

a_WU3 = AnalyzeEnsemble_CON_WU( ...
    'TEMPLATE', a_WU1, ...
    'GR', gr3 ...
    );

a_WU1.memorize('G_DICT');
a_WU2.memorize('G_DICT');
a_WU3.memorize('G_DICT');

%% NN CV classification on 3 classes
it_list1 = cellfun(@(x) NNDataPoint_CON_CLA( ...
    'ID', x.get('ID'), ...
    'SUB', x, ...
    'TARGET_CLASS', {gr1_PET.get('ID')}), ...
    gr1.get('SUB_DICT').get('IT_LIST'), ...
    'UniformOutput', false);

it_list2 = cellfun(@(x) NNDataPoint_CON_CLA( ...
    'ID', x.get('ID'), ...
    'SUB', x, ...
    'TARGET_CLASS', {gr2_PET.get('ID')}), ...
    gr2.get('SUB_DICT').get('IT_LIST'), ...
    'UniformOutput', false);

it_list3 = cellfun(@(x) NNDataPoint_CON_CLA( ...
    'ID', x.get('ID'), ...
    'SUB', x, ...
    'TARGET_CLASS', {gr3_PET.get('ID')}), ...
    gr3.get('SUB_DICT').get('IT_LIST'), ...
    'UniformOutput', false);

% create NNDataPoint_CON_CLA DICT items
dp_list1 = IndexedDictionary(...
        'IT_CLASS', 'NNDataPoint_CON_CLA', ...
        'IT_LIST', it_list1 ...
        );

dp_list2 = IndexedDictionary(...
        'IT_CLASS', 'NNDataPoint_CON_CLA', ...
        'IT_LIST', it_list2 ...
        );

dp_list3 = IndexedDictionary(...
        'IT_CLASS', 'NNDataPoint_CON_CLA', ...
        'IT_LIST', it_list3 ...
        );

% create a NNDataset containing the NNDataPoint_CON_CLA DICT
d1 = NNDataset( ...
    'DP_CLASS', 'NNDataPoint_CON_CLA', ...
    'DP_DICT', dp_list1 ...
    );

d2 = NNDataset( ...
    'DP_CLASS', 'NNDataPoint_CON_CLA', ...
    'DP_DICT', dp_list2 ...
    );

d3 = NNDataset( ...
    'DP_CLASS', 'NNDataPoint_CON_CLA', ...
    'DP_DICT', dp_list3 ...
    );

% Split the NNData into training set and test set
d_split1 = NNDatasetSplit('D', d1, 'SPLIT', {0.7, 0.3});
d_split2 = NNDatasetSplit('D', d2, 'SPLIT', {0.7, 0.3});
d_split3 = NNDatasetSplit('D', d3, 'SPLIT', {0.7, 0.3});

d_training = NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 1), d_split2.get('D_LIST_IT', 1), d_split3.get('D_LIST_IT', 1)}).get('D');
d_test = NNDatasetCombine('D_LIST', {d_split1.get('D_LIST_IT', 2), d_split2.get('D_LIST_IT', 2), d_split3.get('D_LIST_IT', 2)}).get('D');

%% Create a MLP classifier with training set
nn = NNClassifierMLP('D', d_training, 'LAYERS', [48 48],'EPOCHS',50);
nn.get('TRAIN');

nne_test = NNClassifierMLP_Evaluator('D', d_test, 'NN', nn);
confusion_matrix = nne_test.get('C_MATRIX');
auc = nne_test.get('AUC');
av_auc = nne_test.get('MACRO_AUC');
% it_list1 = cellfun(@(x) NNDataPoint_Graph_CLA( ...
%     'ID', x.get('ID'), ...
%     'G', x, ...
%     'TARGET_CLASS', {gr1_PET.get('ID')}), ...
%     a_WU1.get('G_DICT').get('IT_LIST'), ...
%     'UniformOutput', false);
% 
% it_list2 = cellfun(@(x) NNDataPoint_Graph_CLA( ...
%     'ID', x.get('ID'), ...
%     'G', x, ...
%     'TARGET_CLASS', {gr2_PET.get('ID')}), ...
%     a_WU2.get('G_DICT').get('IT_LIST'), ...
%     'UniformOutput', false);
% 
% it_list3 = cellfun(@(x) NNDataPoint_Graph_CLA( ...
%     'ID', x.get('ID'), ...
%     'G', x, ...
%     'TARGET_CLASS', {gr3_PET.get('ID')}), ...
%     a_WU3.get('G_DICT').get('IT_LIST'), ...
%     'UniformOutput', false);
% 
% % create NNDataPoint_Graph_CLA DICT items
% it_class = 'NNDataPoint_Graph_CLA';
% dp_list1 = IndexedDictionary(...
%         'IT_CLASS', it_class, ...
%         'IT_LIST', it_list1 ...
%         );
% 
% dp_list2 = IndexedDictionary(...
%         'IT_CLASS', it_class, ...
%         'IT_LIST', it_list2 ...
%         );
% 
% dp_list3 = IndexedDictionary(...
%         'IT_CLASS', it_class, ...
%         'IT_LIST', it_list3 ...
%         );
% 
% % create a NNDataset containing the NNDataPoint_Graph_CLA DICT
% d1 = NNDataset( ...
%     'DP_CLASS', it_class, ...
%     'DP_DICT', dp_list1 ...
%     );
% 
% d2 = NNDataset( ...
%     'DP_CLASS', it_class, ...
%     'DP_DICT', dp_list2 ...
%     );
% 
% d3 = NNDataset( ...
%     'DP_CLASS', it_class, ...
%     'DP_DICT', dp_list3 ...
%     );
% 
% %% Create a classifier cross-validation
% nncv = NNClassifierMLP_CrossValidation('D', {d1, d2, d3}, 'KFOLDS', 5);
% nncv.get('TRAIN');

%% Evaluate the performance
confusion_matrix = nncv.get('C_MATRIX');
av_auc = nncv.get('AV_AUC');
av_macro_auc = nncv.get('AV_MACRO_AUC');
