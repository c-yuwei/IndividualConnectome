%TEST_GTA_ST_TA

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	gt = GTA_ST_TA();
	 
	% get('ELCLASS')
	if isa(GTA_ST_TA, 'ConcreteElement')
		assert(strcmp(GTA_ST_TA().get('ELCLASS'), 'GTA_ST_TA'), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA().get(''ELCLASS'') should return ''GTA_ST_TA''.')
	end
	 
	% getBuild()
	assert(GTA_ST_TA.getBuild() == 1 && GTA_ST_TA.getBuild() > 0, ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.getBuild() should return the GTA_ST_TA build number.')
	assert(gt.getBuild() == 1 && gt.getBuild() > 0 , ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'gt.getBuild() should return the GTA_ST_TA build number.')
	assert(Element.getBuild(gt) == 1 && Element.getBuild(gt) > 0, ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(gt) should return the GTA_ST_TA build number.')
	assert(Element.getBuild('GTA_ST_TA') == 1 && Element.getBuild('GTA_ST_TA') > 0, ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''GTA_ST_TA'') should return the GTA_ST_TA build number.')
	 
	% getClass()
	assert(strcmp(GTA_ST_TA.getClass(), 'GTA_ST_TA'), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.getClass() should return ''GTA_ST_TA''.')
	assert(strcmp(gt.getClass(), 'GTA_ST_TA'), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'gt.getClass() should return ''GTA_ST_TA''.')
	assert(strcmp(Element.getClass(gt), 'GTA_ST_TA'), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(gt) should return ''GTA_ST_TA''.')
	assert(strcmp(Element.getClass('GTA_ST_TA'), 'GTA_ST_TA'), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''GTA_ST_TA'') should return ''GTA_ST_TA''.')
	 
	% getSubclasses()
	assert(isequal(GTA_ST_TA.getSubclasses(), subclasses('GTA_ST_TA', [], [], true)), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.getSubclasses() should return the same result as subclasses(''GTA_ST_TA'', [], [], true).')
	assert(isequal(gt.getSubclasses(), subclasses('GTA_ST_TA', [], [], true)), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''GTA_ST_TA'', [], [], true).')
	assert(isequal(Element.getSubclasses(gt), subclasses('GTA_ST_TA', [], [], true)), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(gt) should return the same result as subclasses(''GTA_ST_TA'', [], [], true).')
	assert(isequal(Element.getSubclasses('GTA_ST_TA'), subclasses('GTA_ST_TA', [], [], true)), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''GTA_ST_TA'') should return the same result as subclasses(''GTA_ST_TA'', [], [], true).')
	 
	% getProps()
	assert(isempty(GTA_ST_TA.getProps()) || isequal(GTA_ST_TA.getProps(), 1:1:length(GTA_ST_TA.getProps())), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.getProps() should return a row vector [1:1:N].')
	assert(isempty(GTA_ST_TA.getProps()) || isequal(gt.getProps(), 1:1:length(GTA_ST_TA.getProps())), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'gt.getProps() should return a row vector [1:1:N].')
	assert(isempty(GTA_ST_TA.getProps()) || isequal(Element.getProps(gt), 1:1:length(GTA_ST_TA.getProps())), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(gt) should return a row vector [1:1:N].')
	assert(isempty(GTA_ST_TA.getProps()) || isequal(Element.getProps('GTA_ST_TA'), 1:1:length(GTA_ST_TA.getProps())), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''GTA_ST_TA'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) GTA_ST_TA.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(GTA_ST_TA.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GTA_ST_TA.getProps())), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.getProps(category) does not work.')
	tmp = cellfun(@(category) gt.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(GTA_ST_TA.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GTA_ST_TA.getProps())), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'gt.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(gt, category), categories, 'UniformOutput', false);
	assert(isempty(GTA_ST_TA.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GTA_ST_TA.getProps())), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(gt, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('GTA_ST_TA', category), categories, 'UniformOutput', false);
	assert(isempty(GTA_ST_TA.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(GTA_ST_TA.getProps())), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''GTA_ST_TA'', category) does not work.')
	 
	% getPropNumber()
	assert(GTA_ST_TA.getPropNumber() == length(GTA_ST_TA.getProps()), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.getPropNumber() should return the number of properties.')
	assert(gt.getPropNumber() == length(GTA_ST_TA.getProps()), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'gt.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(gt) == length(GTA_ST_TA.getProps()), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(gt) should return the number of properties.')
	assert(Element.getPropNumber('GTA_ST_TA') == length(GTA_ST_TA.getProps()), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''GTA_ST_TA'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) GTA_ST_TA.getPropNumber(category), categories)) == GTA_ST_TA.getPropNumber(), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) gt.getPropNumber(category), categories)) == GTA_ST_TA.getPropNumber(), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'gt.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(gt, category), categories)) == GTA_ST_TA.getPropNumber(), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(gt, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('GTA_ST_TA', category), categories)) == GTA_ST_TA.getPropNumber(), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''GTA_ST_TA'', category) does not work.')
	 
	% existsProp(prop)
	assert(~GTA_ST_TA.existsProp(NaN), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.existsProp(prop) does not work.')
	assert(~gt.existsProp(NaN), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'gt.existsProp(prop) does not work.')
	assert(~Element.existsProp(gt, NaN), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(gt, prop) does not work.')
	assert(~Element.existsProp('GTA_ST_TA', NaN), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''GTA_ST_TA'', prop) does not work.')
	 
	assert_with_error('GTA_ST_TA.existsProp(NaN)', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], gt)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], gt)
	assert_with_error('Element.existsProp(''GTA_ST_TA'', NaN)', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		assert(GTA_ST_TA.existsProp(prop), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.existsProp(prop) does not work.')
		assert(gt.existsProp(prop), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.existsProp(prop) does not work.')
		assert(Element.existsProp(gt, prop), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(gt, prop) does not work.')
		assert(Element.existsProp('GTA_ST_TA', prop), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''GTA_ST_TA'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~GTA_ST_TA.existsTag(''), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.existsTag(tag) does not work.')
	assert(~gt.existsTag(''), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'gt.existsTag(tag) does not work.')
	assert(~Element.existsTag(gt, ''), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(gt, tag) does not work.')
	assert(~Element.existsTag('GTA_ST_TA', ''), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''GTA_ST_TA'', tag) does not work.')
	 
	assert_with_error('GTA_ST_TA.existsTag('''')', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], gt)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], gt)
	assert_with_error('Element.existsTag(''GTA_ST_TA'', '''')', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		tag = gt.getPropTag(prop);
		assert(GTA_ST_TA.existsTag(tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.existsTag(tag) does not work.')
		assert(gt.existsTag(tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.existsTag(tag) does not work.')
		assert(Element.existsTag(gt, tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(gt, tga) does not work.')
		assert(Element.existsTag('GTA_ST_TA', tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''GTA_ST_TA'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		assert(GTA_ST_TA.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.getPropProp(prop) does not work.')
		assert(gt.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.getPropProp(prop) does not work.')
		assert(Element.getPropProp(gt, prop) == prop, ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(gt, prop) does not work.')
		assert(Element.getPropProp('GTA_ST_TA', prop) == prop, ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''GTA_ST_TA'', prop) does not work.')
	 
		tag = gt.getPropTag(prop);
		assert(GTA_ST_TA.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.getPropProp(tag) does not work.')
		assert(gt.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.getPropProp(tag) does not work.')
		assert(Element.getPropProp(gt, tag) == prop, ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(gt, tag) does not work.')
		assert(Element.getPropProp('GTA_ST_TA', prop) == prop, ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''GTA_ST_TA'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		tag = gt.getPropTag(prop);
	 
		assert(strcmp(GTA_ST_TA.getPropTag(prop), tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.getPropTag(prop) does not work.')
		assert(strcmp(gt.getPropTag(prop), tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(gt, prop), tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(gt, prop) does not work.')
		assert(strcmp(Element.getPropTag('GTA_ST_TA', prop), tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''GTA_ST_TA'', prop) does not work.')
	 
		assert(strcmp(GTA_ST_TA.getPropTag(tag), tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.getPropTag(tag) does not work.')
		assert(strcmp(gt.getPropTag(tag), tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(gt, tag), tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(gt, tag) does not work.')
		assert(strcmp(Element.getPropTag('GTA_ST_TA', prop), tag), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''GTA_ST_TA'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		tag = gt.getPropTag(prop);
	 
		assert(Category.existsCategory(GTA_ST_TA.getPropCategory(prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(gt.getPropCategory(prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gt, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(gt, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gt, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''GTA_ST_TA'', prop) does not work.')
	 
		assert(Category.existsCategory(GTA_ST_TA.getPropCategory(tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(gt.getPropCategory(tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gt, tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(gt, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(gt, tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''GTA_ST_TA'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		tag = gt.getPropTag(prop);
	 
		assert(Format.existsFormat(GTA_ST_TA.getPropFormat(prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(gt.getPropFormat(prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gt, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(gt, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gt, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''GTA_ST_TA'', prop) does not work.')
	 
		assert(Format.existsFormat(GTA_ST_TA.getPropFormat(tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(gt.getPropFormat(tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gt, tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(gt, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(gt, tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''GTA_ST_TA'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		tag = gt.getPropTag(prop);
	 
		assert(ischar(GTA_ST_TA.getPropDescription(prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.getPropDescription(prop) does not work.')
		assert(ischar(gt.getPropDescription(prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(gt, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(gt, prop) does not work.')
		assert(ischar(Element.getPropDescription(gt, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''GTA_ST_TA'', prop) does not work.')
	 
		assert(ischar(GTA_ST_TA.getPropDescription(tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.getPropDescription(tag) does not work.')
		assert(ischar(gt.getPropDescription(tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(gt, tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(gt, tag) does not work.')
		assert(ischar(Element.getPropDescription(gt, tag)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''GTA_ST_TA'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		tag = gt.getPropTag(prop);
	 
		settings = GTA_ST_TA.getPropSettings(prop);
		settings = gt.getPropSettings(prop);
		settings = Element.getPropSettings(gt, prop);
		settings = Element.getPropSettings('GTA_ST_TA', prop);
	 
		settings = GTA_ST_TA.getPropSettings(tag);
		settings = gt.getPropSettings(tag);
		settings = Element.getPropSettings(gt, tag);
		settings = Element.getPropSettings('GTA_ST_TA', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		tag = gt.getPropTag(prop);
	 
		default = GTA_ST_TA.getPropDefault(prop);
		default = gt.getPropDefault(prop);
		default = Element.getPropDefault(gt, prop);
		default = Element.getPropDefault('GTA_ST_TA', prop);
	 
		default = GTA_ST_TA.getPropDefault(tag);
		default = gt.getPropDefault(tag);
		default = Element.getPropDefault(gt, tag);
		default = Element.getPropDefault('GTA_ST_TA', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		tag = gt.getPropTag(prop);
	 
		conditioned_default = GTA_ST_TA.getPropDefaultConditioned(prop);
		conditioned_default = gt.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(gt, prop);
		conditioned_default = Element.getPropDefaultConditioned('GTA_ST_TA', prop);
	 
		conditioned_default = GTA_ST_TA.getPropDefaultConditioned(tag);
		conditioned_default = gt.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(gt, tag);
		conditioned_default = Element.getPropDefaultConditioned('GTA_ST_TA', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		tag = gt.getPropTag(prop);
	 
		assert(~GTA_ST_TA.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.checkProp(prop, value) does not work.')
		assert(~gt.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(gt, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gt, prop, value) does not work.')
		assert(~Element.checkProp('GTA_ST_TA', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GTA_ST_TA'', prop, value) does not work.')
	 
		assert_with_error('GTA_ST_TA.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], prop, gt)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], prop, gt)
		assert_with_error('Element.checkProp(''GTA_ST_TA'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~GTA_ST_TA.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.checkProp(tag, value) does not work.')
		assert(~gt.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(gt, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gt, tag, value) does not work.')
		assert(~Element.checkProp('GTA_ST_TA', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GTA_ST_TA'', tag, value) does not work.')
	 
		assert_with_error('GTA_ST_TA.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], tag, gt)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], tag, gt)
		assert_with_error('Element.checkProp(''GTA_ST_TA'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':GTA_ST_TA:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(GTA_ST_TA.checkProp(prop, Element.getPropDefaultConditioned(GTA_ST_TA, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.checkProp(prop, <conditioned default value>) does not work.')
		assert(gt.checkProp(prop, Element.getPropDefaultConditioned(GTA_ST_TA, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(gt, prop, Element.getPropDefaultConditioned(GTA_ST_TA, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gt, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('GTA_ST_TA', prop, Element.getPropDefaultConditioned(GTA_ST_TA, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GTA_ST_TA'', prop, <conditioned default value>) does not work.')
	 
		assert(GTA_ST_TA.checkProp(tag, Element.getPropDefaultConditioned(GTA_ST_TA, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.checkProp(tag, <conditioned default value>) does not work.')
		assert(gt.checkProp(tag, Element.getPropDefaultConditioned(GTA_ST_TA, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'gt.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(gt, tag, Element.getPropDefaultConditioned(GTA_ST_TA, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(gt, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('GTA_ST_TA', tag, Element.getPropDefaultConditioned(GTA_ST_TA, prop)), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''GTA_ST_TA'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gt = GTA_ST_TA( ...
		GTA_ST_TA.ELCLASS, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.NAME, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.DESCRIPTION, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.TEMPLATE, GTA_ST_TA.getPropDefault(GTA_ST_TA.TEMPLATE), ...
		GTA_ST_TA.ID, GTA_ST_TA.getPropDefault(GTA_ST_TA.ID), ...
		GTA_ST_TA.LABEL, GTA_ST_TA.getPropDefault(GTA_ST_TA.LABEL), ...
		GTA_ST_TA.NOTES, GTA_ST_TA.getPropDefault(GTA_ST_TA.NOTES), ...
		GTA_ST_TA.TOSTRING, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_C, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_M, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_M), ...
		GTA_ST_TA.ST_P, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_P), ...
		GTA_ST_TA.ST_D, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_D), ...
		GTA_ST_TA.ST_R, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_Q, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_E, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_F, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_F), ...
		GTA_ST_TA.ST_G, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_G) ...
		);
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(GTA_ST_TA.getPropTag(prop));
		switch GTA_ST_TA.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					gt.getr(prop) == GTA_ST_TA.getNoValue(), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['Being a ' GTA_ST_TA.getCategoryName(GTA_ST_TA.getPropCategory(prop)) ', GTA_ST_TA.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GTA_ST_TA.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					gt.getr(TAG) == GTA_ST_TA.getNoValue(), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['Being a ' GTA_ST_TA.getCategoryName(GTA_ST_TA.getPropCategory(prop)) ', GTA_ST_TA.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GTA_ST_TA.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(gt.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(gt.getPropSettings(prop))
					assert( ...
						gt.checkFormat(gt.getPropFormat(prop), gt.get(prop)), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						['GTA_ST_TA.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						gt.checkFormat(gt.getPropFormat(prop), gt.get(prop), gt.getPropSettings(prop)), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						['GTA_ST_TA.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					gt.getr(prop) == GTA_ST_TA.getNoValue(), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['Being a ' GTA_ST_TA.getCategoryName(GTA_ST_TA.getPropCategory(prop)) ', GTA_ST_TA.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GTA_ST_TA.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					gt.getr(TAG) == GTA_ST_TA.getNoValue(), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['Being a ' GTA_ST_TA.getCategoryName(GTA_ST_TA.getPropCategory(prop)) ', GTA_ST_TA.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in GTA_ST_TA.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':GTA_ST_TA']);
				assert( ...
					~isa(gt.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(gt.getPropSettings(prop))
					assert( ...
						gt.checkFormat(gt.getPropFormat(prop), gt.get(prop)), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						['GTA_ST_TA.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						gt.checkFormat(gt.getPropFormat(prop), gt.get(prop), gt.getPropSettings(prop)), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						['GTA_ST_TA.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(gt.getr(prop), GTA_ST_TA.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by GTA_ST_TA.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in GTA_ST_TA.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(gt.getr(TAG), GTA_ST_TA.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' TAG ') must be inizialized to its default value ' ...
					'given by GTA_ST_TA.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in GTA_ST_TA.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gt = GTA_ST_TA( ...
		GTA_ST_TA.ELCLASS, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.NAME, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.DESCRIPTION, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.TEMPLATE, GTA_ST_TA.getPropDefault(GTA_ST_TA.TEMPLATE), ...
		GTA_ST_TA.ID, GTA_ST_TA.getPropDefault(GTA_ST_TA.ID), ...
		GTA_ST_TA.LABEL, GTA_ST_TA.getPropDefault(GTA_ST_TA.LABEL), ...
		GTA_ST_TA.NOTES, GTA_ST_TA.getPropDefault(GTA_ST_TA.NOTES), ...
		GTA_ST_TA.TOSTRING, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_C, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_M, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_M), ...
		GTA_ST_TA.ST_P, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_P), ...
		GTA_ST_TA.ST_D, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_D), ...
		GTA_ST_TA.ST_R, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_Q, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_E, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_F, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_F), ...
		GTA_ST_TA.ST_G, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_G) ...
		);
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(GTA_ST_TA.getPropTag(prop));
		switch GTA_ST_TA.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(gt.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(gt.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(gt.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(gt.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					gt.checkFormat(gt.getPropFormat(prop), gt.getr(prop),gt.getPropSettings(prop)), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':GTA_ST_TA']);
				assert( ...
					~isa(gt.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(gt.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':GTA_ST_TA']);
	% 			assert( ...
	% 				~isa(gt.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
	% 				['GTA_ST_TA.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(gt.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
	% 				['GTA_ST_TA.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				gt.checkFormat(gt.getPropFormat(prop), gt.getr(prop),gt.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
	% 				['GTA_ST_TA.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':GTA_ST_TA']);
				assert( ...
					~isa(gt.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(gt.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(gt.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(gt.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					gt.checkFormat(gt.getPropFormat(prop), gt.getr(prop),gt.getPropSettings(prop)), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if gt.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:GTA_ST_TA');
					delete(ancestor(gt.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(GTA_ST_TA.getProps(Category.RESULT))
		for prop = 1:1:GTA_ST_TA.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch GTA_ST_TA.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						gt.isLocked(prop), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						['GTA_ST_TA.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~gt.isLocked(prop), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						['GTA_ST_TA.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gt = GTA_ST_TA();
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		TAG = upper(GTA_ST_TA.getPropTag(prop));
		assert( ...
			~gt.isLocked(prop), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			['GTA_ST_TA.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~gt.isLocked(TAG), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			['GTA_ST_TA.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	gt.lock()
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		switch GTA_ST_TA.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					gt.isLocked(prop), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~gt.isLocked(prop), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gt = GTA_ST_TA();
	 
	warning_backup = warning('off', 'BRAPH2:GTA_ST_TA');
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		gt.lock(prop)
		switch GTA_ST_TA.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					gt.isLocked(prop), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~gt.isLocked(prop), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gt = GTA_ST_TA();
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		TAG = upper(GTA_ST_TA.getPropTag(prop));
		assert( ...
			gt.isChecked(prop), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			['GTA_ST_TA.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			gt.isChecked(TAG), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			['GTA_ST_TA.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	gt.unchecked()
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		assert( ...
			~gt.isChecked(prop), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			['GTA_ST_TA.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	gt.checked()
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		assert( ...
			gt.isChecked(prop), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			['GTA_ST_TA.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic GTA_ST_TA
	gt_0 = GTA_ST_TA( ...
		GTA_ST_TA.ELCLASS, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.NAME, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.DESCRIPTION, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.TEMPLATE, GTA_ST_TA.getPropDefault(GTA_ST_TA.TEMPLATE), ...
		GTA_ST_TA.ID, GTA_ST_TA.getPropDefault(GTA_ST_TA.ID), ...
		GTA_ST_TA.LABEL, GTA_ST_TA.getPropDefault(GTA_ST_TA.LABEL), ...
		GTA_ST_TA.NOTES, GTA_ST_TA.getPropDefault(GTA_ST_TA.NOTES), ...
		GTA_ST_TA.TOSTRING, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_C, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_M, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_M), ...
		GTA_ST_TA.ST_P, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_P), ...
		GTA_ST_TA.ST_D, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_D), ...
		GTA_ST_TA.ST_R, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_Q, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_E, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_F, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_F), ...
		GTA_ST_TA.ST_G, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_G) ...
		);
	 
	% GTA_ST_TA with 1st callbacks
	gt_1 = GTA_ST_TA( ...
		GTA_ST_TA.ELCLASS, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.NAME, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.DESCRIPTION, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.TEMPLATE, gt_0.getCallback(4), ..., ...
		GTA_ST_TA.ID, gt_0.getCallback(5), ..., ...
		GTA_ST_TA.LABEL, GTA_ST_TA.getPropDefault(GTA_ST_TA.LABEL), ...
		GTA_ST_TA.NOTES, GTA_ST_TA.getPropDefault(GTA_ST_TA.NOTES), ...
		GTA_ST_TA.TOSTRING, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_C, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_M, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_M), ...
		GTA_ST_TA.ST_P, gt_0.getCallback(11), ..., ...
		GTA_ST_TA.ST_D, gt_0.getCallback(12), ..., ...
		GTA_ST_TA.ST_R, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_Q, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_E, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_F, gt_0.getCallback(16), ..., ...
		GTA_ST_TA.ST_G, gt_0.getCallback(17) ... ...
		);
	 
	prop_number = GTA_ST_TA.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(GTA_ST_TA.getPropTag(prop));
		switch GTA_ST_TA.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(gt_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(gt_1.get(prop), gt_0.get(prop)) && ~isa(gt_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(gt_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% GTA_ST_TA with 2nd callbacks
	gt_2 = GTA_ST_TA( ...
		GTA_ST_TA.ELCLASS, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.NAME, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.DESCRIPTION, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.TEMPLATE, gt_1.getCallback(4), ..., ...
		GTA_ST_TA.ID, gt_1.getCallback(5), ..., ...
		GTA_ST_TA.LABEL, GTA_ST_TA.getPropDefault(GTA_ST_TA.LABEL), ...
		GTA_ST_TA.NOTES, GTA_ST_TA.getPropDefault(GTA_ST_TA.NOTES), ...
		GTA_ST_TA.TOSTRING, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_C, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_M, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_M), ...
		GTA_ST_TA.ST_P, gt_1.getCallback(11), ..., ...
		GTA_ST_TA.ST_D, gt_1.getCallback(12), ..., ...
		GTA_ST_TA.ST_R, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_Q, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_E, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_F, gt_1.getCallback(16), ..., ...
		GTA_ST_TA.ST_G, gt_1.getCallback(17) ... ...
		);
	 
	prop_number = GTA_ST_TA.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(GTA_ST_TA.getPropTag(prop));
		switch GTA_ST_TA.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(gt_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(gt_2.get(prop), gt_0.get(prop)) && ~isa(gt_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(gt_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% GTA_ST_TA with 3rd callbacks
	gt_3 = GTA_ST_TA( ...
		GTA_ST_TA.ELCLASS, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.NAME, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.DESCRIPTION, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.TEMPLATE, gt_2.getCallback(4), ..., ...
		GTA_ST_TA.ID, gt_2.getCallback(5), ..., ...
		GTA_ST_TA.LABEL, GTA_ST_TA.getPropDefault(GTA_ST_TA.LABEL), ...
		GTA_ST_TA.NOTES, GTA_ST_TA.getPropDefault(GTA_ST_TA.NOTES), ...
		GTA_ST_TA.TOSTRING, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_C, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_M, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_M), ...
		GTA_ST_TA.ST_P, gt_2.getCallback(11), ..., ...
		GTA_ST_TA.ST_D, gt_2.getCallback(12), ..., ...
		GTA_ST_TA.ST_R, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_Q, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_E, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_F, gt_2.getCallback(16), ..., ...
		GTA_ST_TA.ST_G, gt_2.getCallback(17) ... ...
		);
	 
	prop_number = GTA_ST_TA.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(GTA_ST_TA.getPropTag(prop));
		switch GTA_ST_TA.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(gt_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(gt_3.get(prop), gt_0.get(prop)) && ~isa(gt_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(gt_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	gt = GTA_ST_TA();
	 
	gt_copy = gt.copy();
	 
	assert(gt_copy ~= gt, ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(gt_copy, gt), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		value = gt.getr(prop);
		value_copy = gt_copy.getr(prop);
		switch GTA_ST_TA.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					'GTA_ST_TA.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
							'GTA_ST_TA.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
							'GTA_ST_TA.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					gt_copy.isLocked(prop) == gt.isLocked(prop), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					'GTA_ST_TA.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					gt_copy.isChecked(prop) == gt.isChecked(prop), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					'GTA_ST_TA.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					gt_copy.getPropSeed(prop) == gt.getPropSeed(prop), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					'GTA_ST_TA.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	gt = GTA_ST_TA( ...
		GTA_ST_TA.ELCLASS, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.NAME, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.DESCRIPTION, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.TEMPLATE, GTA_ST_TA.getPropDefault(GTA_ST_TA.TEMPLATE), ...
		GTA_ST_TA.ID, GTA_ST_TA.getPropDefault(GTA_ST_TA.ID), ...
		GTA_ST_TA.LABEL, GTA_ST_TA.getPropDefault(GTA_ST_TA.LABEL), ...
		GTA_ST_TA.NOTES, GTA_ST_TA.getPropDefault(GTA_ST_TA.NOTES), ...
		GTA_ST_TA.TOSTRING, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_C, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_M, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_M), ...
		GTA_ST_TA.ST_P, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_P), ...
		GTA_ST_TA.ST_D, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_D), ...
		GTA_ST_TA.ST_R, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_Q, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_E, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_F, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_F), ...
		GTA_ST_TA.ST_G, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_G) ...
		);
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		if GTA_ST_TA.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':GTA_ST_TA']);
			% gt.memorize(prop);
			% warning(warning_backup)
		elseif GTA_ST_TA.getPropCategory(prop) == Category.EVANESCENT && gt.getPropFormat(prop) == Format.HANDLE
			gt.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:GTA_ST_TA');
			delete(ancestor(gt.get(prop), 'figure'))
			warning(warning_backup)
		else
			gt.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	gt_copy = gt.copy();
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		value = gt.getr(prop);
		value_copy = gt_copy.getr(prop);
		switch GTA_ST_TA.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					'GTA_ST_TA.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
							'GTA_ST_TA.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
							'GTA_ST_TA.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						gt_copy.isLocked(prop) == gt.isLocked(prop), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gt_copy.isChecked(prop) == gt.isChecked(prop), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gt_copy.getPropSeed(prop) == gt.getPropSeed(prop), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	gt_0 = GTA_ST_TA( ...
		GTA_ST_TA.ELCLASS, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.NAME, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.DESCRIPTION, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.TEMPLATE, GTA_ST_TA.getPropDefault(GTA_ST_TA.TEMPLATE), ...
		GTA_ST_TA.ID, GTA_ST_TA.getPropDefault(GTA_ST_TA.ID), ...
		GTA_ST_TA.LABEL, GTA_ST_TA.getPropDefault(GTA_ST_TA.LABEL), ...
		GTA_ST_TA.NOTES, GTA_ST_TA.getPropDefault(GTA_ST_TA.NOTES), ...
		GTA_ST_TA.TOSTRING, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_C, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_M, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_M), ...
		GTA_ST_TA.ST_P, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_P), ...
		GTA_ST_TA.ST_D, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_D), ...
		GTA_ST_TA.ST_R, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_Q, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_E, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_F, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_F), ...
		GTA_ST_TA.ST_G, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_G) ...
		);
	 
	gt = GTA_ST_TA( ...
		GTA_ST_TA.ELCLASS, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.NAME, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.DESCRIPTION, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.TEMPLATE, gt_0.getCallback(4), ..., ...
		GTA_ST_TA.ID, gt_0.getCallback(5), ..., ...
		GTA_ST_TA.LABEL, GTA_ST_TA.getPropDefault(GTA_ST_TA.LABEL), ...
		GTA_ST_TA.NOTES, GTA_ST_TA.getPropDefault(GTA_ST_TA.NOTES), ...
		GTA_ST_TA.TOSTRING, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_C, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_M, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_M), ...
		GTA_ST_TA.ST_P, gt_0.getCallback(11), ..., ...
		GTA_ST_TA.ST_D, gt_0.getCallback(12), ..., ...
		GTA_ST_TA.ST_R, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_Q, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_E, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_F, gt_0.getCallback(16), ..., ...
		GTA_ST_TA.ST_G, gt_0.getCallback(17) ... ...
		);
	 
	gt_copy = gt.copy();
	gt_0_copy = gt_copy.getr('ID').get('EL');
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
		value = gt.getr(prop);
		value_copy = gt_copy.getr(prop);
		switch GTA_ST_TA.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					'GTA_ST_TA.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
							'GTA_ST_TA.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
							'GTA_ST_TA.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == gt_0.getCallback(prop), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The callback should be obtained from GTA_ST_TA.getCallback().' ...
						)
					assert( ...
						value_copy == gt_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The callback should be obtained from GTA_ST_TA.getCallback().' ...
						)
				end
	 
					assert( ...
						gt_copy.isLocked(prop) == gt.isLocked(prop), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gt_copy.isChecked(prop) == gt.isChecked(prop), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						gt_copy.getPropSeed(prop) == gt.getPropSeed(prop), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gt_template = GTA_ST_TA();
	gt = GTA_ST_TA('TEMPLATE', gt_template);
	 
	for prop = 1:1:GTA_ST_TA.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(GTA_ST_TA.getPropTag(prop));
		switch GTA_ST_TA.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == GTA_ST_TA.TEMPLATE
					assert( ...
						isa(gt.getr(prop), 'GTA_ST_TA'), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA TEMPLATE does not work. GTA_ST_TA.getr(''TEMPLATE'') should be a GTA_ST_TA element.' ...
						)
					assert( ...
						isa(gt_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						'GTA_ST_TA TEMPLATE does not work. GTA_ST_TA_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(gt.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						['GTA_ST_TA TEMPLATE does not work. GTA_ST_TA.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						gt.getr(prop).get('EL') == gt_template && gt.getr(prop).get('PROP') == prop && strcmp(gt.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						['GTA_ST_TA TEMPLATE does not work. GTA_ST_TA.getr(' TAG ') should be a Callback to gt_template.' TAG '.'] ...
						)
					assert( ...
						isa(gt_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
						['GTA_ST_TA TEMPLATE does not work. GTA_ST_TA_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(gt.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA TEMPLATE does not work. GTA_ST_TA.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(gt_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
					['GTA_ST_TA TEMPLATE does not work. GTA_ST_TA_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gt = GTA_ST_TA( ...
		GTA_ST_TA.ELCLASS, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.NAME, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.DESCRIPTION, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.TEMPLATE, GTA_ST_TA.getPropDefault(GTA_ST_TA.TEMPLATE), ...
		GTA_ST_TA.ID, GTA_ST_TA.getPropDefault(GTA_ST_TA.ID), ...
		GTA_ST_TA.LABEL, GTA_ST_TA.getPropDefault(GTA_ST_TA.LABEL), ...
		GTA_ST_TA.NOTES, GTA_ST_TA.getPropDefault(GTA_ST_TA.NOTES), ...
		GTA_ST_TA.TOSTRING, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_C, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_M, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_M), ...
		GTA_ST_TA.ST_P, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_P), ...
		GTA_ST_TA.ST_D, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_D), ...
		GTA_ST_TA.ST_R, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_Q, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_E, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_F, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_F), ...
		GTA_ST_TA.ST_G, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_G) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'gta_st_ta_to_be_erased.b2'];
	 
	Element.save(gt, filename)
	 
	gt_loaded = Element.load(filename);
	 
	assert( ...
		isequal(gt.copy(), gt_loaded), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.save(gt) and/or GTA_ST_TA.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gt = GTA_ST_TA( ...
		GTA_ST_TA.ELCLASS, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.NAME, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.DESCRIPTION, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.TEMPLATE, GTA_ST_TA.getPropDefault(GTA_ST_TA.TEMPLATE), ...
		GTA_ST_TA.ID, GTA_ST_TA.getPropDefault(GTA_ST_TA.ID), ...
		GTA_ST_TA.LABEL, GTA_ST_TA.getPropDefault(GTA_ST_TA.LABEL), ...
		GTA_ST_TA.NOTES, GTA_ST_TA.getPropDefault(GTA_ST_TA.NOTES), ...
		GTA_ST_TA.TOSTRING, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_C, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_M, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_M), ...
		GTA_ST_TA.ST_P, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_P), ...
		GTA_ST_TA.ST_D, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_D), ...
		GTA_ST_TA.ST_R, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_Q, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_E, GTA_ST_TA.getNoValue(), ...
		GTA_ST_TA.ST_F, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_F), ...
		GTA_ST_TA.ST_G, GTA_ST_TA.getPropDefault(GTA_ST_TA.ST_G) ...
		);
	 
	[json, struct, el_list] = encodeJSON(gt);
	[gt_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(gt_dec ~= gt, ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		'GTA_ST_TA.encodeJSON() or GTA_ST_TA.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) GTA_ST_TA.getPropFormat(prop), num2cell(GTA_ST_TA.getProps())) == Format.HANDLE) && all(cellfun(@(prop) GTA_ST_TA.getPropFormat(prop), num2cell(GTA_ST_TA.getProps())) == Format.NET)
		assert(isequal(gt_dec, gt), ...
			[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
			'GTA_ST_TA.encodeJSON() or GTA_ST_TA.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: PanelPropStringTextArea
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	gt = GTA_ST_TA();
	gui = GUI('POSITION', [0 0 1 1], 'CLOSEREQ', false);
	
	pr_C = gt.getPanelProp(GTA_ST_TA.ST_C, 'PARENT', gui);
	pr_C.get('DRAW', 'Units', 'normalized', 'Position', [.05 .70 .40 .25])
	
	pr_M = gt.getPanelProp(GTA_ST_TA.ST_M, 'PARENT', gui);
	pr_M.get('DRAW', 'Units', 'normalized', 'Position', [.55 .70 .40 .25])
	
	pr_P = gt.getPanelProp(GTA_ST_TA.ST_P, 'PARENT', gui);
	pr_P.get('DRAW', 'Units', 'normalized', 'Position', [.05 .40 .20 .25])
	
	pr_D = gt.getPanelProp(GTA_ST_TA.ST_D, 'PARENT', gui);
	pr_D.get('DRAW', 'Units', 'normalized', 'Position', [.25 .40 .20 .25])
	
	pr_R = gt.getPanelProp(GTA_ST_TA.ST_R, 'PARENT', gui);
	pr_R.get('DRAW', 'Units', 'normalized', 'Position', [.05 .10 .25 .25])
	
	pr_Q = gt.getPanelProp(GTA_ST_TA.ST_Q, 'PARENT', gui);
	pr_Q.get('DRAW', 'Units', 'normalized', 'Position', [.35 .10 .25 .25])
	
	pr_E = gt.getPanelProp(GTA_ST_TA.ST_E, 'PARENT', gui);
	pr_E.get('DRAW', 'Units', 'normalized', 'Position', [.65 .10 .25 .25])
	
	pr_F = gt.getPanelProp(GTA_ST_TA.ST_F, 'PARENT', gui);
	pr_F.get('DRAW', 'Units', 'normalized', 'Position', [.50 .40 .20 .25])
	
	pr_G = gt.getPanelProp(GTA_ST_TA.ST_G, 'PARENT', gui);
	pr_G.get('DRAW', 'Units', 'normalized', 'Position', [.75 .40 .20 .25])
	
	pr_C.get('SHOW') % shows all
	
	assert(isequal(pr_C.get('TEXTAREA').get('Value'), {gt.get('ST_C')}))
	
	value = pr_M.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_M'))) % double \ to be converted to single \ in compilation
	gt.set('ST_M', '123\n456\n')
	value = pr_M.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_M'))) % double \ to be converted to single \ in compilation
	
	value = pr_P.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_P'))) % double \ to be converted to single \ in compilation
	gt.set('ST_P', '12\n34\n')
	value = pr_P.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_P'))) % double \ to be converted to single \ in compilation
	
	value = pr_D.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_D'))) % double \ to be converted to single \ in compilation
	gt.set('ST_D', '666\n666\n')
	value = pr_D.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_D'))) % double \ to be converted to single \ in compilation
	
	value = pr_F.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_F'))) % double \ to be converted to single \ in compilation
	gt.set('ST_F', '43\n21\n')
	value = pr_F.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_F'))) % double \ to be converted to single \ in compilation
	
	value = pr_G.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_G'))) % double \ to be converted to single \ in compilation
	gt.set('ST_G', '12\n21\n')
	value = pr_G.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_G'))) % double \ to be converted to single \ in compilation
	
	value = pr_R.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.getPropDefaultConditioned('ST_R'))) % double \ to be converted to single \ in compilation
	gt.get('ST_R')
	value = pr_R.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.getPropDefaultConditioned('ST_R'))) % double \ to be converted to single \ in compilation
	gt.memorize('ST_R')
	value = pr_R.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_R'))) % double \ to be converted to single \ in compilation
	
	value = pr_Q.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.getPropDefaultConditioned('ST_Q'))) % double \ to be converted to single \ in compilation
	gt.get('ST_Q')
	value = pr_Q.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.getPropDefaultConditioned('ST_Q'))) % double \ to be converted to single \ in compilation
	warning('off', [BRAPH2.STR ':' class(gt)])
	gt.memorize('ST_Q')
	warning('on', [BRAPH2.STR ':' class(gt)])
	value = pr_Q.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_Q'))) % double \ to be converted to single \ in compilation
	
	value = pr_E.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.getPropDefaultConditioned('ST_E'))) % double \ to be converted to single \ in compilation
	warning('off', [BRAPH2.STR ':' class(gt)])
	gt.get('ST_E')
	warning('on', [BRAPH2.STR ':' class(gt)])
	value = pr_E.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.getPropDefaultConditioned('ST_E'))) % double \ to be converted to single \ in compilation
	gt.memorize('ST_E')
	value = pr_E.get('TEXTAREA').get('Value');
	assert(isequal(sprintf('%s\\n', value{:}), gt.get('ST_E'))) % double \ to be converted to single \ in compilation
	
	pr_F.get('CLOSE') % closes all
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':GTA_ST_TA:' BRAPH2.FAIL_TEST], ...
		[' When testing GTA_ST_TA no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

