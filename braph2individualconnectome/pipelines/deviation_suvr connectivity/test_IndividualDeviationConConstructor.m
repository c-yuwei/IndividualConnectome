%TEST_INDIVIDUALDEVIATIONCONCONSTRUCTOR

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	icdd = IndividualDeviationConConstructor();
	 
	% get('ELCLASS')
	if isa(IndividualDeviationConConstructor, 'ConcreteElement')
		assert(strcmp(IndividualDeviationConConstructor().get('ELCLASS'), 'IndividualDeviationConConstructor'), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor().get(''ELCLASS'') should return ''IndividualDeviationConConstructor''.')
	end
	 
	% getBuild()
	assert(IndividualDeviationConConstructor.getBuild() == 1 && IndividualDeviationConConstructor.getBuild() > 0, ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.getBuild() should return the IndividualDeviationConConstructor build number.')
	assert(icdd.getBuild() == 1 && icdd.getBuild() > 0 , ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'icdd.getBuild() should return the IndividualDeviationConConstructor build number.')
	assert(Element.getBuild(icdd) == 1 && Element.getBuild(icdd) > 0, ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(icdd) should return the IndividualDeviationConConstructor build number.')
	assert(Element.getBuild('IndividualDeviationConConstructor') == 1 && Element.getBuild('IndividualDeviationConConstructor') > 0, ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''IndividualDeviationConConstructor'') should return the IndividualDeviationConConstructor build number.')
	 
	% getClass()
	assert(strcmp(IndividualDeviationConConstructor.getClass(), 'IndividualDeviationConConstructor'), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.getClass() should return ''IndividualDeviationConConstructor''.')
	assert(strcmp(icdd.getClass(), 'IndividualDeviationConConstructor'), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'icdd.getClass() should return ''IndividualDeviationConConstructor''.')
	assert(strcmp(Element.getClass(icdd), 'IndividualDeviationConConstructor'), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(icdd) should return ''IndividualDeviationConConstructor''.')
	assert(strcmp(Element.getClass('IndividualDeviationConConstructor'), 'IndividualDeviationConConstructor'), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''IndividualDeviationConConstructor'') should return ''IndividualDeviationConConstructor''.')
	 
	% getSubclasses()
	assert(isequal(IndividualDeviationConConstructor.getSubclasses(), subclasses('IndividualDeviationConConstructor', [], [], true)), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.getSubclasses() should return the same result as subclasses(''IndividualDeviationConConstructor'', [], [], true).')
	assert(isequal(icdd.getSubclasses(), subclasses('IndividualDeviationConConstructor', [], [], true)), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''IndividualDeviationConConstructor'', [], [], true).')
	assert(isequal(Element.getSubclasses(icdd), subclasses('IndividualDeviationConConstructor', [], [], true)), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(icdd) should return the same result as subclasses(''IndividualDeviationConConstructor'', [], [], true).')
	assert(isequal(Element.getSubclasses('IndividualDeviationConConstructor'), subclasses('IndividualDeviationConConstructor', [], [], true)), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''IndividualDeviationConConstructor'') should return the same result as subclasses(''IndividualDeviationConConstructor'', [], [], true).')
	 
	% getProps()
	assert(isempty(IndividualDeviationConConstructor.getProps()) || isequal(IndividualDeviationConConstructor.getProps(), 1:1:length(IndividualDeviationConConstructor.getProps())), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.getProps() should return a row vector [1:1:N].')
	assert(isempty(IndividualDeviationConConstructor.getProps()) || isequal(icdd.getProps(), 1:1:length(IndividualDeviationConConstructor.getProps())), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'icdd.getProps() should return a row vector [1:1:N].')
	assert(isempty(IndividualDeviationConConstructor.getProps()) || isequal(Element.getProps(icdd), 1:1:length(IndividualDeviationConConstructor.getProps())), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(icdd) should return a row vector [1:1:N].')
	assert(isempty(IndividualDeviationConConstructor.getProps()) || isequal(Element.getProps('IndividualDeviationConConstructor'), 1:1:length(IndividualDeviationConConstructor.getProps())), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''IndividualDeviationConConstructor'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) IndividualDeviationConConstructor.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(IndividualDeviationConConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualDeviationConConstructor.getProps())), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.getProps(category) does not work.')
	tmp = cellfun(@(category) icdd.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(IndividualDeviationConConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualDeviationConConstructor.getProps())), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'icdd.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(icdd, category), categories, 'UniformOutput', false);
	assert(isempty(IndividualDeviationConConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualDeviationConConstructor.getProps())), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(icdd, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('IndividualDeviationConConstructor', category), categories, 'UniformOutput', false);
	assert(isempty(IndividualDeviationConConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualDeviationConConstructor.getProps())), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''IndividualDeviationConConstructor'', category) does not work.')
	 
	% getPropNumber()
	assert(IndividualDeviationConConstructor.getPropNumber() == length(IndividualDeviationConConstructor.getProps()), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.getPropNumber() should return the number of properties.')
	assert(icdd.getPropNumber() == length(IndividualDeviationConConstructor.getProps()), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'icdd.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(icdd) == length(IndividualDeviationConConstructor.getProps()), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(icdd) should return the number of properties.')
	assert(Element.getPropNumber('IndividualDeviationConConstructor') == length(IndividualDeviationConConstructor.getProps()), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''IndividualDeviationConConstructor'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) IndividualDeviationConConstructor.getPropNumber(category), categories)) == IndividualDeviationConConstructor.getPropNumber(), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) icdd.getPropNumber(category), categories)) == IndividualDeviationConConstructor.getPropNumber(), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'icdd.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(icdd, category), categories)) == IndividualDeviationConConstructor.getPropNumber(), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(icdd, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('IndividualDeviationConConstructor', category), categories)) == IndividualDeviationConConstructor.getPropNumber(), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''IndividualDeviationConConstructor'', category) does not work.')
	 
	% existsProp(prop)
	assert(~IndividualDeviationConConstructor.existsProp(NaN), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.existsProp(prop) does not work.')
	assert(~icdd.existsProp(NaN), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'icdd.existsProp(prop) does not work.')
	assert(~Element.existsProp(icdd, NaN), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(icdd, prop) does not work.')
	assert(~Element.existsProp('IndividualDeviationConConstructor', NaN), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''IndividualDeviationConConstructor'', prop) does not work.')
	 
	assert_with_error('IndividualDeviationConConstructor.existsProp(NaN)', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], icdd)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], icdd)
	assert_with_error('Element.existsProp(''IndividualDeviationConConstructor'', NaN)', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		assert(IndividualDeviationConConstructor.existsProp(prop), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.existsProp(prop) does not work.')
		assert(icdd.existsProp(prop), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.existsProp(prop) does not work.')
		assert(Element.existsProp(icdd, prop), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(icdd, prop) does not work.')
		assert(Element.existsProp('IndividualDeviationConConstructor', prop), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''IndividualDeviationConConstructor'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~IndividualDeviationConConstructor.existsTag(''), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.existsTag(tag) does not work.')
	assert(~icdd.existsTag(''), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'icdd.existsTag(tag) does not work.')
	assert(~Element.existsTag(icdd, ''), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(icdd, tag) does not work.')
	assert(~Element.existsTag('IndividualDeviationConConstructor', ''), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''IndividualDeviationConConstructor'', tag) does not work.')
	 
	assert_with_error('IndividualDeviationConConstructor.existsTag('''')', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], icdd)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], icdd)
	assert_with_error('Element.existsTag(''IndividualDeviationConConstructor'', '''')', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		tag = icdd.getPropTag(prop);
		assert(IndividualDeviationConConstructor.existsTag(tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.existsTag(tag) does not work.')
		assert(icdd.existsTag(tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.existsTag(tag) does not work.')
		assert(Element.existsTag(icdd, tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(icdd, tga) does not work.')
		assert(Element.existsTag('IndividualDeviationConConstructor', tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''IndividualDeviationConConstructor'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		assert(IndividualDeviationConConstructor.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.getPropProp(prop) does not work.')
		assert(icdd.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.getPropProp(prop) does not work.')
		assert(Element.getPropProp(icdd, prop) == prop, ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(icdd, prop) does not work.')
		assert(Element.getPropProp('IndividualDeviationConConstructor', prop) == prop, ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''IndividualDeviationConConstructor'', prop) does not work.')
	 
		tag = icdd.getPropTag(prop);
		assert(IndividualDeviationConConstructor.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.getPropProp(tag) does not work.')
		assert(icdd.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.getPropProp(tag) does not work.')
		assert(Element.getPropProp(icdd, tag) == prop, ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(icdd, tag) does not work.')
		assert(Element.getPropProp('IndividualDeviationConConstructor', prop) == prop, ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''IndividualDeviationConConstructor'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		tag = icdd.getPropTag(prop);
	 
		assert(strcmp(IndividualDeviationConConstructor.getPropTag(prop), tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.getPropTag(prop) does not work.')
		assert(strcmp(icdd.getPropTag(prop), tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(icdd, prop), tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(icdd, prop) does not work.')
		assert(strcmp(Element.getPropTag('IndividualDeviationConConstructor', prop), tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''IndividualDeviationConConstructor'', prop) does not work.')
	 
		assert(strcmp(IndividualDeviationConConstructor.getPropTag(tag), tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.getPropTag(tag) does not work.')
		assert(strcmp(icdd.getPropTag(tag), tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(icdd, tag), tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(icdd, tag) does not work.')
		assert(strcmp(Element.getPropTag('IndividualDeviationConConstructor', prop), tag), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''IndividualDeviationConConstructor'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		tag = icdd.getPropTag(prop);
	 
		assert(Category.existsCategory(IndividualDeviationConConstructor.getPropCategory(prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(icdd.getPropCategory(prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(icdd, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(icdd, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(icdd, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''IndividualDeviationConConstructor'', prop) does not work.')
	 
		assert(Category.existsCategory(IndividualDeviationConConstructor.getPropCategory(tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(icdd.getPropCategory(tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(icdd, tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(icdd, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(icdd, tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''IndividualDeviationConConstructor'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		tag = icdd.getPropTag(prop);
	 
		assert(Format.existsFormat(IndividualDeviationConConstructor.getPropFormat(prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(icdd.getPropFormat(prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(icdd, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(icdd, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(icdd, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''IndividualDeviationConConstructor'', prop) does not work.')
	 
		assert(Format.existsFormat(IndividualDeviationConConstructor.getPropFormat(tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(icdd.getPropFormat(tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(icdd, tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(icdd, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(icdd, tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''IndividualDeviationConConstructor'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		tag = icdd.getPropTag(prop);
	 
		assert(ischar(IndividualDeviationConConstructor.getPropDescription(prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.getPropDescription(prop) does not work.')
		assert(ischar(icdd.getPropDescription(prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(icdd, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(icdd, prop) does not work.')
		assert(ischar(Element.getPropDescription(icdd, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''IndividualDeviationConConstructor'', prop) does not work.')
	 
		assert(ischar(IndividualDeviationConConstructor.getPropDescription(tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.getPropDescription(tag) does not work.')
		assert(ischar(icdd.getPropDescription(tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(icdd, tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(icdd, tag) does not work.')
		assert(ischar(Element.getPropDescription(icdd, tag)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''IndividualDeviationConConstructor'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		tag = icdd.getPropTag(prop);
	 
		settings = IndividualDeviationConConstructor.getPropSettings(prop);
		settings = icdd.getPropSettings(prop);
		settings = Element.getPropSettings(icdd, prop);
		settings = Element.getPropSettings('IndividualDeviationConConstructor', prop);
	 
		settings = IndividualDeviationConConstructor.getPropSettings(tag);
		settings = icdd.getPropSettings(tag);
		settings = Element.getPropSettings(icdd, tag);
		settings = Element.getPropSettings('IndividualDeviationConConstructor', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		tag = icdd.getPropTag(prop);
	 
		default = IndividualDeviationConConstructor.getPropDefault(prop);
		default = icdd.getPropDefault(prop);
		default = Element.getPropDefault(icdd, prop);
		default = Element.getPropDefault('IndividualDeviationConConstructor', prop);
	 
		default = IndividualDeviationConConstructor.getPropDefault(tag);
		default = icdd.getPropDefault(tag);
		default = Element.getPropDefault(icdd, tag);
		default = Element.getPropDefault('IndividualDeviationConConstructor', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		tag = icdd.getPropTag(prop);
	 
		conditioned_default = IndividualDeviationConConstructor.getPropDefaultConditioned(prop);
		conditioned_default = icdd.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(icdd, prop);
		conditioned_default = Element.getPropDefaultConditioned('IndividualDeviationConConstructor', prop);
	 
		conditioned_default = IndividualDeviationConConstructor.getPropDefaultConditioned(tag);
		conditioned_default = icdd.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(icdd, tag);
		conditioned_default = Element.getPropDefaultConditioned('IndividualDeviationConConstructor', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		tag = icdd.getPropTag(prop);
	 
		assert(~IndividualDeviationConConstructor.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.checkProp(prop, value) does not work.')
		assert(~icdd.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(icdd, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(icdd, prop, value) does not work.')
		assert(~Element.checkProp('IndividualDeviationConConstructor', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualDeviationConConstructor'', prop, value) does not work.')
	 
		assert_with_error('IndividualDeviationConConstructor.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], prop, icdd)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], prop, icdd)
		assert_with_error('Element.checkProp(''IndividualDeviationConConstructor'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~IndividualDeviationConConstructor.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.checkProp(tag, value) does not work.')
		assert(~icdd.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(icdd, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(icdd, tag, value) does not work.')
		assert(~Element.checkProp('IndividualDeviationConConstructor', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualDeviationConConstructor'', tag, value) does not work.')
	 
		assert_with_error('IndividualDeviationConConstructor.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], tag, icdd)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], tag, icdd)
		assert_with_error('Element.checkProp(''IndividualDeviationConConstructor'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(IndividualDeviationConConstructor.checkProp(prop, Element.getPropDefaultConditioned(IndividualDeviationConConstructor, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.checkProp(prop, <conditioned default value>) does not work.')
		assert(icdd.checkProp(prop, Element.getPropDefaultConditioned(IndividualDeviationConConstructor, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(icdd, prop, Element.getPropDefaultConditioned(IndividualDeviationConConstructor, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(icdd, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('IndividualDeviationConConstructor', prop, Element.getPropDefaultConditioned(IndividualDeviationConConstructor, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualDeviationConConstructor'', prop, <conditioned default value>) does not work.')
	 
		assert(IndividualDeviationConConstructor.checkProp(tag, Element.getPropDefaultConditioned(IndividualDeviationConConstructor, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.checkProp(tag, <conditioned default value>) does not work.')
		assert(icdd.checkProp(tag, Element.getPropDefaultConditioned(IndividualDeviationConConstructor, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'icdd.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(icdd, tag, Element.getPropDefaultConditioned(IndividualDeviationConConstructor, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(icdd, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('IndividualDeviationConConstructor', tag, Element.getPropDefaultConditioned(IndividualDeviationConConstructor, prop)), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualDeviationConConstructor'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icdd = IndividualDeviationConConstructor( ...
		IndividualDeviationConConstructor.ELCLASS, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.NAME, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.DESCRIPTION, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.TEMPLATE, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.TEMPLATE), ...
		IndividualDeviationConConstructor.ID, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.ID), ...
		IndividualDeviationConConstructor.LABEL, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.LABEL), ...
		IndividualDeviationConConstructor.NOTES, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.NOTES), ...
		IndividualDeviationConConstructor.TOSTRING, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.WAITBAR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.WAITBAR), ...
		IndividualDeviationConConstructor.GR_SUVR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR), ...
		IndividualDeviationConConstructor.GR_SUVR_REF, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR_REF), ...
		IndividualDeviationConConstructor.CONNECTOME_CONSTUCT_METHOD, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.GR, IndividualDeviationConConstructor.getNoValue() ...
		);
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndividualDeviationConConstructor.getPropTag(prop));
		switch IndividualDeviationConConstructor.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					icdd.getr(prop) == IndividualDeviationConConstructor.getNoValue(), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualDeviationConConstructor.getCategoryName(IndividualDeviationConConstructor.getPropCategory(prop)) ', IndividualDeviationConConstructor.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualDeviationConConstructor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					icdd.getr(TAG) == IndividualDeviationConConstructor.getNoValue(), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualDeviationConConstructor.getCategoryName(IndividualDeviationConConstructor.getPropCategory(prop)) ', IndividualDeviationConConstructor.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualDeviationConConstructor.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(icdd.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(icdd.getPropSettings(prop))
					assert( ...
						icdd.checkFormat(icdd.getPropFormat(prop), icdd.get(prop)), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						['IndividualDeviationConConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						icdd.checkFormat(icdd.getPropFormat(prop), icdd.get(prop), icdd.getPropSettings(prop)), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						['IndividualDeviationConConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					icdd.getr(prop) == IndividualDeviationConConstructor.getNoValue(), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualDeviationConConstructor.getCategoryName(IndividualDeviationConConstructor.getPropCategory(prop)) ', IndividualDeviationConConstructor.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualDeviationConConstructor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					icdd.getr(TAG) == IndividualDeviationConConstructor.getNoValue(), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualDeviationConConstructor.getCategoryName(IndividualDeviationConConstructor.getPropCategory(prop)) ', IndividualDeviationConConstructor.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualDeviationConConstructor.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':IndividualDeviationConConstructor']);
				assert( ...
					~isa(icdd.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(icdd.getPropSettings(prop))
					assert( ...
						icdd.checkFormat(icdd.getPropFormat(prop), icdd.get(prop)), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						['IndividualDeviationConConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						icdd.checkFormat(icdd.getPropFormat(prop), icdd.get(prop), icdd.getPropSettings(prop)), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						['IndividualDeviationConConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(icdd.getr(prop), IndividualDeviationConConstructor.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by IndividualDeviationConConstructor.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in IndividualDeviationConConstructor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(icdd.getr(TAG), IndividualDeviationConConstructor.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' TAG ') must be inizialized to its default value ' ...
					'given by IndividualDeviationConConstructor.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in IndividualDeviationConConstructor.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icdd = IndividualDeviationConConstructor( ...
		IndividualDeviationConConstructor.ELCLASS, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.NAME, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.DESCRIPTION, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.TEMPLATE, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.TEMPLATE), ...
		IndividualDeviationConConstructor.ID, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.ID), ...
		IndividualDeviationConConstructor.LABEL, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.LABEL), ...
		IndividualDeviationConConstructor.NOTES, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.NOTES), ...
		IndividualDeviationConConstructor.TOSTRING, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.WAITBAR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.WAITBAR), ...
		IndividualDeviationConConstructor.GR_SUVR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR), ...
		IndividualDeviationConConstructor.GR_SUVR_REF, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR_REF), ...
		IndividualDeviationConConstructor.CONNECTOME_CONSTUCT_METHOD, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.GR, IndividualDeviationConConstructor.getNoValue() ...
		);
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndividualDeviationConConstructor.getPropTag(prop));
		switch IndividualDeviationConConstructor.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(icdd.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(icdd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(icdd.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(icdd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					icdd.checkFormat(icdd.getPropFormat(prop), icdd.getr(prop),icdd.getPropSettings(prop)), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':IndividualDeviationConConstructor']);
				assert( ...
					~isa(icdd.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(icdd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':IndividualDeviationConConstructor']);
	% 			assert( ...
	% 				~isa(icdd.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
	% 				['IndividualDeviationConConstructor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(icdd.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
	% 				['IndividualDeviationConConstructor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				icdd.checkFormat(icdd.getPropFormat(prop), icdd.getr(prop),icdd.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
	% 				['IndividualDeviationConConstructor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':IndividualDeviationConConstructor']);
				assert( ...
					~isa(icdd.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(icdd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(icdd.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(icdd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					icdd.checkFormat(icdd.getPropFormat(prop), icdd.getr(prop),icdd.getPropSettings(prop)), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if icdd.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:IndividualDeviationConConstructor');
					delete(ancestor(icdd.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(IndividualDeviationConConstructor.getProps(Category.RESULT))
		for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch IndividualDeviationConConstructor.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						icdd.isLocked(prop), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						['IndividualDeviationConConstructor.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~icdd.isLocked(prop), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						['IndividualDeviationConConstructor.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icdd = IndividualDeviationConConstructor();
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		TAG = upper(IndividualDeviationConConstructor.getPropTag(prop));
		assert( ...
			~icdd.isLocked(prop), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			['IndividualDeviationConConstructor.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~icdd.isLocked(TAG), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			['IndividualDeviationConConstructor.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	icdd.lock()
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		switch IndividualDeviationConConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					icdd.isLocked(prop), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~icdd.isLocked(prop), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icdd = IndividualDeviationConConstructor();
	 
	warning_backup = warning('off', 'BRAPH2:IndividualDeviationConConstructor');
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		icdd.lock(prop)
		switch IndividualDeviationConConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					icdd.isLocked(prop), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~icdd.isLocked(prop), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icdd = IndividualDeviationConConstructor();
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		TAG = upper(IndividualDeviationConConstructor.getPropTag(prop));
		assert( ...
			icdd.isChecked(prop), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			['IndividualDeviationConConstructor.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			icdd.isChecked(TAG), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			['IndividualDeviationConConstructor.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	icdd.unchecked()
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		assert( ...
			~icdd.isChecked(prop), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			['IndividualDeviationConConstructor.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	icdd.checked()
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		assert( ...
			icdd.isChecked(prop), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			['IndividualDeviationConConstructor.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic IndividualDeviationConConstructor
	icdd_0 = IndividualDeviationConConstructor( ...
		IndividualDeviationConConstructor.ELCLASS, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.NAME, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.DESCRIPTION, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.TEMPLATE, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.TEMPLATE), ...
		IndividualDeviationConConstructor.ID, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.ID), ...
		IndividualDeviationConConstructor.LABEL, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.LABEL), ...
		IndividualDeviationConConstructor.NOTES, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.NOTES), ...
		IndividualDeviationConConstructor.TOSTRING, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.WAITBAR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.WAITBAR), ...
		IndividualDeviationConConstructor.GR_SUVR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR), ...
		IndividualDeviationConConstructor.GR_SUVR_REF, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR_REF), ...
		IndividualDeviationConConstructor.CONNECTOME_CONSTUCT_METHOD, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.GR, IndividualDeviationConConstructor.getNoValue() ...
		);
	 
	% IndividualDeviationConConstructor with 1st callbacks
	icdd_1 = IndividualDeviationConConstructor( ...
		IndividualDeviationConConstructor.ELCLASS, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.NAME, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.DESCRIPTION, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.TEMPLATE, icdd_0.getCallback(4), ..., ...
		IndividualDeviationConConstructor.ID, icdd_0.getCallback(5), ..., ...
		IndividualDeviationConConstructor.LABEL, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.LABEL), ...
		IndividualDeviationConConstructor.NOTES, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.NOTES), ...
		IndividualDeviationConConstructor.TOSTRING, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.WAITBAR, icdd_0.getCallback(9), ..., ...
		IndividualDeviationConConstructor.GR_SUVR, icdd_0.getCallback(10), ..., ...
		IndividualDeviationConConstructor.GR_SUVR_REF, icdd_0.getCallback(11), ..., ...
		IndividualDeviationConConstructor.CONNECTOME_CONSTUCT_METHOD, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.GR, IndividualDeviationConConstructor.getNoValue() ...
		);
	 
	prop_number = IndividualDeviationConConstructor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndividualDeviationConConstructor.getPropTag(prop));
		switch IndividualDeviationConConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(icdd_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(icdd_1.get(prop), icdd_0.get(prop)) && ~isa(icdd_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(icdd_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% IndividualDeviationConConstructor with 2nd callbacks
	icdd_2 = IndividualDeviationConConstructor( ...
		IndividualDeviationConConstructor.ELCLASS, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.NAME, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.DESCRIPTION, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.TEMPLATE, icdd_1.getCallback(4), ..., ...
		IndividualDeviationConConstructor.ID, icdd_1.getCallback(5), ..., ...
		IndividualDeviationConConstructor.LABEL, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.LABEL), ...
		IndividualDeviationConConstructor.NOTES, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.NOTES), ...
		IndividualDeviationConConstructor.TOSTRING, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.WAITBAR, icdd_1.getCallback(9), ..., ...
		IndividualDeviationConConstructor.GR_SUVR, icdd_1.getCallback(10), ..., ...
		IndividualDeviationConConstructor.GR_SUVR_REF, icdd_1.getCallback(11), ..., ...
		IndividualDeviationConConstructor.CONNECTOME_CONSTUCT_METHOD, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.GR, IndividualDeviationConConstructor.getNoValue() ...
		);
	 
	prop_number = IndividualDeviationConConstructor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndividualDeviationConConstructor.getPropTag(prop));
		switch IndividualDeviationConConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(icdd_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(icdd_2.get(prop), icdd_0.get(prop)) && ~isa(icdd_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(icdd_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% IndividualDeviationConConstructor with 3rd callbacks
	icdd_3 = IndividualDeviationConConstructor( ...
		IndividualDeviationConConstructor.ELCLASS, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.NAME, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.DESCRIPTION, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.TEMPLATE, icdd_2.getCallback(4), ..., ...
		IndividualDeviationConConstructor.ID, icdd_2.getCallback(5), ..., ...
		IndividualDeviationConConstructor.LABEL, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.LABEL), ...
		IndividualDeviationConConstructor.NOTES, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.NOTES), ...
		IndividualDeviationConConstructor.TOSTRING, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.WAITBAR, icdd_2.getCallback(9), ..., ...
		IndividualDeviationConConstructor.GR_SUVR, icdd_2.getCallback(10), ..., ...
		IndividualDeviationConConstructor.GR_SUVR_REF, icdd_2.getCallback(11), ..., ...
		IndividualDeviationConConstructor.CONNECTOME_CONSTUCT_METHOD, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.GR, IndividualDeviationConConstructor.getNoValue() ...
		);
	 
	prop_number = IndividualDeviationConConstructor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndividualDeviationConConstructor.getPropTag(prop));
		switch IndividualDeviationConConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(icdd_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(icdd_3.get(prop), icdd_0.get(prop)) && ~isa(icdd_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(icdd_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	icdd = IndividualDeviationConConstructor();
	 
	icdd_copy = icdd.copy();
	 
	assert(icdd_copy ~= icdd, ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(icdd_copy, icdd), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		value = icdd.getr(prop);
		value_copy = icdd_copy.getr(prop);
		switch IndividualDeviationConConstructor.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					'IndividualDeviationConConstructor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
							'IndividualDeviationConConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
							'IndividualDeviationConConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					icdd_copy.isLocked(prop) == icdd.isLocked(prop), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					'IndividualDeviationConConstructor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					icdd_copy.isChecked(prop) == icdd.isChecked(prop), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					'IndividualDeviationConConstructor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					icdd_copy.getPropSeed(prop) == icdd.getPropSeed(prop), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					'IndividualDeviationConConstructor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	icdd = IndividualDeviationConConstructor( ...
		IndividualDeviationConConstructor.ELCLASS, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.NAME, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.DESCRIPTION, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.TEMPLATE, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.TEMPLATE), ...
		IndividualDeviationConConstructor.ID, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.ID), ...
		IndividualDeviationConConstructor.LABEL, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.LABEL), ...
		IndividualDeviationConConstructor.NOTES, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.NOTES), ...
		IndividualDeviationConConstructor.TOSTRING, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.WAITBAR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.WAITBAR), ...
		IndividualDeviationConConstructor.GR_SUVR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR), ...
		IndividualDeviationConConstructor.GR_SUVR_REF, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR_REF), ...
		IndividualDeviationConConstructor.CONNECTOME_CONSTUCT_METHOD, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.GR, IndividualDeviationConConstructor.getNoValue() ...
		);
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		if IndividualDeviationConConstructor.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':IndividualDeviationConConstructor']);
			% icdd.memorize(prop);
			% warning(warning_backup)
		elseif IndividualDeviationConConstructor.getPropCategory(prop) == Category.EVANESCENT && icdd.getPropFormat(prop) == Format.HANDLE
			icdd.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:IndividualDeviationConConstructor');
			delete(ancestor(icdd.get(prop), 'figure'))
			warning(warning_backup)
		else
			icdd.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	icdd_copy = icdd.copy();
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		value = icdd.getr(prop);
		value_copy = icdd_copy.getr(prop);
		switch IndividualDeviationConConstructor.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					'IndividualDeviationConConstructor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
							'IndividualDeviationConConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
							'IndividualDeviationConConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						icdd_copy.isLocked(prop) == icdd.isLocked(prop), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						icdd_copy.isChecked(prop) == icdd.isChecked(prop), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						icdd_copy.getPropSeed(prop) == icdd.getPropSeed(prop), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	icdd_0 = IndividualDeviationConConstructor( ...
		IndividualDeviationConConstructor.ELCLASS, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.NAME, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.DESCRIPTION, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.TEMPLATE, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.TEMPLATE), ...
		IndividualDeviationConConstructor.ID, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.ID), ...
		IndividualDeviationConConstructor.LABEL, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.LABEL), ...
		IndividualDeviationConConstructor.NOTES, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.NOTES), ...
		IndividualDeviationConConstructor.TOSTRING, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.WAITBAR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.WAITBAR), ...
		IndividualDeviationConConstructor.GR_SUVR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR), ...
		IndividualDeviationConConstructor.GR_SUVR_REF, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR_REF), ...
		IndividualDeviationConConstructor.CONNECTOME_CONSTUCT_METHOD, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.GR, IndividualDeviationConConstructor.getNoValue() ...
		);
	 
	icdd = IndividualDeviationConConstructor( ...
		IndividualDeviationConConstructor.ELCLASS, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.NAME, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.DESCRIPTION, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.TEMPLATE, icdd_0.getCallback(4), ..., ...
		IndividualDeviationConConstructor.ID, icdd_0.getCallback(5), ..., ...
		IndividualDeviationConConstructor.LABEL, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.LABEL), ...
		IndividualDeviationConConstructor.NOTES, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.NOTES), ...
		IndividualDeviationConConstructor.TOSTRING, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.WAITBAR, icdd_0.getCallback(9), ..., ...
		IndividualDeviationConConstructor.GR_SUVR, icdd_0.getCallback(10), ..., ...
		IndividualDeviationConConstructor.GR_SUVR_REF, icdd_0.getCallback(11), ..., ...
		IndividualDeviationConConstructor.CONNECTOME_CONSTUCT_METHOD, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.GR, IndividualDeviationConConstructor.getNoValue() ...
		);
	 
	icdd_copy = icdd.copy();
	icdd_0_copy = icdd_copy.getr('ID').get('EL');
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
		value = icdd.getr(prop);
		value_copy = icdd_copy.getr(prop);
		switch IndividualDeviationConConstructor.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					'IndividualDeviationConConstructor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
							'IndividualDeviationConConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
							'IndividualDeviationConConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == icdd_0.getCallback(prop), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The callback should be obtained from IndividualDeviationConConstructor.getCallback().' ...
						)
					assert( ...
						value_copy == icdd_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The callback should be obtained from IndividualDeviationConConstructor.getCallback().' ...
						)
				end
	 
					assert( ...
						icdd_copy.isLocked(prop) == icdd.isLocked(prop), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						icdd_copy.isChecked(prop) == icdd.isChecked(prop), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						icdd_copy.getPropSeed(prop) == icdd.getPropSeed(prop), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icdd_template = IndividualDeviationConConstructor();
	icdd = IndividualDeviationConConstructor('TEMPLATE', icdd_template);
	 
	for prop = 1:1:IndividualDeviationConConstructor.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndividualDeviationConConstructor.getPropTag(prop));
		switch IndividualDeviationConConstructor.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == IndividualDeviationConConstructor.TEMPLATE
					assert( ...
						isa(icdd.getr(prop), 'IndividualDeviationConConstructor'), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor TEMPLATE does not work. IndividualDeviationConConstructor.getr(''TEMPLATE'') should be a IndividualDeviationConConstructor element.' ...
						)
					assert( ...
						isa(icdd_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						'IndividualDeviationConConstructor TEMPLATE does not work. IndividualDeviationConConstructor_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(icdd.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						['IndividualDeviationConConstructor TEMPLATE does not work. IndividualDeviationConConstructor.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						icdd.getr(prop).get('EL') == icdd_template && icdd.getr(prop).get('PROP') == prop && strcmp(icdd.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						['IndividualDeviationConConstructor TEMPLATE does not work. IndividualDeviationConConstructor.getr(' TAG ') should be a Callback to icdd_template.' TAG '.'] ...
						)
					assert( ...
						isa(icdd_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
						['IndividualDeviationConConstructor TEMPLATE does not work. IndividualDeviationConConstructor_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(icdd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor TEMPLATE does not work. IndividualDeviationConConstructor.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(icdd_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
					['IndividualDeviationConConstructor TEMPLATE does not work. IndividualDeviationConConstructor_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icdd = IndividualDeviationConConstructor( ...
		IndividualDeviationConConstructor.ELCLASS, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.NAME, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.DESCRIPTION, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.TEMPLATE, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.TEMPLATE), ...
		IndividualDeviationConConstructor.ID, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.ID), ...
		IndividualDeviationConConstructor.LABEL, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.LABEL), ...
		IndividualDeviationConConstructor.NOTES, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.NOTES), ...
		IndividualDeviationConConstructor.TOSTRING, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.WAITBAR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.WAITBAR), ...
		IndividualDeviationConConstructor.GR_SUVR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR), ...
		IndividualDeviationConConstructor.GR_SUVR_REF, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR_REF), ...
		IndividualDeviationConConstructor.CONNECTOME_CONSTUCT_METHOD, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.GR, IndividualDeviationConConstructor.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'individualdeviationconconstructor_to_be_erased.b2'];
	 
	Element.save(icdd, filename)
	 
	icdd_loaded = Element.load(filename);
	 
	assert( ...
		isequal(icdd.copy(), icdd_loaded), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.save(icdd) and/or IndividualDeviationConConstructor.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icdd = IndividualDeviationConConstructor( ...
		IndividualDeviationConConstructor.ELCLASS, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.NAME, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.DESCRIPTION, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.TEMPLATE, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.TEMPLATE), ...
		IndividualDeviationConConstructor.ID, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.ID), ...
		IndividualDeviationConConstructor.LABEL, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.LABEL), ...
		IndividualDeviationConConstructor.NOTES, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.NOTES), ...
		IndividualDeviationConConstructor.TOSTRING, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.WAITBAR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.WAITBAR), ...
		IndividualDeviationConConstructor.GR_SUVR, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR), ...
		IndividualDeviationConConstructor.GR_SUVR_REF, IndividualDeviationConConstructor.getPropDefault(IndividualDeviationConConstructor.GR_SUVR_REF), ...
		IndividualDeviationConConstructor.CONNECTOME_CONSTUCT_METHOD, IndividualDeviationConConstructor.getNoValue(), ...
		IndividualDeviationConConstructor.GR, IndividualDeviationConConstructor.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(icdd);
	[icdd_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(icdd_dec ~= icdd, ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		'IndividualDeviationConConstructor.encodeJSON() or IndividualDeviationConConstructor.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) IndividualDeviationConConstructor.getPropFormat(prop), num2cell(IndividualDeviationConConstructor.getProps())) == Format.HANDLE) && all(cellfun(@(prop) IndividualDeviationConConstructor.getPropFormat(prop), num2cell(IndividualDeviationConConstructor.getProps())) == Format.NET)
		assert(isequal(icdd_dec, icdd), ...
			[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
			'IndividualDeviationConConstructor.encodeJSON() or IndividualDeviationConConstructor.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Example data
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	group_dir = fullfile(fileparts(which('IndividualDeviationConConstructor')),'Example data Nifti');
	if ~exist(group_dir)
	    create_example_NIfTI([],group_dir)
	end
end

%% Test 13: Verify Deviation-Based Connectome Constructor
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	im_ba = ImporterBrainAtlasXLS('FILE', which('aal94_atlas.xlsx'));
	ba = im_ba.get('BA');
	
	group_dir = fullfile(fileparts(which('IndividualDeviationConConstructor')),'Example data Nifti', 'Group1');
	im_gr1_WM_GM = ImporterGroupSubjNIfTI( ...
	    'DIRECTORY', group_dir, ...
	    'NIFTI_TYPE', {'T1'}, ...
	    'WAITBAR', true ...
	    );
	gr1_WM_GM = im_gr1_WM_GM.get('GR');
	
	im_gr1_PET = ImporterGroupSubjNIfTI( ...
	    'DIRECTORY', group_dir, ...
	    'NIFTI_TYPE', {'PET'}, ...
	    'WAITBAR', true ...
	    );
	gr1_PET = im_gr1_PET.get('GR');
	
	healthy_dir = fullfile(fileparts(which('IndividualDeviationConConstructor')),'Example data Nifti', 'Group2');
	im_gr_ref_WM_GM = ImporterGroupSubjNIfTI( ...
	    'DIRECTORY', healthy_dir, ...
	    'NIFTI_TYPE', {'T1'}, ...
	    'WAITBAR', true ...
	    );
	gr_ref_WM_GM = im_gr_ref_WM_GM.get('GR');
	
	im_gr_ref_PET = ImporterGroupSubjNIfTI( ...
	    'DIRECTORY', healthy_dir, ...
	    'NIFTI_TYPE', {'PET'}, ...
	    'WAITBAR', true ...
	    );
	gr_ref_PET = im_gr_ref_PET.get('GR');
	
	path_dict = IndexedDictionary(...
	    'IT_CLASS', 'FILE_PATH', ...
	    'IT_LIST', {FILE_PATH('PATH', which('upsampled_AAL2.nii'))} ...
	    );
	
	% suvr_brain_label = readtable(which('AAL2_Atlas_Labels.csv'));
	% suvr_brain_label = suvr_brain_label.Var4;
	ref_region_list = [2001];% reference region label
	
	gr = SUVRConstructor('GR_PET',gr1_PET, ...
	    'GR_T1',gr1_WM_GM, ...
	    'BA', ba,...
	    'ATLAS_PATH_DICT' ,path_dict, ...
	    'REF_REGION_LIST',{ref_region_list}, ...
	    'ATLAS_KIND', {'AAL2'});
	
	gr_ref = SUVRConstructor('GR_PET',gr_ref_PET, ...
	    'GR_T1',gr_ref_WM_GM, ...
	    'BA', ba,...
	    'ATLAS_PATH_DICT' ,path_dict, ...
	    'REF_REGION_LIST',{ref_region_list}, ...
	    'ATLAS_KIND', {'AAL2'});
	
	Con_gr = gr.get('GR');
	Con_gr_ref = gr_ref.get('GR');
	
	constructor = IndividualDeviationConConstructor( ...
	    'GR_SUVR', Con_gr, ...
	    'GR_SUVR_REF', Con_gr_ref ...
	    );
	
	deviation_connectomes = constructor.get('GR');
	
	g_temp  = GraphWU('STANDARDIZE_RULE', 'range');
	a_WU1 = AnalyzeEnsemble_CON_WU('GR', deviation_connectomes,'GRAPH_TEMPLATE', g_temp);
	num_subjects = a_WU1.get('G_DICT').get('LENGTH');
	
	for i = 1:num_subjects
	    g = a_WU1.get('G_DICT').get('IT', i);
	    strength = g.get('MEASURE', 'Strength').get('M'); % Strength for all regions
	    
	    % Separate the first 20 regions and others
	    strength_first20(i, :) = strength{1}(1:20);
	    strength_others(i, :) = strength{1}(21:end);
	
	    % Compute the mean strength for the two sets of regions for each subject
	    mean_strength_first20 = mean(strength_first20(i, :));
	    mean_strength_others = mean(strength_others(i, :));
	
	    % % Assert for each subject
	    assert(mean_strength_first20 < mean_strength_others, ...
	        sprintf('Test failed for subject %d: The first 20 regions do not have higher deviation strength than the other regions.', i));
	end
end

%% Test 14: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':IndividualDeviationConConstructor:' BRAPH2.FAIL_TEST], ...
		[' When testing IndividualDeviationConConstructor no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 15: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

