%TEST_INDIVIDUALCONCONSTRUCTORBASE

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	base = IndividualConConstructorBase();
	 
	% get('ELCLASS')
	if isa(IndividualConConstructorBase, 'ConcreteElement')
		assert(strcmp(IndividualConConstructorBase().get('ELCLASS'), 'IndividualConConstructorBase'), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase().get(''ELCLASS'') should return ''IndividualConConstructorBase''.')
	end
	 
	% getBuild()
	assert(IndividualConConstructorBase.getBuild() == 1 && IndividualConConstructorBase.getBuild() > 0, ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.getBuild() should return the IndividualConConstructorBase build number.')
	assert(base.getBuild() == 1 && base.getBuild() > 0 , ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'base.getBuild() should return the IndividualConConstructorBase build number.')
	assert(Element.getBuild(base) == 1 && Element.getBuild(base) > 0, ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(base) should return the IndividualConConstructorBase build number.')
	assert(Element.getBuild('IndividualConConstructorBase') == 1 && Element.getBuild('IndividualConConstructorBase') > 0, ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''IndividualConConstructorBase'') should return the IndividualConConstructorBase build number.')
	 
	% getClass()
	assert(strcmp(IndividualConConstructorBase.getClass(), 'IndividualConConstructorBase'), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.getClass() should return ''IndividualConConstructorBase''.')
	assert(strcmp(base.getClass(), 'IndividualConConstructorBase'), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'base.getClass() should return ''IndividualConConstructorBase''.')
	assert(strcmp(Element.getClass(base), 'IndividualConConstructorBase'), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(base) should return ''IndividualConConstructorBase''.')
	assert(strcmp(Element.getClass('IndividualConConstructorBase'), 'IndividualConConstructorBase'), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''IndividualConConstructorBase'') should return ''IndividualConConstructorBase''.')
	 
	% getSubclasses()
	assert(isequal(IndividualConConstructorBase.getSubclasses(), subclasses('IndividualConConstructorBase', [], [], true)), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.getSubclasses() should return the same result as subclasses(''IndividualConConstructorBase'', [], [], true).')
	assert(isequal(base.getSubclasses(), subclasses('IndividualConConstructorBase', [], [], true)), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''IndividualConConstructorBase'', [], [], true).')
	assert(isequal(Element.getSubclasses(base), subclasses('IndividualConConstructorBase', [], [], true)), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(base) should return the same result as subclasses(''IndividualConConstructorBase'', [], [], true).')
	assert(isequal(Element.getSubclasses('IndividualConConstructorBase'), subclasses('IndividualConConstructorBase', [], [], true)), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''IndividualConConstructorBase'') should return the same result as subclasses(''IndividualConConstructorBase'', [], [], true).')
	 
	% getProps()
	assert(isempty(IndividualConConstructorBase.getProps()) || isequal(IndividualConConstructorBase.getProps(), 1:1:length(IndividualConConstructorBase.getProps())), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.getProps() should return a row vector [1:1:N].')
	assert(isempty(IndividualConConstructorBase.getProps()) || isequal(base.getProps(), 1:1:length(IndividualConConstructorBase.getProps())), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'base.getProps() should return a row vector [1:1:N].')
	assert(isempty(IndividualConConstructorBase.getProps()) || isequal(Element.getProps(base), 1:1:length(IndividualConConstructorBase.getProps())), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(base) should return a row vector [1:1:N].')
	assert(isempty(IndividualConConstructorBase.getProps()) || isequal(Element.getProps('IndividualConConstructorBase'), 1:1:length(IndividualConConstructorBase.getProps())), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''IndividualConConstructorBase'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) IndividualConConstructorBase.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(IndividualConConstructorBase.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualConConstructorBase.getProps())), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.getProps(category) does not work.')
	tmp = cellfun(@(category) base.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(IndividualConConstructorBase.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualConConstructorBase.getProps())), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'base.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(base, category), categories, 'UniformOutput', false);
	assert(isempty(IndividualConConstructorBase.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualConConstructorBase.getProps())), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(base, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('IndividualConConstructorBase', category), categories, 'UniformOutput', false);
	assert(isempty(IndividualConConstructorBase.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualConConstructorBase.getProps())), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''IndividualConConstructorBase'', category) does not work.')
	 
	% getPropNumber()
	assert(IndividualConConstructorBase.getPropNumber() == length(IndividualConConstructorBase.getProps()), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.getPropNumber() should return the number of properties.')
	assert(base.getPropNumber() == length(IndividualConConstructorBase.getProps()), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'base.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(base) == length(IndividualConConstructorBase.getProps()), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(base) should return the number of properties.')
	assert(Element.getPropNumber('IndividualConConstructorBase') == length(IndividualConConstructorBase.getProps()), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''IndividualConConstructorBase'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) IndividualConConstructorBase.getPropNumber(category), categories)) == IndividualConConstructorBase.getPropNumber(), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) base.getPropNumber(category), categories)) == IndividualConConstructorBase.getPropNumber(), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'base.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(base, category), categories)) == IndividualConConstructorBase.getPropNumber(), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(base, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('IndividualConConstructorBase', category), categories)) == IndividualConConstructorBase.getPropNumber(), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''IndividualConConstructorBase'', category) does not work.')
	 
	% existsProp(prop)
	assert(~IndividualConConstructorBase.existsProp(NaN), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.existsProp(prop) does not work.')
	assert(~base.existsProp(NaN), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'base.existsProp(prop) does not work.')
	assert(~Element.existsProp(base, NaN), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(base, prop) does not work.')
	assert(~Element.existsProp('IndividualConConstructorBase', NaN), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''IndividualConConstructorBase'', prop) does not work.')
	 
	assert_with_error('IndividualConConstructorBase.existsProp(NaN)', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], base)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], base)
	assert_with_error('Element.existsProp(''IndividualConConstructorBase'', NaN)', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		assert(IndividualConConstructorBase.existsProp(prop), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.existsProp(prop) does not work.')
		assert(base.existsProp(prop), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.existsProp(prop) does not work.')
		assert(Element.existsProp(base, prop), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(base, prop) does not work.')
		assert(Element.existsProp('IndividualConConstructorBase', prop), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''IndividualConConstructorBase'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~IndividualConConstructorBase.existsTag(''), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.existsTag(tag) does not work.')
	assert(~base.existsTag(''), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'base.existsTag(tag) does not work.')
	assert(~Element.existsTag(base, ''), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(base, tag) does not work.')
	assert(~Element.existsTag('IndividualConConstructorBase', ''), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''IndividualConConstructorBase'', tag) does not work.')
	 
	assert_with_error('IndividualConConstructorBase.existsTag('''')', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], base)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], base)
	assert_with_error('Element.existsTag(''IndividualConConstructorBase'', '''')', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		tag = base.getPropTag(prop);
		assert(IndividualConConstructorBase.existsTag(tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.existsTag(tag) does not work.')
		assert(base.existsTag(tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.existsTag(tag) does not work.')
		assert(Element.existsTag(base, tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(base, tga) does not work.')
		assert(Element.existsTag('IndividualConConstructorBase', tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''IndividualConConstructorBase'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		assert(IndividualConConstructorBase.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.getPropProp(prop) does not work.')
		assert(base.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.getPropProp(prop) does not work.')
		assert(Element.getPropProp(base, prop) == prop, ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(base, prop) does not work.')
		assert(Element.getPropProp('IndividualConConstructorBase', prop) == prop, ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''IndividualConConstructorBase'', prop) does not work.')
	 
		tag = base.getPropTag(prop);
		assert(IndividualConConstructorBase.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.getPropProp(tag) does not work.')
		assert(base.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.getPropProp(tag) does not work.')
		assert(Element.getPropProp(base, tag) == prop, ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(base, tag) does not work.')
		assert(Element.getPropProp('IndividualConConstructorBase', prop) == prop, ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''IndividualConConstructorBase'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		tag = base.getPropTag(prop);
	 
		assert(strcmp(IndividualConConstructorBase.getPropTag(prop), tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.getPropTag(prop) does not work.')
		assert(strcmp(base.getPropTag(prop), tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(base, prop), tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(base, prop) does not work.')
		assert(strcmp(Element.getPropTag('IndividualConConstructorBase', prop), tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''IndividualConConstructorBase'', prop) does not work.')
	 
		assert(strcmp(IndividualConConstructorBase.getPropTag(tag), tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.getPropTag(tag) does not work.')
		assert(strcmp(base.getPropTag(tag), tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(base, tag), tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(base, tag) does not work.')
		assert(strcmp(Element.getPropTag('IndividualConConstructorBase', prop), tag), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''IndividualConConstructorBase'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		tag = base.getPropTag(prop);
	 
		assert(Category.existsCategory(IndividualConConstructorBase.getPropCategory(prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(base.getPropCategory(prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(base, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(base, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(base, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''IndividualConConstructorBase'', prop) does not work.')
	 
		assert(Category.existsCategory(IndividualConConstructorBase.getPropCategory(tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(base.getPropCategory(tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(base, tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(base, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(base, tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''IndividualConConstructorBase'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		tag = base.getPropTag(prop);
	 
		assert(Format.existsFormat(IndividualConConstructorBase.getPropFormat(prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(base.getPropFormat(prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(base, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(base, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(base, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''IndividualConConstructorBase'', prop) does not work.')
	 
		assert(Format.existsFormat(IndividualConConstructorBase.getPropFormat(tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(base.getPropFormat(tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(base, tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(base, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(base, tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''IndividualConConstructorBase'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		tag = base.getPropTag(prop);
	 
		assert(ischar(IndividualConConstructorBase.getPropDescription(prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.getPropDescription(prop) does not work.')
		assert(ischar(base.getPropDescription(prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(base, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(base, prop) does not work.')
		assert(ischar(Element.getPropDescription(base, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''IndividualConConstructorBase'', prop) does not work.')
	 
		assert(ischar(IndividualConConstructorBase.getPropDescription(tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.getPropDescription(tag) does not work.')
		assert(ischar(base.getPropDescription(tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(base, tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(base, tag) does not work.')
		assert(ischar(Element.getPropDescription(base, tag)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''IndividualConConstructorBase'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		tag = base.getPropTag(prop);
	 
		settings = IndividualConConstructorBase.getPropSettings(prop);
		settings = base.getPropSettings(prop);
		settings = Element.getPropSettings(base, prop);
		settings = Element.getPropSettings('IndividualConConstructorBase', prop);
	 
		settings = IndividualConConstructorBase.getPropSettings(tag);
		settings = base.getPropSettings(tag);
		settings = Element.getPropSettings(base, tag);
		settings = Element.getPropSettings('IndividualConConstructorBase', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		tag = base.getPropTag(prop);
	 
		default = IndividualConConstructorBase.getPropDefault(prop);
		default = base.getPropDefault(prop);
		default = Element.getPropDefault(base, prop);
		default = Element.getPropDefault('IndividualConConstructorBase', prop);
	 
		default = IndividualConConstructorBase.getPropDefault(tag);
		default = base.getPropDefault(tag);
		default = Element.getPropDefault(base, tag);
		default = Element.getPropDefault('IndividualConConstructorBase', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		tag = base.getPropTag(prop);
	 
		conditioned_default = IndividualConConstructorBase.getPropDefaultConditioned(prop);
		conditioned_default = base.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(base, prop);
		conditioned_default = Element.getPropDefaultConditioned('IndividualConConstructorBase', prop);
	 
		conditioned_default = IndividualConConstructorBase.getPropDefaultConditioned(tag);
		conditioned_default = base.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(base, tag);
		conditioned_default = Element.getPropDefaultConditioned('IndividualConConstructorBase', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		tag = base.getPropTag(prop);
	 
		assert(~IndividualConConstructorBase.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.checkProp(prop, value) does not work.')
		assert(~base.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(base, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(base, prop, value) does not work.')
		assert(~Element.checkProp('IndividualConConstructorBase', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualConConstructorBase'', prop, value) does not work.')
	 
		assert_with_error('IndividualConConstructorBase.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], prop, base)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], prop, base)
		assert_with_error('Element.checkProp(''IndividualConConstructorBase'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~IndividualConConstructorBase.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.checkProp(tag, value) does not work.')
		assert(~base.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(base, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(base, tag, value) does not work.')
		assert(~Element.checkProp('IndividualConConstructorBase', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualConConstructorBase'', tag, value) does not work.')
	 
		assert_with_error('IndividualConConstructorBase.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], tag, base)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], tag, base)
		assert_with_error('Element.checkProp(''IndividualConConstructorBase'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(IndividualConConstructorBase.checkProp(prop, Element.getPropDefaultConditioned(IndividualConConstructorBase, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.checkProp(prop, <conditioned default value>) does not work.')
		assert(base.checkProp(prop, Element.getPropDefaultConditioned(IndividualConConstructorBase, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(base, prop, Element.getPropDefaultConditioned(IndividualConConstructorBase, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(base, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('IndividualConConstructorBase', prop, Element.getPropDefaultConditioned(IndividualConConstructorBase, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualConConstructorBase'', prop, <conditioned default value>) does not work.')
	 
		assert(IndividualConConstructorBase.checkProp(tag, Element.getPropDefaultConditioned(IndividualConConstructorBase, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.checkProp(tag, <conditioned default value>) does not work.')
		assert(base.checkProp(tag, Element.getPropDefaultConditioned(IndividualConConstructorBase, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'base.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(base, tag, Element.getPropDefaultConditioned(IndividualConConstructorBase, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(base, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('IndividualConConstructorBase', tag, Element.getPropDefaultConditioned(IndividualConConstructorBase, prop)), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualConConstructorBase'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	base = IndividualConConstructorBase( ...
		IndividualConConstructorBase.ELCLASS, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.NAME, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.DESCRIPTION, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.TEMPLATE, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.TEMPLATE), ...
		IndividualConConstructorBase.ID, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.ID), ...
		IndividualConConstructorBase.LABEL, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.LABEL), ...
		IndividualConConstructorBase.NOTES, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.NOTES), ...
		IndividualConConstructorBase.TOSTRING, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.WAITBAR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.WAITBAR), ...
		IndividualConConstructorBase.GR_SUVR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR), ...
		IndividualConConstructorBase.GR_SUVR_REF, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR_REF), ...
		IndividualConConstructorBase.CONNECTOME_CONSTUCT_METHOD, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.GR, IndividualConConstructorBase.getNoValue() ...
		);
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndividualConConstructorBase.getPropTag(prop));
		switch IndividualConConstructorBase.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					base.getr(prop) == IndividualConConstructorBase.getNoValue(), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualConConstructorBase.getCategoryName(IndividualConConstructorBase.getPropCategory(prop)) ', IndividualConConstructorBase.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualConConstructorBase.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					base.getr(TAG) == IndividualConConstructorBase.getNoValue(), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualConConstructorBase.getCategoryName(IndividualConConstructorBase.getPropCategory(prop)) ', IndividualConConstructorBase.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualConConstructorBase.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(base.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(base.getPropSettings(prop))
					assert( ...
						base.checkFormat(base.getPropFormat(prop), base.get(prop)), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						['IndividualConConstructorBase.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						base.checkFormat(base.getPropFormat(prop), base.get(prop), base.getPropSettings(prop)), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						['IndividualConConstructorBase.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					base.getr(prop) == IndividualConConstructorBase.getNoValue(), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualConConstructorBase.getCategoryName(IndividualConConstructorBase.getPropCategory(prop)) ', IndividualConConstructorBase.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualConConstructorBase.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					base.getr(TAG) == IndividualConConstructorBase.getNoValue(), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualConConstructorBase.getCategoryName(IndividualConConstructorBase.getPropCategory(prop)) ', IndividualConConstructorBase.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualConConstructorBase.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':IndividualConConstructorBase']);
				assert( ...
					~isa(base.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(base.getPropSettings(prop))
					assert( ...
						base.checkFormat(base.getPropFormat(prop), base.get(prop)), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						['IndividualConConstructorBase.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						base.checkFormat(base.getPropFormat(prop), base.get(prop), base.getPropSettings(prop)), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						['IndividualConConstructorBase.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(base.getr(prop), IndividualConConstructorBase.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by IndividualConConstructorBase.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in IndividualConConstructorBase.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(base.getr(TAG), IndividualConConstructorBase.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' TAG ') must be inizialized to its default value ' ...
					'given by IndividualConConstructorBase.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in IndividualConConstructorBase.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	base = IndividualConConstructorBase( ...
		IndividualConConstructorBase.ELCLASS, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.NAME, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.DESCRIPTION, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.TEMPLATE, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.TEMPLATE), ...
		IndividualConConstructorBase.ID, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.ID), ...
		IndividualConConstructorBase.LABEL, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.LABEL), ...
		IndividualConConstructorBase.NOTES, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.NOTES), ...
		IndividualConConstructorBase.TOSTRING, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.WAITBAR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.WAITBAR), ...
		IndividualConConstructorBase.GR_SUVR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR), ...
		IndividualConConstructorBase.GR_SUVR_REF, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR_REF), ...
		IndividualConConstructorBase.CONNECTOME_CONSTUCT_METHOD, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.GR, IndividualConConstructorBase.getNoValue() ...
		);
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndividualConConstructorBase.getPropTag(prop));
		switch IndividualConConstructorBase.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(base.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(base.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(base.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(base.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					base.checkFormat(base.getPropFormat(prop), base.getr(prop),base.getPropSettings(prop)), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':IndividualConConstructorBase']);
				assert( ...
					~isa(base.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(base.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':IndividualConConstructorBase']);
	% 			assert( ...
	% 				~isa(base.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
	% 				['IndividualConConstructorBase.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(base.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
	% 				['IndividualConConstructorBase.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				base.checkFormat(base.getPropFormat(prop), base.getr(prop),base.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
	% 				['IndividualConConstructorBase.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':IndividualConConstructorBase']);
				assert( ...
					~isa(base.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(base.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(base.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(base.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					base.checkFormat(base.getPropFormat(prop), base.getr(prop),base.getPropSettings(prop)), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if base.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:IndividualConConstructorBase');
					delete(ancestor(base.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(IndividualConConstructorBase.getProps(Category.RESULT))
		for prop = 1:1:IndividualConConstructorBase.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch IndividualConConstructorBase.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						base.isLocked(prop), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						['IndividualConConstructorBase.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~base.isLocked(prop), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						['IndividualConConstructorBase.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	base = IndividualConConstructorBase();
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		TAG = upper(IndividualConConstructorBase.getPropTag(prop));
		assert( ...
			~base.isLocked(prop), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			['IndividualConConstructorBase.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~base.isLocked(TAG), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			['IndividualConConstructorBase.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	base.lock()
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		switch IndividualConConstructorBase.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					base.isLocked(prop), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~base.isLocked(prop), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	base = IndividualConConstructorBase();
	 
	warning_backup = warning('off', 'BRAPH2:IndividualConConstructorBase');
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		base.lock(prop)
		switch IndividualConConstructorBase.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					base.isLocked(prop), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~base.isLocked(prop), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	base = IndividualConConstructorBase();
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		TAG = upper(IndividualConConstructorBase.getPropTag(prop));
		assert( ...
			base.isChecked(prop), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			['IndividualConConstructorBase.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			base.isChecked(TAG), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			['IndividualConConstructorBase.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	base.unchecked()
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		assert( ...
			~base.isChecked(prop), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			['IndividualConConstructorBase.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	base.checked()
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		assert( ...
			base.isChecked(prop), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			['IndividualConConstructorBase.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic IndividualConConstructorBase
	base_0 = IndividualConConstructorBase( ...
		IndividualConConstructorBase.ELCLASS, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.NAME, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.DESCRIPTION, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.TEMPLATE, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.TEMPLATE), ...
		IndividualConConstructorBase.ID, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.ID), ...
		IndividualConConstructorBase.LABEL, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.LABEL), ...
		IndividualConConstructorBase.NOTES, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.NOTES), ...
		IndividualConConstructorBase.TOSTRING, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.WAITBAR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.WAITBAR), ...
		IndividualConConstructorBase.GR_SUVR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR), ...
		IndividualConConstructorBase.GR_SUVR_REF, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR_REF), ...
		IndividualConConstructorBase.CONNECTOME_CONSTUCT_METHOD, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.GR, IndividualConConstructorBase.getNoValue() ...
		);
	 
	% IndividualConConstructorBase with 1st callbacks
	base_1 = IndividualConConstructorBase( ...
		IndividualConConstructorBase.ELCLASS, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.NAME, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.DESCRIPTION, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.TEMPLATE, base_0.getCallback(4), ..., ...
		IndividualConConstructorBase.ID, base_0.getCallback(5), ..., ...
		IndividualConConstructorBase.LABEL, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.LABEL), ...
		IndividualConConstructorBase.NOTES, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.NOTES), ...
		IndividualConConstructorBase.TOSTRING, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.WAITBAR, base_0.getCallback(9), ..., ...
		IndividualConConstructorBase.GR_SUVR, base_0.getCallback(10), ..., ...
		IndividualConConstructorBase.GR_SUVR_REF, base_0.getCallback(11), ..., ...
		IndividualConConstructorBase.CONNECTOME_CONSTUCT_METHOD, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.GR, IndividualConConstructorBase.getNoValue() ...
		);
	 
	prop_number = IndividualConConstructorBase.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndividualConConstructorBase.getPropTag(prop));
		switch IndividualConConstructorBase.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(base_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(base_1.get(prop), base_0.get(prop)) && ~isa(base_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(base_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% IndividualConConstructorBase with 2nd callbacks
	base_2 = IndividualConConstructorBase( ...
		IndividualConConstructorBase.ELCLASS, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.NAME, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.DESCRIPTION, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.TEMPLATE, base_1.getCallback(4), ..., ...
		IndividualConConstructorBase.ID, base_1.getCallback(5), ..., ...
		IndividualConConstructorBase.LABEL, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.LABEL), ...
		IndividualConConstructorBase.NOTES, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.NOTES), ...
		IndividualConConstructorBase.TOSTRING, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.WAITBAR, base_1.getCallback(9), ..., ...
		IndividualConConstructorBase.GR_SUVR, base_1.getCallback(10), ..., ...
		IndividualConConstructorBase.GR_SUVR_REF, base_1.getCallback(11), ..., ...
		IndividualConConstructorBase.CONNECTOME_CONSTUCT_METHOD, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.GR, IndividualConConstructorBase.getNoValue() ...
		);
	 
	prop_number = IndividualConConstructorBase.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndividualConConstructorBase.getPropTag(prop));
		switch IndividualConConstructorBase.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(base_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(base_2.get(prop), base_0.get(prop)) && ~isa(base_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(base_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% IndividualConConstructorBase with 3rd callbacks
	base_3 = IndividualConConstructorBase( ...
		IndividualConConstructorBase.ELCLASS, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.NAME, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.DESCRIPTION, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.TEMPLATE, base_2.getCallback(4), ..., ...
		IndividualConConstructorBase.ID, base_2.getCallback(5), ..., ...
		IndividualConConstructorBase.LABEL, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.LABEL), ...
		IndividualConConstructorBase.NOTES, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.NOTES), ...
		IndividualConConstructorBase.TOSTRING, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.WAITBAR, base_2.getCallback(9), ..., ...
		IndividualConConstructorBase.GR_SUVR, base_2.getCallback(10), ..., ...
		IndividualConConstructorBase.GR_SUVR_REF, base_2.getCallback(11), ..., ...
		IndividualConConstructorBase.CONNECTOME_CONSTUCT_METHOD, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.GR, IndividualConConstructorBase.getNoValue() ...
		);
	 
	prop_number = IndividualConConstructorBase.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndividualConConstructorBase.getPropTag(prop));
		switch IndividualConConstructorBase.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(base_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(base_3.get(prop), base_0.get(prop)) && ~isa(base_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(base_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	base = IndividualConConstructorBase();
	 
	base_copy = base.copy();
	 
	assert(base_copy ~= base, ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(base_copy, base), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		value = base.getr(prop);
		value_copy = base_copy.getr(prop);
		switch IndividualConConstructorBase.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					'IndividualConConstructorBase.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
							'IndividualConConstructorBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
							'IndividualConConstructorBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					base_copy.isLocked(prop) == base.isLocked(prop), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					'IndividualConConstructorBase.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					base_copy.isChecked(prop) == base.isChecked(prop), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					'IndividualConConstructorBase.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					base_copy.getPropSeed(prop) == base.getPropSeed(prop), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					'IndividualConConstructorBase.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	base = IndividualConConstructorBase( ...
		IndividualConConstructorBase.ELCLASS, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.NAME, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.DESCRIPTION, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.TEMPLATE, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.TEMPLATE), ...
		IndividualConConstructorBase.ID, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.ID), ...
		IndividualConConstructorBase.LABEL, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.LABEL), ...
		IndividualConConstructorBase.NOTES, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.NOTES), ...
		IndividualConConstructorBase.TOSTRING, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.WAITBAR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.WAITBAR), ...
		IndividualConConstructorBase.GR_SUVR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR), ...
		IndividualConConstructorBase.GR_SUVR_REF, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR_REF), ...
		IndividualConConstructorBase.CONNECTOME_CONSTUCT_METHOD, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.GR, IndividualConConstructorBase.getNoValue() ...
		);
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		if IndividualConConstructorBase.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':IndividualConConstructorBase']);
			% base.memorize(prop);
			% warning(warning_backup)
		elseif IndividualConConstructorBase.getPropCategory(prop) == Category.EVANESCENT && base.getPropFormat(prop) == Format.HANDLE
			base.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:IndividualConConstructorBase');
			delete(ancestor(base.get(prop), 'figure'))
			warning(warning_backup)
		else
			base.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	base_copy = base.copy();
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		value = base.getr(prop);
		value_copy = base_copy.getr(prop);
		switch IndividualConConstructorBase.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					'IndividualConConstructorBase.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
							'IndividualConConstructorBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
							'IndividualConConstructorBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						base_copy.isLocked(prop) == base.isLocked(prop), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						base_copy.isChecked(prop) == base.isChecked(prop), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						base_copy.getPropSeed(prop) == base.getPropSeed(prop), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	base_0 = IndividualConConstructorBase( ...
		IndividualConConstructorBase.ELCLASS, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.NAME, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.DESCRIPTION, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.TEMPLATE, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.TEMPLATE), ...
		IndividualConConstructorBase.ID, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.ID), ...
		IndividualConConstructorBase.LABEL, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.LABEL), ...
		IndividualConConstructorBase.NOTES, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.NOTES), ...
		IndividualConConstructorBase.TOSTRING, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.WAITBAR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.WAITBAR), ...
		IndividualConConstructorBase.GR_SUVR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR), ...
		IndividualConConstructorBase.GR_SUVR_REF, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR_REF), ...
		IndividualConConstructorBase.CONNECTOME_CONSTUCT_METHOD, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.GR, IndividualConConstructorBase.getNoValue() ...
		);
	 
	base = IndividualConConstructorBase( ...
		IndividualConConstructorBase.ELCLASS, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.NAME, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.DESCRIPTION, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.TEMPLATE, base_0.getCallback(4), ..., ...
		IndividualConConstructorBase.ID, base_0.getCallback(5), ..., ...
		IndividualConConstructorBase.LABEL, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.LABEL), ...
		IndividualConConstructorBase.NOTES, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.NOTES), ...
		IndividualConConstructorBase.TOSTRING, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.WAITBAR, base_0.getCallback(9), ..., ...
		IndividualConConstructorBase.GR_SUVR, base_0.getCallback(10), ..., ...
		IndividualConConstructorBase.GR_SUVR_REF, base_0.getCallback(11), ..., ...
		IndividualConConstructorBase.CONNECTOME_CONSTUCT_METHOD, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.GR, IndividualConConstructorBase.getNoValue() ...
		);
	 
	base_copy = base.copy();
	base_0_copy = base_copy.getr('ID').get('EL');
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
		value = base.getr(prop);
		value_copy = base_copy.getr(prop);
		switch IndividualConConstructorBase.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					'IndividualConConstructorBase.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
							'IndividualConConstructorBase.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
							'IndividualConConstructorBase.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == base_0.getCallback(prop), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The callback should be obtained from IndividualConConstructorBase.getCallback().' ...
						)
					assert( ...
						value_copy == base_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The callback should be obtained from IndividualConConstructorBase.getCallback().' ...
						)
				end
	 
					assert( ...
						base_copy.isLocked(prop) == base.isLocked(prop), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						base_copy.isChecked(prop) == base.isChecked(prop), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						base_copy.getPropSeed(prop) == base.getPropSeed(prop), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	base_template = IndividualConConstructorBase();
	base = IndividualConConstructorBase('TEMPLATE', base_template);
	 
	for prop = 1:1:IndividualConConstructorBase.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndividualConConstructorBase.getPropTag(prop));
		switch IndividualConConstructorBase.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == IndividualConConstructorBase.TEMPLATE
					assert( ...
						isa(base.getr(prop), 'IndividualConConstructorBase'), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase TEMPLATE does not work. IndividualConConstructorBase.getr(''TEMPLATE'') should be a IndividualConConstructorBase element.' ...
						)
					assert( ...
						isa(base_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						'IndividualConConstructorBase TEMPLATE does not work. IndividualConConstructorBase_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(base.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						['IndividualConConstructorBase TEMPLATE does not work. IndividualConConstructorBase.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						base.getr(prop).get('EL') == base_template && base.getr(prop).get('PROP') == prop && strcmp(base.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						['IndividualConConstructorBase TEMPLATE does not work. IndividualConConstructorBase.getr(' TAG ') should be a Callback to base_template.' TAG '.'] ...
						)
					assert( ...
						isa(base_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
						['IndividualConConstructorBase TEMPLATE does not work. IndividualConConstructorBase_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(base.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase TEMPLATE does not work. IndividualConConstructorBase.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(base_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
					['IndividualConConstructorBase TEMPLATE does not work. IndividualConConstructorBase_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	base = IndividualConConstructorBase( ...
		IndividualConConstructorBase.ELCLASS, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.NAME, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.DESCRIPTION, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.TEMPLATE, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.TEMPLATE), ...
		IndividualConConstructorBase.ID, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.ID), ...
		IndividualConConstructorBase.LABEL, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.LABEL), ...
		IndividualConConstructorBase.NOTES, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.NOTES), ...
		IndividualConConstructorBase.TOSTRING, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.WAITBAR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.WAITBAR), ...
		IndividualConConstructorBase.GR_SUVR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR), ...
		IndividualConConstructorBase.GR_SUVR_REF, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR_REF), ...
		IndividualConConstructorBase.CONNECTOME_CONSTUCT_METHOD, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.GR, IndividualConConstructorBase.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'individualconconstructorbase_to_be_erased.b2'];
	 
	Element.save(base, filename)
	 
	base_loaded = Element.load(filename);
	 
	assert( ...
		isequal(base.copy(), base_loaded), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.save(base) and/or IndividualConConstructorBase.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	base = IndividualConConstructorBase( ...
		IndividualConConstructorBase.ELCLASS, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.NAME, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.DESCRIPTION, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.TEMPLATE, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.TEMPLATE), ...
		IndividualConConstructorBase.ID, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.ID), ...
		IndividualConConstructorBase.LABEL, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.LABEL), ...
		IndividualConConstructorBase.NOTES, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.NOTES), ...
		IndividualConConstructorBase.TOSTRING, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.WAITBAR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.WAITBAR), ...
		IndividualConConstructorBase.GR_SUVR, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR), ...
		IndividualConConstructorBase.GR_SUVR_REF, IndividualConConstructorBase.getPropDefault(IndividualConConstructorBase.GR_SUVR_REF), ...
		IndividualConConstructorBase.CONNECTOME_CONSTUCT_METHOD, IndividualConConstructorBase.getNoValue(), ...
		IndividualConConstructorBase.GR, IndividualConConstructorBase.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(base);
	[base_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(base_dec ~= base, ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		'IndividualConConstructorBase.encodeJSON() or IndividualConConstructorBase.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) IndividualConConstructorBase.getPropFormat(prop), num2cell(IndividualConConstructorBase.getProps())) == Format.HANDLE) && all(cellfun(@(prop) IndividualConConstructorBase.getPropFormat(prop), num2cell(IndividualConConstructorBase.getProps())) == Format.NET)
		assert(isequal(base_dec, base), ...
			[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
			'IndividualConConstructorBase.encodeJSON() or IndividualConConstructorBase.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':IndividualConConstructorBase:' BRAPH2.FAIL_TEST], ...
		[' When testing IndividualConConstructorBase no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

