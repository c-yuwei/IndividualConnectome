%TEST_SUVRCONSTRUCTOR

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	roic = SUVRConstructor();
	 
	% get('ELCLASS')
	if isa(SUVRConstructor, 'ConcreteElement')
		assert(strcmp(SUVRConstructor().get('ELCLASS'), 'SUVRConstructor'), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor().get(''ELCLASS'') should return ''SUVRConstructor''.')
	end
	 
	% getBuild()
	assert(SUVRConstructor.getBuild() == 1 && SUVRConstructor.getBuild() > 0, ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.getBuild() should return the SUVRConstructor build number.')
	assert(roic.getBuild() == 1 && roic.getBuild() > 0 , ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'roic.getBuild() should return the SUVRConstructor build number.')
	assert(Element.getBuild(roic) == 1 && Element.getBuild(roic) > 0, ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(roic) should return the SUVRConstructor build number.')
	assert(Element.getBuild('SUVRConstructor') == 1 && Element.getBuild('SUVRConstructor') > 0, ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''SUVRConstructor'') should return the SUVRConstructor build number.')
	 
	% getClass()
	assert(strcmp(SUVRConstructor.getClass(), 'SUVRConstructor'), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.getClass() should return ''SUVRConstructor''.')
	assert(strcmp(roic.getClass(), 'SUVRConstructor'), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'roic.getClass() should return ''SUVRConstructor''.')
	assert(strcmp(Element.getClass(roic), 'SUVRConstructor'), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(roic) should return ''SUVRConstructor''.')
	assert(strcmp(Element.getClass('SUVRConstructor'), 'SUVRConstructor'), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''SUVRConstructor'') should return ''SUVRConstructor''.')
	 
	% getSubclasses()
	assert(isequal(SUVRConstructor.getSubclasses(), subclasses('SUVRConstructor', [], [], true)), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.getSubclasses() should return the same result as subclasses(''SUVRConstructor'', [], [], true).')
	assert(isequal(roic.getSubclasses(), subclasses('SUVRConstructor', [], [], true)), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''SUVRConstructor'', [], [], true).')
	assert(isequal(Element.getSubclasses(roic), subclasses('SUVRConstructor', [], [], true)), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(roic) should return the same result as subclasses(''SUVRConstructor'', [], [], true).')
	assert(isequal(Element.getSubclasses('SUVRConstructor'), subclasses('SUVRConstructor', [], [], true)), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''SUVRConstructor'') should return the same result as subclasses(''SUVRConstructor'', [], [], true).')
	 
	% getProps()
	assert(isempty(SUVRConstructor.getProps()) || isequal(SUVRConstructor.getProps(), 1:1:length(SUVRConstructor.getProps())), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.getProps() should return a row vector [1:1:N].')
	assert(isempty(SUVRConstructor.getProps()) || isequal(roic.getProps(), 1:1:length(SUVRConstructor.getProps())), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'roic.getProps() should return a row vector [1:1:N].')
	assert(isempty(SUVRConstructor.getProps()) || isequal(Element.getProps(roic), 1:1:length(SUVRConstructor.getProps())), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(roic) should return a row vector [1:1:N].')
	assert(isempty(SUVRConstructor.getProps()) || isequal(Element.getProps('SUVRConstructor'), 1:1:length(SUVRConstructor.getProps())), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''SUVRConstructor'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) SUVRConstructor.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(SUVRConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SUVRConstructor.getProps())), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.getProps(category) does not work.')
	tmp = cellfun(@(category) roic.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(SUVRConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SUVRConstructor.getProps())), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'roic.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(roic, category), categories, 'UniformOutput', false);
	assert(isempty(SUVRConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SUVRConstructor.getProps())), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(roic, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('SUVRConstructor', category), categories, 'UniformOutput', false);
	assert(isempty(SUVRConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(SUVRConstructor.getProps())), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''SUVRConstructor'', category) does not work.')
	 
	% getPropNumber()
	assert(SUVRConstructor.getPropNumber() == length(SUVRConstructor.getProps()), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.getPropNumber() should return the number of properties.')
	assert(roic.getPropNumber() == length(SUVRConstructor.getProps()), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'roic.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(roic) == length(SUVRConstructor.getProps()), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(roic) should return the number of properties.')
	assert(Element.getPropNumber('SUVRConstructor') == length(SUVRConstructor.getProps()), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''SUVRConstructor'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) SUVRConstructor.getPropNumber(category), categories)) == SUVRConstructor.getPropNumber(), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) roic.getPropNumber(category), categories)) == SUVRConstructor.getPropNumber(), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'roic.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(roic, category), categories)) == SUVRConstructor.getPropNumber(), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(roic, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('SUVRConstructor', category), categories)) == SUVRConstructor.getPropNumber(), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''SUVRConstructor'', category) does not work.')
	 
	% existsProp(prop)
	assert(~SUVRConstructor.existsProp(NaN), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.existsProp(prop) does not work.')
	assert(~roic.existsProp(NaN), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'roic.existsProp(prop) does not work.')
	assert(~Element.existsProp(roic, NaN), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(roic, prop) does not work.')
	assert(~Element.existsProp('SUVRConstructor', NaN), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''SUVRConstructor'', prop) does not work.')
	 
	assert_with_error('SUVRConstructor.existsProp(NaN)', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], roic)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], roic)
	assert_with_error('Element.existsProp(''SUVRConstructor'', NaN)', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
		assert(SUVRConstructor.existsProp(prop), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.existsProp(prop) does not work.')
		assert(roic.existsProp(prop), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.existsProp(prop) does not work.')
		assert(Element.existsProp(roic, prop), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(roic, prop) does not work.')
		assert(Element.existsProp('SUVRConstructor', prop), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''SUVRConstructor'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~SUVRConstructor.existsTag(''), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.existsTag(tag) does not work.')
	assert(~roic.existsTag(''), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'roic.existsTag(tag) does not work.')
	assert(~Element.existsTag(roic, ''), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(roic, tag) does not work.')
	assert(~Element.existsTag('SUVRConstructor', ''), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''SUVRConstructor'', tag) does not work.')
	 
	assert_with_error('SUVRConstructor.existsTag('''')', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], roic)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], roic)
	assert_with_error('Element.existsTag(''SUVRConstructor'', '''')', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
		tag = roic.getPropTag(prop);
		assert(SUVRConstructor.existsTag(tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.existsTag(tag) does not work.')
		assert(roic.existsTag(tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.existsTag(tag) does not work.')
		assert(Element.existsTag(roic, tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(roic, tga) does not work.')
		assert(Element.existsTag('SUVRConstructor', tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''SUVRConstructor'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:SUVRConstructor.getPropNumber()
		assert(SUVRConstructor.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.getPropProp(prop) does not work.')
		assert(roic.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.getPropProp(prop) does not work.')
		assert(Element.getPropProp(roic, prop) == prop, ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(roic, prop) does not work.')
		assert(Element.getPropProp('SUVRConstructor', prop) == prop, ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''SUVRConstructor'', prop) does not work.')
	 
		tag = roic.getPropTag(prop);
		assert(SUVRConstructor.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.getPropProp(tag) does not work.')
		assert(roic.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.getPropProp(tag) does not work.')
		assert(Element.getPropProp(roic, tag) == prop, ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(roic, tag) does not work.')
		assert(Element.getPropProp('SUVRConstructor', prop) == prop, ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''SUVRConstructor'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:SUVRConstructor.getPropNumber()
		tag = roic.getPropTag(prop);
	 
		assert(strcmp(SUVRConstructor.getPropTag(prop), tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.getPropTag(prop) does not work.')
		assert(strcmp(roic.getPropTag(prop), tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(roic, prop), tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(roic, prop) does not work.')
		assert(strcmp(Element.getPropTag('SUVRConstructor', prop), tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''SUVRConstructor'', prop) does not work.')
	 
		assert(strcmp(SUVRConstructor.getPropTag(tag), tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.getPropTag(tag) does not work.')
		assert(strcmp(roic.getPropTag(tag), tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(roic, tag), tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(roic, tag) does not work.')
		assert(strcmp(Element.getPropTag('SUVRConstructor', prop), tag), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''SUVRConstructor'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:SUVRConstructor.getPropNumber()
		tag = roic.getPropTag(prop);
	 
		assert(Category.existsCategory(SUVRConstructor.getPropCategory(prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(roic.getPropCategory(prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(roic, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(roic, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(roic, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''SUVRConstructor'', prop) does not work.')
	 
		assert(Category.existsCategory(SUVRConstructor.getPropCategory(tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(roic.getPropCategory(tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(roic, tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(roic, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(roic, tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''SUVRConstructor'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:SUVRConstructor.getPropNumber()
		tag = roic.getPropTag(prop);
	 
		assert(Format.existsFormat(SUVRConstructor.getPropFormat(prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(roic.getPropFormat(prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(roic, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(roic, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(roic, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''SUVRConstructor'', prop) does not work.')
	 
		assert(Format.existsFormat(SUVRConstructor.getPropFormat(tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(roic.getPropFormat(tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(roic, tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(roic, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(roic, tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''SUVRConstructor'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:SUVRConstructor.getPropNumber()
		tag = roic.getPropTag(prop);
	 
		assert(ischar(SUVRConstructor.getPropDescription(prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.getPropDescription(prop) does not work.')
		assert(ischar(roic.getPropDescription(prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(roic, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(roic, prop) does not work.')
		assert(ischar(Element.getPropDescription(roic, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''SUVRConstructor'', prop) does not work.')
	 
		assert(ischar(SUVRConstructor.getPropDescription(tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.getPropDescription(tag) does not work.')
		assert(ischar(roic.getPropDescription(tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(roic, tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(roic, tag) does not work.')
		assert(ischar(Element.getPropDescription(roic, tag)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''SUVRConstructor'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:SUVRConstructor.getPropNumber()
		tag = roic.getPropTag(prop);
	 
		settings = SUVRConstructor.getPropSettings(prop);
		settings = roic.getPropSettings(prop);
		settings = Element.getPropSettings(roic, prop);
		settings = Element.getPropSettings('SUVRConstructor', prop);
	 
		settings = SUVRConstructor.getPropSettings(tag);
		settings = roic.getPropSettings(tag);
		settings = Element.getPropSettings(roic, tag);
		settings = Element.getPropSettings('SUVRConstructor', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:SUVRConstructor.getPropNumber()
		tag = roic.getPropTag(prop);
	 
		default = SUVRConstructor.getPropDefault(prop);
		default = roic.getPropDefault(prop);
		default = Element.getPropDefault(roic, prop);
		default = Element.getPropDefault('SUVRConstructor', prop);
	 
		default = SUVRConstructor.getPropDefault(tag);
		default = roic.getPropDefault(tag);
		default = Element.getPropDefault(roic, tag);
		default = Element.getPropDefault('SUVRConstructor', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:SUVRConstructor.getPropNumber()
		tag = roic.getPropTag(prop);
	 
		conditioned_default = SUVRConstructor.getPropDefaultConditioned(prop);
		conditioned_default = roic.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(roic, prop);
		conditioned_default = Element.getPropDefaultConditioned('SUVRConstructor', prop);
	 
		conditioned_default = SUVRConstructor.getPropDefaultConditioned(tag);
		conditioned_default = roic.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(roic, tag);
		conditioned_default = Element.getPropDefaultConditioned('SUVRConstructor', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:SUVRConstructor.getPropNumber()
		tag = roic.getPropTag(prop);
	 
		assert(~SUVRConstructor.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.checkProp(prop, value) does not work.')
		assert(~roic.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(roic, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(roic, prop, value) does not work.')
		assert(~Element.checkProp('SUVRConstructor', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SUVRConstructor'', prop, value) does not work.')
	 
		assert_with_error('SUVRConstructor.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], prop, roic)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], prop, roic)
		assert_with_error('Element.checkProp(''SUVRConstructor'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~SUVRConstructor.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.checkProp(tag, value) does not work.')
		assert(~roic.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(roic, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(roic, tag, value) does not work.')
		assert(~Element.checkProp('SUVRConstructor', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SUVRConstructor'', tag, value) does not work.')
	 
		assert_with_error('SUVRConstructor.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], tag, roic)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], tag, roic)
		assert_with_error('Element.checkProp(''SUVRConstructor'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':SUVRConstructor:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(SUVRConstructor.checkProp(prop, Element.getPropDefaultConditioned(SUVRConstructor, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.checkProp(prop, <conditioned default value>) does not work.')
		assert(roic.checkProp(prop, Element.getPropDefaultConditioned(SUVRConstructor, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(roic, prop, Element.getPropDefaultConditioned(SUVRConstructor, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(roic, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('SUVRConstructor', prop, Element.getPropDefaultConditioned(SUVRConstructor, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SUVRConstructor'', prop, <conditioned default value>) does not work.')
	 
		assert(SUVRConstructor.checkProp(tag, Element.getPropDefaultConditioned(SUVRConstructor, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.checkProp(tag, <conditioned default value>) does not work.')
		assert(roic.checkProp(tag, Element.getPropDefaultConditioned(SUVRConstructor, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'roic.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(roic, tag, Element.getPropDefaultConditioned(SUVRConstructor, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(roic, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('SUVRConstructor', tag, Element.getPropDefaultConditioned(SUVRConstructor, prop)), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''SUVRConstructor'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	roic = SUVRConstructor( ...
		SUVRConstructor.ELCLASS, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.NAME, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.DESCRIPTION, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.TEMPLATE, SUVRConstructor.getPropDefault(SUVRConstructor.TEMPLATE), ...
		SUVRConstructor.ID, SUVRConstructor.getPropDefault(SUVRConstructor.ID), ...
		SUVRConstructor.LABEL, SUVRConstructor.getPropDefault(SUVRConstructor.LABEL), ...
		SUVRConstructor.NOTES, SUVRConstructor.getPropDefault(SUVRConstructor.NOTES), ...
		SUVRConstructor.TOSTRING, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.REF_REGION_LIST, SUVRConstructor.getPropDefault(SUVRConstructor.REF_REGION_LIST), ...
		SUVRConstructor.REF_BR_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.REF_BR_DICT), ...
		SUVRConstructor.ATLAS_KIND, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_KIND), ...
		SUVRConstructor.BA, SUVRConstructor.getPropDefault(SUVRConstructor.BA), ...
		SUVRConstructor.ATLAS_INDEX, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_INDEX), ...
		SUVRConstructor.ATLAS_PATH_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_PATH_DICT), ...
		SUVRConstructor.GR_PET, SUVRConstructor.getPropDefault(SUVRConstructor.GR_PET), ...
		SUVRConstructor.GR_T1, SUVRConstructor.getPropDefault(SUVRConstructor.GR_T1), ...
		SUVRConstructor.SUVR_REGION_SELECTION, SUVRConstructor.getPropDefault(SUVRConstructor.SUVR_REGION_SELECTION), ...
		SUVRConstructor.CALC_SUBJ_SUVR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.GR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.WAITBAR, SUVRConstructor.getPropDefault(SUVRConstructor.WAITBAR) ...
		);
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
	 
		% excluded props
		if any(prop == [ImporterGroupSubjectCON_XLS.GET_DIR])
			continue
		end
	 
		TAG = upper(SUVRConstructor.getPropTag(prop));
		switch SUVRConstructor.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					roic.getr(prop) == SUVRConstructor.getNoValue(), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' SUVRConstructor.getCategoryName(SUVRConstructor.getPropCategory(prop)) ', SUVRConstructor.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SUVRConstructor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					roic.getr(TAG) == SUVRConstructor.getNoValue(), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' SUVRConstructor.getCategoryName(SUVRConstructor.getPropCategory(prop)) ', SUVRConstructor.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SUVRConstructor.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(roic.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(roic.getPropSettings(prop))
					assert( ...
						roic.checkFormat(roic.getPropFormat(prop), roic.get(prop)), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						['SUVRConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						roic.checkFormat(roic.getPropFormat(prop), roic.get(prop), roic.getPropSettings(prop)), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						['SUVRConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					roic.getr(prop) == SUVRConstructor.getNoValue(), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' SUVRConstructor.getCategoryName(SUVRConstructor.getPropCategory(prop)) ', SUVRConstructor.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SUVRConstructor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					roic.getr(TAG) == SUVRConstructor.getNoValue(), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' SUVRConstructor.getCategoryName(SUVRConstructor.getPropCategory(prop)) ', SUVRConstructor.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in SUVRConstructor.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':SUVRConstructor']);
				assert( ...
					~isa(roic.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(roic.getPropSettings(prop))
					assert( ...
						roic.checkFormat(roic.getPropFormat(prop), roic.get(prop)), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						['SUVRConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						roic.checkFormat(roic.getPropFormat(prop), roic.get(prop), roic.getPropSettings(prop)), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						['SUVRConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(roic.getr(prop), SUVRConstructor.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by SUVRConstructor.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in SUVRConstructor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(roic.getr(TAG), SUVRConstructor.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' TAG ') must be inizialized to its default value ' ...
					'given by SUVRConstructor.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in SUVRConstructor.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	roic = SUVRConstructor( ...
		SUVRConstructor.ELCLASS, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.NAME, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.DESCRIPTION, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.TEMPLATE, SUVRConstructor.getPropDefault(SUVRConstructor.TEMPLATE), ...
		SUVRConstructor.ID, SUVRConstructor.getPropDefault(SUVRConstructor.ID), ...
		SUVRConstructor.LABEL, SUVRConstructor.getPropDefault(SUVRConstructor.LABEL), ...
		SUVRConstructor.NOTES, SUVRConstructor.getPropDefault(SUVRConstructor.NOTES), ...
		SUVRConstructor.TOSTRING, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.REF_REGION_LIST, SUVRConstructor.getPropDefault(SUVRConstructor.REF_REGION_LIST), ...
		SUVRConstructor.REF_BR_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.REF_BR_DICT), ...
		SUVRConstructor.ATLAS_KIND, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_KIND), ...
		SUVRConstructor.BA, SUVRConstructor.getPropDefault(SUVRConstructor.BA), ...
		SUVRConstructor.ATLAS_INDEX, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_INDEX), ...
		SUVRConstructor.ATLAS_PATH_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_PATH_DICT), ...
		SUVRConstructor.GR_PET, SUVRConstructor.getPropDefault(SUVRConstructor.GR_PET), ...
		SUVRConstructor.GR_T1, SUVRConstructor.getPropDefault(SUVRConstructor.GR_T1), ...
		SUVRConstructor.SUVR_REGION_SELECTION, SUVRConstructor.getPropDefault(SUVRConstructor.SUVR_REGION_SELECTION), ...
		SUVRConstructor.CALC_SUBJ_SUVR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.GR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.WAITBAR, SUVRConstructor.getPropDefault(SUVRConstructor.WAITBAR) ...
		);
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
	 
		% excluded props
		if any(prop == [ImporterGroupSubjectCON_XLS.GET_DIR])
			continue
		end
	 
		TAG = upper(SUVRConstructor.getPropTag(prop));
		switch SUVRConstructor.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(roic.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(roic.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(roic.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(roic.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					roic.checkFormat(roic.getPropFormat(prop), roic.getr(prop),roic.getPropSettings(prop)), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':SUVRConstructor']);
				assert( ...
					~isa(roic.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(roic.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':SUVRConstructor']);
	% 			assert( ...
	% 				~isa(roic.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
	% 				['SUVRConstructor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(roic.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
	% 				['SUVRConstructor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				roic.checkFormat(roic.getPropFormat(prop), roic.getr(prop),roic.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
	% 				['SUVRConstructor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':SUVRConstructor']);
				assert( ...
					~isa(roic.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(roic.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(roic.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(roic.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					roic.checkFormat(roic.getPropFormat(prop), roic.getr(prop),roic.getPropSettings(prop)), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if roic.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:SUVRConstructor');
					delete(ancestor(roic.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(SUVRConstructor.getProps(Category.RESULT))
		for prop = 1:1:SUVRConstructor.getPropNumber()
	 
			% excluded props
			if any(prop == [ImporterGroupSubjectCON_XLS.GET_DIR])
				continue
			end
	 
			switch SUVRConstructor.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						roic.isLocked(prop), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						['SUVRConstructor.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~roic.isLocked(prop), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						['SUVRConstructor.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	roic = SUVRConstructor();
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
		TAG = upper(SUVRConstructor.getPropTag(prop));
		assert( ...
			~roic.isLocked(prop), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			['SUVRConstructor.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~roic.isLocked(TAG), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			['SUVRConstructor.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	roic.lock()
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
		switch SUVRConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					roic.isLocked(prop), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~roic.isLocked(prop), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	roic = SUVRConstructor();
	 
	warning_backup = warning('off', 'BRAPH2:SUVRConstructor');
	for prop = 1:1:SUVRConstructor.getPropNumber()
		roic.lock(prop)
		switch SUVRConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					roic.isLocked(prop), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~roic.isLocked(prop), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	roic = SUVRConstructor();
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
		TAG = upper(SUVRConstructor.getPropTag(prop));
		assert( ...
			roic.isChecked(prop), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			['SUVRConstructor.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			roic.isChecked(TAG), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			['SUVRConstructor.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	roic.unchecked()
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
		assert( ...
			~roic.isChecked(prop), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			['SUVRConstructor.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	roic.checked()
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
		assert( ...
			roic.isChecked(prop), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			['SUVRConstructor.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic SUVRConstructor
	roic_0 = SUVRConstructor( ...
		SUVRConstructor.ELCLASS, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.NAME, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.DESCRIPTION, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.TEMPLATE, SUVRConstructor.getPropDefault(SUVRConstructor.TEMPLATE), ...
		SUVRConstructor.ID, SUVRConstructor.getPropDefault(SUVRConstructor.ID), ...
		SUVRConstructor.LABEL, SUVRConstructor.getPropDefault(SUVRConstructor.LABEL), ...
		SUVRConstructor.NOTES, SUVRConstructor.getPropDefault(SUVRConstructor.NOTES), ...
		SUVRConstructor.TOSTRING, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.REF_REGION_LIST, SUVRConstructor.getPropDefault(SUVRConstructor.REF_REGION_LIST), ...
		SUVRConstructor.REF_BR_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.REF_BR_DICT), ...
		SUVRConstructor.ATLAS_KIND, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_KIND), ...
		SUVRConstructor.BA, SUVRConstructor.getPropDefault(SUVRConstructor.BA), ...
		SUVRConstructor.ATLAS_INDEX, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_INDEX), ...
		SUVRConstructor.ATLAS_PATH_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_PATH_DICT), ...
		SUVRConstructor.GR_PET, SUVRConstructor.getPropDefault(SUVRConstructor.GR_PET), ...
		SUVRConstructor.GR_T1, SUVRConstructor.getPropDefault(SUVRConstructor.GR_T1), ...
		SUVRConstructor.SUVR_REGION_SELECTION, SUVRConstructor.getPropDefault(SUVRConstructor.SUVR_REGION_SELECTION), ...
		SUVRConstructor.CALC_SUBJ_SUVR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.GR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.WAITBAR, SUVRConstructor.getPropDefault(SUVRConstructor.WAITBAR) ...
		);
	 
	% SUVRConstructor with 1st callbacks
	roic_1 = SUVRConstructor( ...
		SUVRConstructor.ELCLASS, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.NAME, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.DESCRIPTION, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.TEMPLATE, roic_0.getCallback(4), ..., ...
		SUVRConstructor.ID, roic_0.getCallback(5), ..., ...
		SUVRConstructor.LABEL, SUVRConstructor.getPropDefault(SUVRConstructor.LABEL), ...
		SUVRConstructor.NOTES, SUVRConstructor.getPropDefault(SUVRConstructor.NOTES), ...
		SUVRConstructor.TOSTRING, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.REF_REGION_LIST, roic_0.getCallback(9), ..., ...
		SUVRConstructor.REF_BR_DICT, roic_0.getCallback(10), ..., ...
		SUVRConstructor.ATLAS_KIND, roic_0.getCallback(11), ..., ...
		SUVRConstructor.BA, roic_0.getCallback(12), ..., ...
		SUVRConstructor.ATLAS_INDEX, roic_0.getCallback(13), ..., ...
		SUVRConstructor.ATLAS_PATH_DICT, roic_0.getCallback(14), ..., ...
		SUVRConstructor.GR_PET, roic_0.getCallback(15), ..., ...
		SUVRConstructor.GR_T1, roic_0.getCallback(16), ..., ...
		SUVRConstructor.SUVR_REGION_SELECTION, roic_0.getCallback(17), ..., ...
		SUVRConstructor.CALC_SUBJ_SUVR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.GR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.WAITBAR, roic_0.getCallback(20) ... ...
		);
	 
	prop_number = SUVRConstructor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SUVRConstructor.getPropTag(prop));
		switch SUVRConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(roic_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(roic_1.get(prop), roic_0.get(prop)) && ~isa(roic_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(roic_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% SUVRConstructor with 2nd callbacks
	roic_2 = SUVRConstructor( ...
		SUVRConstructor.ELCLASS, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.NAME, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.DESCRIPTION, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.TEMPLATE, roic_1.getCallback(4), ..., ...
		SUVRConstructor.ID, roic_1.getCallback(5), ..., ...
		SUVRConstructor.LABEL, SUVRConstructor.getPropDefault(SUVRConstructor.LABEL), ...
		SUVRConstructor.NOTES, SUVRConstructor.getPropDefault(SUVRConstructor.NOTES), ...
		SUVRConstructor.TOSTRING, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.REF_REGION_LIST, roic_1.getCallback(9), ..., ...
		SUVRConstructor.REF_BR_DICT, roic_1.getCallback(10), ..., ...
		SUVRConstructor.ATLAS_KIND, roic_1.getCallback(11), ..., ...
		SUVRConstructor.BA, roic_1.getCallback(12), ..., ...
		SUVRConstructor.ATLAS_INDEX, roic_1.getCallback(13), ..., ...
		SUVRConstructor.ATLAS_PATH_DICT, roic_1.getCallback(14), ..., ...
		SUVRConstructor.GR_PET, roic_1.getCallback(15), ..., ...
		SUVRConstructor.GR_T1, roic_1.getCallback(16), ..., ...
		SUVRConstructor.SUVR_REGION_SELECTION, roic_1.getCallback(17), ..., ...
		SUVRConstructor.CALC_SUBJ_SUVR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.GR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.WAITBAR, roic_1.getCallback(20) ... ...
		);
	 
	prop_number = SUVRConstructor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SUVRConstructor.getPropTag(prop));
		switch SUVRConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(roic_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(roic_2.get(prop), roic_0.get(prop)) && ~isa(roic_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(roic_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% SUVRConstructor with 3rd callbacks
	roic_3 = SUVRConstructor( ...
		SUVRConstructor.ELCLASS, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.NAME, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.DESCRIPTION, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.TEMPLATE, roic_2.getCallback(4), ..., ...
		SUVRConstructor.ID, roic_2.getCallback(5), ..., ...
		SUVRConstructor.LABEL, SUVRConstructor.getPropDefault(SUVRConstructor.LABEL), ...
		SUVRConstructor.NOTES, SUVRConstructor.getPropDefault(SUVRConstructor.NOTES), ...
		SUVRConstructor.TOSTRING, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.REF_REGION_LIST, roic_2.getCallback(9), ..., ...
		SUVRConstructor.REF_BR_DICT, roic_2.getCallback(10), ..., ...
		SUVRConstructor.ATLAS_KIND, roic_2.getCallback(11), ..., ...
		SUVRConstructor.BA, roic_2.getCallback(12), ..., ...
		SUVRConstructor.ATLAS_INDEX, roic_2.getCallback(13), ..., ...
		SUVRConstructor.ATLAS_PATH_DICT, roic_2.getCallback(14), ..., ...
		SUVRConstructor.GR_PET, roic_2.getCallback(15), ..., ...
		SUVRConstructor.GR_T1, roic_2.getCallback(16), ..., ...
		SUVRConstructor.SUVR_REGION_SELECTION, roic_2.getCallback(17), ..., ...
		SUVRConstructor.CALC_SUBJ_SUVR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.GR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.WAITBAR, roic_2.getCallback(20) ... ...
		);
	 
	prop_number = SUVRConstructor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(SUVRConstructor.getPropTag(prop));
		switch SUVRConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(roic_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(roic_3.get(prop), roic_0.get(prop)) && ~isa(roic_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(roic_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	roic = SUVRConstructor();
	 
	roic_copy = roic.copy();
	 
	assert(roic_copy ~= roic, ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(roic_copy, roic), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
		value = roic.getr(prop);
		value_copy = roic_copy.getr(prop);
		switch SUVRConstructor.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					'SUVRConstructor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
							'SUVRConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
							'SUVRConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					roic_copy.isLocked(prop) == roic.isLocked(prop), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					'SUVRConstructor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					roic_copy.isChecked(prop) == roic.isChecked(prop), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					'SUVRConstructor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					roic_copy.getPropSeed(prop) == roic.getPropSeed(prop), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					'SUVRConstructor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	roic = SUVRConstructor( ...
		SUVRConstructor.ELCLASS, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.NAME, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.DESCRIPTION, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.TEMPLATE, SUVRConstructor.getPropDefault(SUVRConstructor.TEMPLATE), ...
		SUVRConstructor.ID, SUVRConstructor.getPropDefault(SUVRConstructor.ID), ...
		SUVRConstructor.LABEL, SUVRConstructor.getPropDefault(SUVRConstructor.LABEL), ...
		SUVRConstructor.NOTES, SUVRConstructor.getPropDefault(SUVRConstructor.NOTES), ...
		SUVRConstructor.TOSTRING, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.REF_REGION_LIST, SUVRConstructor.getPropDefault(SUVRConstructor.REF_REGION_LIST), ...
		SUVRConstructor.REF_BR_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.REF_BR_DICT), ...
		SUVRConstructor.ATLAS_KIND, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_KIND), ...
		SUVRConstructor.BA, SUVRConstructor.getPropDefault(SUVRConstructor.BA), ...
		SUVRConstructor.ATLAS_INDEX, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_INDEX), ...
		SUVRConstructor.ATLAS_PATH_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_PATH_DICT), ...
		SUVRConstructor.GR_PET, SUVRConstructor.getPropDefault(SUVRConstructor.GR_PET), ...
		SUVRConstructor.GR_T1, SUVRConstructor.getPropDefault(SUVRConstructor.GR_T1), ...
		SUVRConstructor.SUVR_REGION_SELECTION, SUVRConstructor.getPropDefault(SUVRConstructor.SUVR_REGION_SELECTION), ...
		SUVRConstructor.CALC_SUBJ_SUVR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.GR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.WAITBAR, SUVRConstructor.getPropDefault(SUVRConstructor.WAITBAR) ...
		);
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
		if SUVRConstructor.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':SUVRConstructor']);
			% roic.memorize(prop);
			% warning(warning_backup)
		elseif SUVRConstructor.getPropCategory(prop) == Category.EVANESCENT && roic.getPropFormat(prop) == Format.HANDLE
			roic.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:SUVRConstructor');
			delete(ancestor(roic.get(prop), 'figure'))
			warning(warning_backup)
		else
			roic.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	roic_copy = roic.copy();
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
		value = roic.getr(prop);
		value_copy = roic_copy.getr(prop);
		switch SUVRConstructor.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					'SUVRConstructor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
							'SUVRConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
							'SUVRConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						roic_copy.isLocked(prop) == roic.isLocked(prop), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						roic_copy.isChecked(prop) == roic.isChecked(prop), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						roic_copy.getPropSeed(prop) == roic.getPropSeed(prop), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	roic_0 = SUVRConstructor( ...
		SUVRConstructor.ELCLASS, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.NAME, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.DESCRIPTION, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.TEMPLATE, SUVRConstructor.getPropDefault(SUVRConstructor.TEMPLATE), ...
		SUVRConstructor.ID, SUVRConstructor.getPropDefault(SUVRConstructor.ID), ...
		SUVRConstructor.LABEL, SUVRConstructor.getPropDefault(SUVRConstructor.LABEL), ...
		SUVRConstructor.NOTES, SUVRConstructor.getPropDefault(SUVRConstructor.NOTES), ...
		SUVRConstructor.TOSTRING, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.REF_REGION_LIST, SUVRConstructor.getPropDefault(SUVRConstructor.REF_REGION_LIST), ...
		SUVRConstructor.REF_BR_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.REF_BR_DICT), ...
		SUVRConstructor.ATLAS_KIND, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_KIND), ...
		SUVRConstructor.BA, SUVRConstructor.getPropDefault(SUVRConstructor.BA), ...
		SUVRConstructor.ATLAS_INDEX, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_INDEX), ...
		SUVRConstructor.ATLAS_PATH_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_PATH_DICT), ...
		SUVRConstructor.GR_PET, SUVRConstructor.getPropDefault(SUVRConstructor.GR_PET), ...
		SUVRConstructor.GR_T1, SUVRConstructor.getPropDefault(SUVRConstructor.GR_T1), ...
		SUVRConstructor.SUVR_REGION_SELECTION, SUVRConstructor.getPropDefault(SUVRConstructor.SUVR_REGION_SELECTION), ...
		SUVRConstructor.CALC_SUBJ_SUVR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.GR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.WAITBAR, SUVRConstructor.getPropDefault(SUVRConstructor.WAITBAR) ...
		);
	 
	roic = SUVRConstructor( ...
		SUVRConstructor.ELCLASS, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.NAME, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.DESCRIPTION, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.TEMPLATE, roic_0.getCallback(4), ..., ...
		SUVRConstructor.ID, roic_0.getCallback(5), ..., ...
		SUVRConstructor.LABEL, SUVRConstructor.getPropDefault(SUVRConstructor.LABEL), ...
		SUVRConstructor.NOTES, SUVRConstructor.getPropDefault(SUVRConstructor.NOTES), ...
		SUVRConstructor.TOSTRING, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.REF_REGION_LIST, roic_0.getCallback(9), ..., ...
		SUVRConstructor.REF_BR_DICT, roic_0.getCallback(10), ..., ...
		SUVRConstructor.ATLAS_KIND, roic_0.getCallback(11), ..., ...
		SUVRConstructor.BA, roic_0.getCallback(12), ..., ...
		SUVRConstructor.ATLAS_INDEX, roic_0.getCallback(13), ..., ...
		SUVRConstructor.ATLAS_PATH_DICT, roic_0.getCallback(14), ..., ...
		SUVRConstructor.GR_PET, roic_0.getCallback(15), ..., ...
		SUVRConstructor.GR_T1, roic_0.getCallback(16), ..., ...
		SUVRConstructor.SUVR_REGION_SELECTION, roic_0.getCallback(17), ..., ...
		SUVRConstructor.CALC_SUBJ_SUVR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.GR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.WAITBAR, roic_0.getCallback(20) ... ...
		);
	 
	roic_copy = roic.copy();
	roic_0_copy = roic_copy.getr('ID').get('EL');
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
		value = roic.getr(prop);
		value_copy = roic_copy.getr(prop);
		switch SUVRConstructor.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					'SUVRConstructor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
							'SUVRConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
							'SUVRConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == roic_0.getCallback(prop), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The callback should be obtained from SUVRConstructor.getCallback().' ...
						)
					assert( ...
						value_copy == roic_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The callback should be obtained from SUVRConstructor.getCallback().' ...
						)
				end
	 
					assert( ...
						roic_copy.isLocked(prop) == roic.isLocked(prop), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						roic_copy.isChecked(prop) == roic.isChecked(prop), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						roic_copy.getPropSeed(prop) == roic.getPropSeed(prop), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	roic_template = SUVRConstructor();
	roic = SUVRConstructor('TEMPLATE', roic_template);
	 
	for prop = 1:1:SUVRConstructor.getPropNumber()
	 
		% excluded props
		if any(prop == [ImporterGroupSubjectCON_XLS.GET_DIR])
			continue
		end
	 
		TAG = upper(SUVRConstructor.getPropTag(prop));
		switch SUVRConstructor.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == SUVRConstructor.TEMPLATE
					assert( ...
						isa(roic.getr(prop), 'SUVRConstructor'), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor TEMPLATE does not work. SUVRConstructor.getr(''TEMPLATE'') should be a SUVRConstructor element.' ...
						)
					assert( ...
						isa(roic_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						'SUVRConstructor TEMPLATE does not work. SUVRConstructor_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(roic.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						['SUVRConstructor TEMPLATE does not work. SUVRConstructor.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						roic.getr(prop).get('EL') == roic_template && roic.getr(prop).get('PROP') == prop && strcmp(roic.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						['SUVRConstructor TEMPLATE does not work. SUVRConstructor.getr(' TAG ') should be a Callback to roic_template.' TAG '.'] ...
						)
					assert( ...
						isa(roic_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
						['SUVRConstructor TEMPLATE does not work. SUVRConstructor_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(roic.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor TEMPLATE does not work. SUVRConstructor.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(roic_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
					['SUVRConstructor TEMPLATE does not work. SUVRConstructor_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	roic = SUVRConstructor( ...
		SUVRConstructor.ELCLASS, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.NAME, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.DESCRIPTION, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.TEMPLATE, SUVRConstructor.getPropDefault(SUVRConstructor.TEMPLATE), ...
		SUVRConstructor.ID, SUVRConstructor.getPropDefault(SUVRConstructor.ID), ...
		SUVRConstructor.LABEL, SUVRConstructor.getPropDefault(SUVRConstructor.LABEL), ...
		SUVRConstructor.NOTES, SUVRConstructor.getPropDefault(SUVRConstructor.NOTES), ...
		SUVRConstructor.TOSTRING, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.REF_REGION_LIST, SUVRConstructor.getPropDefault(SUVRConstructor.REF_REGION_LIST), ...
		SUVRConstructor.REF_BR_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.REF_BR_DICT), ...
		SUVRConstructor.ATLAS_KIND, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_KIND), ...
		SUVRConstructor.BA, SUVRConstructor.getPropDefault(SUVRConstructor.BA), ...
		SUVRConstructor.ATLAS_INDEX, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_INDEX), ...
		SUVRConstructor.ATLAS_PATH_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_PATH_DICT), ...
		SUVRConstructor.GR_PET, SUVRConstructor.getPropDefault(SUVRConstructor.GR_PET), ...
		SUVRConstructor.GR_T1, SUVRConstructor.getPropDefault(SUVRConstructor.GR_T1), ...
		SUVRConstructor.SUVR_REGION_SELECTION, SUVRConstructor.getPropDefault(SUVRConstructor.SUVR_REGION_SELECTION), ...
		SUVRConstructor.CALC_SUBJ_SUVR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.GR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.WAITBAR, SUVRConstructor.getPropDefault(SUVRConstructor.WAITBAR) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'suvrconstructor_to_be_erased.b2'];
	 
	Element.save(roic, filename)
	 
	roic_loaded = Element.load(filename);
	 
	assert( ...
		isequal(roic.copy(), roic_loaded), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.save(roic) and/or SUVRConstructor.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	roic = SUVRConstructor( ...
		SUVRConstructor.ELCLASS, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.NAME, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.DESCRIPTION, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.TEMPLATE, SUVRConstructor.getPropDefault(SUVRConstructor.TEMPLATE), ...
		SUVRConstructor.ID, SUVRConstructor.getPropDefault(SUVRConstructor.ID), ...
		SUVRConstructor.LABEL, SUVRConstructor.getPropDefault(SUVRConstructor.LABEL), ...
		SUVRConstructor.NOTES, SUVRConstructor.getPropDefault(SUVRConstructor.NOTES), ...
		SUVRConstructor.TOSTRING, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.REF_REGION_LIST, SUVRConstructor.getPropDefault(SUVRConstructor.REF_REGION_LIST), ...
		SUVRConstructor.REF_BR_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.REF_BR_DICT), ...
		SUVRConstructor.ATLAS_KIND, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_KIND), ...
		SUVRConstructor.BA, SUVRConstructor.getPropDefault(SUVRConstructor.BA), ...
		SUVRConstructor.ATLAS_INDEX, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_INDEX), ...
		SUVRConstructor.ATLAS_PATH_DICT, SUVRConstructor.getPropDefault(SUVRConstructor.ATLAS_PATH_DICT), ...
		SUVRConstructor.GR_PET, SUVRConstructor.getPropDefault(SUVRConstructor.GR_PET), ...
		SUVRConstructor.GR_T1, SUVRConstructor.getPropDefault(SUVRConstructor.GR_T1), ...
		SUVRConstructor.SUVR_REGION_SELECTION, SUVRConstructor.getPropDefault(SUVRConstructor.SUVR_REGION_SELECTION), ...
		SUVRConstructor.CALC_SUBJ_SUVR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.GR, SUVRConstructor.getNoValue(), ...
		SUVRConstructor.WAITBAR, SUVRConstructor.getPropDefault(SUVRConstructor.WAITBAR) ...
		);
	 
	[json, struct, el_list] = encodeJSON(roic);
	[roic_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(roic_dec ~= roic, ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		'SUVRConstructor.encodeJSON() or SUVRConstructor.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) SUVRConstructor.getPropFormat(prop), num2cell(SUVRConstructor.getProps())) == Format.HANDLE) && all(cellfun(@(prop) SUVRConstructor.getPropFormat(prop), num2cell(SUVRConstructor.getProps())) == Format.NET)
		assert(isequal(roic_dec, roic), ...
			[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
			'SUVRConstructor.encodeJSON() or SUVRConstructor.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Verify SUVR Calculation from Example Data
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	% Generate example data
	example_data_dir = fullfile(fileparts(which('SUVRConstructor')), 'Example data Nifti');
	% Run the example data creation script
	create_example_NIfTI();
	
	im_ba = ImporterBrainAtlasXLS( ...
	    'FILE', [which('aal94_atlas.xlsx')], ...
	    'WAITBAR', true ...
	    );
	
	ba = im_ba.get('BA');
	
	% Path to generated VOIs file
	vois_file = fullfile(example_data_dir, 'Group1.vois.xlsx');
	
	% Read the VOIs file
	vois_table = readtable(vois_file);
	
	im_gr1_WM_GM = ImporterGroupSubjNIfTI('DIRECTORY',[example_data_dir filesep 'Group1'], ...
	    'NIFTI_TYPE', {'T1'},...
	    'WAITBAR', true);
	gr1_WM_GM = im_gr1_WM_GM.get('GR');
	
	im_gr1_PET = ImporterGroupSubjNIfTI('DIRECTORY', [example_data_dir filesep 'Group1'], ...
	    'NIFTI_TYPE', {'PET'},...
	    'WAITBAR', true);
	gr1_PET = im_gr1_PET.get('GR');
	
	path_dict = IndexedDictionary(...
	    'IT_CLASS', 'FILE_PATH', ...
	    'IT_LIST', {FILE_PATH('PATH', which('upsampled_AAL2.nii'))} ...
	    );
	
	% suvr_brain_label = readtable('group_data/test/atlas/AAL2_Atlas_Labels.csv');
	% suvr_brain_label = suvr_brain_label.Var4;
	ref_region_list = [2001];% reference region label
	gr = SUVRConstructor('GR_PET',gr1_PET, ...
	    'GR_T1',gr1_WM_GM, ...
	    'BA', ba,...
	    'ATLAS_PATH_DICT' ,path_dict, ...
	    'REF_REGION_LIST',{ref_region_list}, ...
	    'ATLAS_KIND', {'AAL2'});
	Con_gr = gr.get('GR');
	
	for i = 1:Con_gr.get('SUB_DICT').get('LENGTH')
	    subj = Con_gr.get('SUB_DICT').get('IT', i); % Get the subject
	    suvr_data = subj.get('ST'); % Get the SUVR data for brain regions
	    calculated_means(i, :) = suvr_data; 
	    calculated_subject_ids{i} = subj.get('ID'); % Store the subject ID
	end
	
	
	% Extract expected means from VOIs table
	expected_means = table2array(vois_table(2:end, 5:(4 + length(subj.get('ST')))));
	
	% Extract the headers for region columns
	headers = vois_table.Properties.VariableNames;
	
	% Find the column index corresponding to Region
	region_col_idx = find(contains(headers, strcat(string(ref_region_list),'_Mean')));
	
	
	% Extract Region means for all subjects
	region_means = table2array(vois_table(2:end, region_col_idx));
	
	expected_subject_ids = vois_table.SubjectID(2:end); % Assuming 'SubjectID' column exists
	% Initialize a matrix for reordered means
	reordered_calculated_means = zeros(size(expected_means));
	
	% Match and reorder based on subject IDs
	for i = 1:length(expected_subject_ids)
	    % Find the index of the expected subject ID in calculated_subject_ids
	    calculated_idx = find(strcmp(calculated_subject_ids, expected_subject_ids{i}), 1);
	    % Reorder calculated means to match expected order
	    reordered_calculated_means(i, :) = calculated_means(calculated_idx, :);
	end
	
	% Normalize expected means by Region
	normalized_means = expected_means ./ region_means;
	
	% Calculate the ratio of matching elements within the threshold
	acceptable_threshold = 2; % Define the threshold
	difference_ratio = abs(reordered_calculated_means ./ normalized_means); % Element-wise ratio
	within_threshold = difference_ratio < acceptable_threshold; % Logical matrix of valid values
	
	% Calculate the percentage of valid values
	percentage_within_threshold = sum(within_threshold(:)) / numel(within_threshold) * 100;
	
	% Assert if less than 90% meet the threshold
	assert(percentage_within_threshold >= 80, ...
	    sprintf('Calculated means do not match expected values. Only %.2f%% are within the threshold.', percentage_within_threshold));
	
	% Compare calculated and expected values
	assert(isequal(size(calculated_means), size(normalized_means)), ...
	    'Size mismatch between calculated and expected mean values.');
end

%% Test 13: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':SUVRConstructor:' BRAPH2.FAIL_TEST], ...
		[' When testing SUVRConstructor no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 14: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

