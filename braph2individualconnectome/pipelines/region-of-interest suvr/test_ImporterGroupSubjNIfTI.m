%TEST_IMPORTERGROUPSUBJNIFTI

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	im = ImporterGroupSubjNIfTI();
	 
	% get('ELCLASS')
	if isa(ImporterGroupSubjNIfTI, 'ConcreteElement')
		assert(strcmp(ImporterGroupSubjNIfTI().get('ELCLASS'), 'ImporterGroupSubjNIfTI'), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI().get(''ELCLASS'') should return ''ImporterGroupSubjNIfTI''.')
	end
	 
	% getBuild()
	assert(ImporterGroupSubjNIfTI.getBuild() == 1 && ImporterGroupSubjNIfTI.getBuild() > 0, ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.getBuild() should return the ImporterGroupSubjNIfTI build number.')
	assert(im.getBuild() == 1 && im.getBuild() > 0 , ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'im.getBuild() should return the ImporterGroupSubjNIfTI build number.')
	assert(Element.getBuild(im) == 1 && Element.getBuild(im) > 0, ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(im) should return the ImporterGroupSubjNIfTI build number.')
	assert(Element.getBuild('ImporterGroupSubjNIfTI') == 1 && Element.getBuild('ImporterGroupSubjNIfTI') > 0, ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''ImporterGroupSubjNIfTI'') should return the ImporterGroupSubjNIfTI build number.')
	 
	% getClass()
	assert(strcmp(ImporterGroupSubjNIfTI.getClass(), 'ImporterGroupSubjNIfTI'), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.getClass() should return ''ImporterGroupSubjNIfTI''.')
	assert(strcmp(im.getClass(), 'ImporterGroupSubjNIfTI'), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'im.getClass() should return ''ImporterGroupSubjNIfTI''.')
	assert(strcmp(Element.getClass(im), 'ImporterGroupSubjNIfTI'), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(im) should return ''ImporterGroupSubjNIfTI''.')
	assert(strcmp(Element.getClass('ImporterGroupSubjNIfTI'), 'ImporterGroupSubjNIfTI'), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''ImporterGroupSubjNIfTI'') should return ''ImporterGroupSubjNIfTI''.')
	 
	% getSubclasses()
	assert(isequal(ImporterGroupSubjNIfTI.getSubclasses(), subclasses('ImporterGroupSubjNIfTI', [], [], true)), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.getSubclasses() should return the same result as subclasses(''ImporterGroupSubjNIfTI'', [], [], true).')
	assert(isequal(im.getSubclasses(), subclasses('ImporterGroupSubjNIfTI', [], [], true)), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''ImporterGroupSubjNIfTI'', [], [], true).')
	assert(isequal(Element.getSubclasses(im), subclasses('ImporterGroupSubjNIfTI', [], [], true)), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(im) should return the same result as subclasses(''ImporterGroupSubjNIfTI'', [], [], true).')
	assert(isequal(Element.getSubclasses('ImporterGroupSubjNIfTI'), subclasses('ImporterGroupSubjNIfTI', [], [], true)), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''ImporterGroupSubjNIfTI'') should return the same result as subclasses(''ImporterGroupSubjNIfTI'', [], [], true).')
	 
	% getProps()
	assert(isempty(ImporterGroupSubjNIfTI.getProps()) || isequal(ImporterGroupSubjNIfTI.getProps(), 1:1:length(ImporterGroupSubjNIfTI.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.getProps() should return a row vector [1:1:N].')
	assert(isempty(ImporterGroupSubjNIfTI.getProps()) || isequal(im.getProps(), 1:1:length(ImporterGroupSubjNIfTI.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'im.getProps() should return a row vector [1:1:N].')
	assert(isempty(ImporterGroupSubjNIfTI.getProps()) || isequal(Element.getProps(im), 1:1:length(ImporterGroupSubjNIfTI.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(im) should return a row vector [1:1:N].')
	assert(isempty(ImporterGroupSubjNIfTI.getProps()) || isequal(Element.getProps('ImporterGroupSubjNIfTI'), 1:1:length(ImporterGroupSubjNIfTI.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''ImporterGroupSubjNIfTI'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) ImporterGroupSubjNIfTI.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(ImporterGroupSubjNIfTI.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ImporterGroupSubjNIfTI.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.getProps(category) does not work.')
	tmp = cellfun(@(category) im.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(ImporterGroupSubjNIfTI.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ImporterGroupSubjNIfTI.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'im.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(im, category), categories, 'UniformOutput', false);
	assert(isempty(ImporterGroupSubjNIfTI.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ImporterGroupSubjNIfTI.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(im, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('ImporterGroupSubjNIfTI', category), categories, 'UniformOutput', false);
	assert(isempty(ImporterGroupSubjNIfTI.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(ImporterGroupSubjNIfTI.getProps())), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''ImporterGroupSubjNIfTI'', category) does not work.')
	 
	% getPropNumber()
	assert(ImporterGroupSubjNIfTI.getPropNumber() == length(ImporterGroupSubjNIfTI.getProps()), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.getPropNumber() should return the number of properties.')
	assert(im.getPropNumber() == length(ImporterGroupSubjNIfTI.getProps()), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'im.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(im) == length(ImporterGroupSubjNIfTI.getProps()), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(im) should return the number of properties.')
	assert(Element.getPropNumber('ImporterGroupSubjNIfTI') == length(ImporterGroupSubjNIfTI.getProps()), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''ImporterGroupSubjNIfTI'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) ImporterGroupSubjNIfTI.getPropNumber(category), categories)) == ImporterGroupSubjNIfTI.getPropNumber(), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) im.getPropNumber(category), categories)) == ImporterGroupSubjNIfTI.getPropNumber(), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'im.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(im, category), categories)) == ImporterGroupSubjNIfTI.getPropNumber(), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(im, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('ImporterGroupSubjNIfTI', category), categories)) == ImporterGroupSubjNIfTI.getPropNumber(), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''ImporterGroupSubjNIfTI'', category) does not work.')
	 
	% existsProp(prop)
	assert(~ImporterGroupSubjNIfTI.existsProp(NaN), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.existsProp(prop) does not work.')
	assert(~im.existsProp(NaN), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'im.existsProp(prop) does not work.')
	assert(~Element.existsProp(im, NaN), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(im, prop) does not work.')
	assert(~Element.existsProp('ImporterGroupSubjNIfTI', NaN), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''ImporterGroupSubjNIfTI'', prop) does not work.')
	 
	assert_with_error('ImporterGroupSubjNIfTI.existsProp(NaN)', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], im)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], im)
	assert_with_error('Element.existsProp(''ImporterGroupSubjNIfTI'', NaN)', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		assert(ImporterGroupSubjNIfTI.existsProp(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.existsProp(prop) does not work.')
		assert(im.existsProp(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.existsProp(prop) does not work.')
		assert(Element.existsProp(im, prop), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(im, prop) does not work.')
		assert(Element.existsProp('ImporterGroupSubjNIfTI', prop), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''ImporterGroupSubjNIfTI'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~ImporterGroupSubjNIfTI.existsTag(''), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.existsTag(tag) does not work.')
	assert(~im.existsTag(''), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'im.existsTag(tag) does not work.')
	assert(~Element.existsTag(im, ''), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(im, tag) does not work.')
	assert(~Element.existsTag('ImporterGroupSubjNIfTI', ''), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''ImporterGroupSubjNIfTI'', tag) does not work.')
	 
	assert_with_error('ImporterGroupSubjNIfTI.existsTag('''')', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], im)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], im)
	assert_with_error('Element.existsTag(''ImporterGroupSubjNIfTI'', '''')', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		tag = im.getPropTag(prop);
		assert(ImporterGroupSubjNIfTI.existsTag(tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.existsTag(tag) does not work.')
		assert(im.existsTag(tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.existsTag(tag) does not work.')
		assert(Element.existsTag(im, tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(im, tga) does not work.')
		assert(Element.existsTag('ImporterGroupSubjNIfTI', tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''ImporterGroupSubjNIfTI'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		assert(ImporterGroupSubjNIfTI.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.getPropProp(prop) does not work.')
		assert(im.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.getPropProp(prop) does not work.')
		assert(Element.getPropProp(im, prop) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(im, prop) does not work.')
		assert(Element.getPropProp('ImporterGroupSubjNIfTI', prop) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''ImporterGroupSubjNIfTI'', prop) does not work.')
	 
		tag = im.getPropTag(prop);
		assert(ImporterGroupSubjNIfTI.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.getPropProp(tag) does not work.')
		assert(im.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.getPropProp(tag) does not work.')
		assert(Element.getPropProp(im, tag) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(im, tag) does not work.')
		assert(Element.getPropProp('ImporterGroupSubjNIfTI', prop) == prop, ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''ImporterGroupSubjNIfTI'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		tag = im.getPropTag(prop);
	 
		assert(strcmp(ImporterGroupSubjNIfTI.getPropTag(prop), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.getPropTag(prop) does not work.')
		assert(strcmp(im.getPropTag(prop), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(im, prop), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(im, prop) does not work.')
		assert(strcmp(Element.getPropTag('ImporterGroupSubjNIfTI', prop), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''ImporterGroupSubjNIfTI'', prop) does not work.')
	 
		assert(strcmp(ImporterGroupSubjNIfTI.getPropTag(tag), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.getPropTag(tag) does not work.')
		assert(strcmp(im.getPropTag(tag), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(im, tag), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(im, tag) does not work.')
		assert(strcmp(Element.getPropTag('ImporterGroupSubjNIfTI', prop), tag), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''ImporterGroupSubjNIfTI'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		tag = im.getPropTag(prop);
	 
		assert(Category.existsCategory(ImporterGroupSubjNIfTI.getPropCategory(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(im.getPropCategory(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(im, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''ImporterGroupSubjNIfTI'', prop) does not work.')
	 
		assert(Category.existsCategory(ImporterGroupSubjNIfTI.getPropCategory(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(im.getPropCategory(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(im, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''ImporterGroupSubjNIfTI'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		tag = im.getPropTag(prop);
	 
		assert(Format.existsFormat(ImporterGroupSubjNIfTI.getPropFormat(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(im.getPropFormat(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(im, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''ImporterGroupSubjNIfTI'', prop) does not work.')
	 
		assert(Format.existsFormat(ImporterGroupSubjNIfTI.getPropFormat(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(im.getPropFormat(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(im, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''ImporterGroupSubjNIfTI'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		tag = im.getPropTag(prop);
	 
		assert(ischar(ImporterGroupSubjNIfTI.getPropDescription(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.getPropDescription(prop) does not work.')
		assert(ischar(im.getPropDescription(prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(im, prop) does not work.')
		assert(ischar(Element.getPropDescription(im, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''ImporterGroupSubjNIfTI'', prop) does not work.')
	 
		assert(ischar(ImporterGroupSubjNIfTI.getPropDescription(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.getPropDescription(tag) does not work.')
		assert(ischar(im.getPropDescription(tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(im, tag) does not work.')
		assert(ischar(Element.getPropDescription(im, tag)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''ImporterGroupSubjNIfTI'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		tag = im.getPropTag(prop);
	 
		settings = ImporterGroupSubjNIfTI.getPropSettings(prop);
		settings = im.getPropSettings(prop);
		settings = Element.getPropSettings(im, prop);
		settings = Element.getPropSettings('ImporterGroupSubjNIfTI', prop);
	 
		settings = ImporterGroupSubjNIfTI.getPropSettings(tag);
		settings = im.getPropSettings(tag);
		settings = Element.getPropSettings(im, tag);
		settings = Element.getPropSettings('ImporterGroupSubjNIfTI', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		tag = im.getPropTag(prop);
	 
		default = ImporterGroupSubjNIfTI.getPropDefault(prop);
		default = im.getPropDefault(prop);
		default = Element.getPropDefault(im, prop);
		default = Element.getPropDefault('ImporterGroupSubjNIfTI', prop);
	 
		default = ImporterGroupSubjNIfTI.getPropDefault(tag);
		default = im.getPropDefault(tag);
		default = Element.getPropDefault(im, tag);
		default = Element.getPropDefault('ImporterGroupSubjNIfTI', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		tag = im.getPropTag(prop);
	 
		conditioned_default = ImporterGroupSubjNIfTI.getPropDefaultConditioned(prop);
		conditioned_default = im.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(im, prop);
		conditioned_default = Element.getPropDefaultConditioned('ImporterGroupSubjNIfTI', prop);
	 
		conditioned_default = ImporterGroupSubjNIfTI.getPropDefaultConditioned(tag);
		conditioned_default = im.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(im, tag);
		conditioned_default = Element.getPropDefaultConditioned('ImporterGroupSubjNIfTI', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		tag = im.getPropTag(prop);
	 
		assert(~ImporterGroupSubjNIfTI.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.checkProp(prop, value) does not work.')
		assert(~im.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(im, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(im, prop, value) does not work.')
		assert(~Element.checkProp('ImporterGroupSubjNIfTI', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ImporterGroupSubjNIfTI'', prop, value) does not work.')
	 
		assert_with_error('ImporterGroupSubjNIfTI.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], prop, im)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], prop, im)
		assert_with_error('Element.checkProp(''ImporterGroupSubjNIfTI'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~ImporterGroupSubjNIfTI.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.checkProp(tag, value) does not work.')
		assert(~im.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(im, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(im, tag, value) does not work.')
		assert(~Element.checkProp('ImporterGroupSubjNIfTI', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ImporterGroupSubjNIfTI'', tag, value) does not work.')
	 
		assert_with_error('ImporterGroupSubjNIfTI.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], tag, im)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], tag, im)
		assert_with_error('Element.checkProp(''ImporterGroupSubjNIfTI'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(ImporterGroupSubjNIfTI.checkProp(prop, Element.getPropDefaultConditioned(ImporterGroupSubjNIfTI, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.checkProp(prop, <conditioned default value>) does not work.')
		assert(im.checkProp(prop, Element.getPropDefaultConditioned(ImporterGroupSubjNIfTI, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(im, prop, Element.getPropDefaultConditioned(ImporterGroupSubjNIfTI, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(im, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('ImporterGroupSubjNIfTI', prop, Element.getPropDefaultConditioned(ImporterGroupSubjNIfTI, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ImporterGroupSubjNIfTI'', prop, <conditioned default value>) does not work.')
	 
		assert(ImporterGroupSubjNIfTI.checkProp(tag, Element.getPropDefaultConditioned(ImporterGroupSubjNIfTI, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.checkProp(tag, <conditioned default value>) does not work.')
		assert(im.checkProp(tag, Element.getPropDefaultConditioned(ImporterGroupSubjNIfTI, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'im.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(im, tag, Element.getPropDefaultConditioned(ImporterGroupSubjNIfTI, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(im, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('ImporterGroupSubjNIfTI', tag, Element.getPropDefaultConditioned(ImporterGroupSubjNIfTI, prop)), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''ImporterGroupSubjNIfTI'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjNIfTI( ...
		ImporterGroupSubjNIfTI.ELCLASS, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.NAME, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.DESCRIPTION, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.TEMPLATE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.TEMPLATE), ...
		ImporterGroupSubjNIfTI.ID, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.ID), ...
		ImporterGroupSubjNIfTI.LABEL, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.LABEL), ...
		ImporterGroupSubjNIfTI.NOTES, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NOTES), ...
		ImporterGroupSubjNIfTI.TOSTRING, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.WAITBAR, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.WAITBAR), ...
		ImporterGroupSubjNIfTI.DIRECTORY, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.DIRECTORY), ...
		ImporterGroupSubjNIfTI.NIFTI_TYPE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NIFTI_TYPE), ...
		ImporterGroupSubjNIfTI.GET_DIR, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.GR, ImporterGroupSubjNIfTI.getNoValue() ...
		);
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(ImporterGroupSubjNIfTI.getPropTag(prop));
		switch ImporterGroupSubjNIfTI.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					im.getr(prop) == ImporterGroupSubjNIfTI.getNoValue(), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['Being a ' ImporterGroupSubjNIfTI.getCategoryName(ImporterGroupSubjNIfTI.getPropCategory(prop)) ', ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ImporterGroupSubjNIfTI.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					im.getr(TAG) == ImporterGroupSubjNIfTI.getNoValue(), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['Being a ' ImporterGroupSubjNIfTI.getCategoryName(ImporterGroupSubjNIfTI.getPropCategory(prop)) ', ImporterGroupSubjNIfTI.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ImporterGroupSubjNIfTI.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(im.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(im.getPropSettings(prop))
					assert( ...
						im.checkFormat(im.getPropFormat(prop), im.get(prop)), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjNIfTI.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						im.checkFormat(im.getPropFormat(prop), im.get(prop), im.getPropSettings(prop)), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjNIfTI.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					im.getr(prop) == ImporterGroupSubjNIfTI.getNoValue(), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['Being a ' ImporterGroupSubjNIfTI.getCategoryName(ImporterGroupSubjNIfTI.getPropCategory(prop)) ', ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ImporterGroupSubjNIfTI.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					im.getr(TAG) == ImporterGroupSubjNIfTI.getNoValue(), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['Being a ' ImporterGroupSubjNIfTI.getCategoryName(ImporterGroupSubjNIfTI.getPropCategory(prop)) ', ImporterGroupSubjNIfTI.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in ImporterGroupSubjNIfTI.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':ImporterGroupSubjNIfTI']);
				assert( ...
					~isa(im.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(im.getPropSettings(prop))
					assert( ...
						im.checkFormat(im.getPropFormat(prop), im.get(prop)), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjNIfTI.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						im.checkFormat(im.getPropFormat(prop), im.get(prop), im.getPropSettings(prop)), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjNIfTI.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(im.getr(prop), ImporterGroupSubjNIfTI.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by ImporterGroupSubjNIfTI.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in ImporterGroupSubjNIfTI.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(im.getr(TAG), ImporterGroupSubjNIfTI.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' TAG ') must be inizialized to its default value ' ...
					'given by ImporterGroupSubjNIfTI.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in ImporterGroupSubjNIfTI.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjNIfTI( ...
		ImporterGroupSubjNIfTI.ELCLASS, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.NAME, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.DESCRIPTION, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.TEMPLATE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.TEMPLATE), ...
		ImporterGroupSubjNIfTI.ID, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.ID), ...
		ImporterGroupSubjNIfTI.LABEL, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.LABEL), ...
		ImporterGroupSubjNIfTI.NOTES, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NOTES), ...
		ImporterGroupSubjNIfTI.TOSTRING, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.WAITBAR, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.WAITBAR), ...
		ImporterGroupSubjNIfTI.DIRECTORY, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.DIRECTORY), ...
		ImporterGroupSubjNIfTI.NIFTI_TYPE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NIFTI_TYPE), ...
		ImporterGroupSubjNIfTI.GET_DIR, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.GR, ImporterGroupSubjNIfTI.getNoValue() ...
		);
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(ImporterGroupSubjNIfTI.getPropTag(prop));
		switch ImporterGroupSubjNIfTI.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(im.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(im.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					im.checkFormat(im.getPropFormat(prop), im.getr(prop),im.getPropSettings(prop)), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':ImporterGroupSubjNIfTI']);
				assert( ...
					~isa(im.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':ImporterGroupSubjNIfTI']);
	% 			assert( ...
	% 				~isa(im.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
	% 				['ImporterGroupSubjNIfTI.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(im.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
	% 				['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				im.checkFormat(im.getPropFormat(prop), im.getr(prop),im.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
	% 				['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':ImporterGroupSubjNIfTI']);
				assert( ...
					~isa(im.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(im.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					im.checkFormat(im.getPropFormat(prop), im.getr(prop),im.getPropSettings(prop)), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if im.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:ImporterGroupSubjNIfTI');
					delete(ancestor(im.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(ImporterGroupSubjNIfTI.getProps(Category.RESULT))
		for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch ImporterGroupSubjNIfTI.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						im.isLocked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjNIfTI.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~im.isLocked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjNIfTI.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjNIfTI();
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		TAG = upper(ImporterGroupSubjNIfTI.getPropTag(prop));
		assert( ...
			~im.isLocked(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjNIfTI.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~im.isLocked(TAG), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjNIfTI.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	im.lock()
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		switch ImporterGroupSubjNIfTI.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					im.isLocked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~im.isLocked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjNIfTI();
	 
	warning_backup = warning('off', 'BRAPH2:ImporterGroupSubjNIfTI');
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		im.lock(prop)
		switch ImporterGroupSubjNIfTI.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					im.isLocked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~im.isLocked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjNIfTI();
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		TAG = upper(ImporterGroupSubjNIfTI.getPropTag(prop));
		assert( ...
			im.isChecked(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjNIfTI.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			im.isChecked(TAG), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjNIfTI.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	im.unchecked()
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		assert( ...
			~im.isChecked(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjNIfTI.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	im.checked()
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		assert( ...
			im.isChecked(prop), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			['ImporterGroupSubjNIfTI.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic ImporterGroupSubjNIfTI
	im_0 = ImporterGroupSubjNIfTI( ...
		ImporterGroupSubjNIfTI.ELCLASS, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.NAME, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.DESCRIPTION, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.TEMPLATE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.TEMPLATE), ...
		ImporterGroupSubjNIfTI.ID, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.ID), ...
		ImporterGroupSubjNIfTI.LABEL, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.LABEL), ...
		ImporterGroupSubjNIfTI.NOTES, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NOTES), ...
		ImporterGroupSubjNIfTI.TOSTRING, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.WAITBAR, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.WAITBAR), ...
		ImporterGroupSubjNIfTI.DIRECTORY, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.DIRECTORY), ...
		ImporterGroupSubjNIfTI.NIFTI_TYPE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NIFTI_TYPE), ...
		ImporterGroupSubjNIfTI.GET_DIR, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.GR, ImporterGroupSubjNIfTI.getNoValue() ...
		);
	 
	% ImporterGroupSubjNIfTI with 1st callbacks
	im_1 = ImporterGroupSubjNIfTI( ...
		ImporterGroupSubjNIfTI.ELCLASS, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.NAME, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.DESCRIPTION, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.TEMPLATE, im_0.getCallback(4), ..., ...
		ImporterGroupSubjNIfTI.ID, im_0.getCallback(5), ..., ...
		ImporterGroupSubjNIfTI.LABEL, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.LABEL), ...
		ImporterGroupSubjNIfTI.NOTES, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NOTES), ...
		ImporterGroupSubjNIfTI.TOSTRING, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.WAITBAR, im_0.getCallback(9), ..., ...
		ImporterGroupSubjNIfTI.DIRECTORY, im_0.getCallback(10), ..., ...
		ImporterGroupSubjNIfTI.NIFTI_TYPE, im_0.getCallback(11), ..., ...
		ImporterGroupSubjNIfTI.GET_DIR, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.GR, ImporterGroupSubjNIfTI.getNoValue() ...
		);
	 
	prop_number = ImporterGroupSubjNIfTI.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ImporterGroupSubjNIfTI.getPropTag(prop));
		switch ImporterGroupSubjNIfTI.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(im_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(im_1.get(prop), im_0.get(prop)) && ~isa(im_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(im_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% ImporterGroupSubjNIfTI with 2nd callbacks
	im_2 = ImporterGroupSubjNIfTI( ...
		ImporterGroupSubjNIfTI.ELCLASS, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.NAME, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.DESCRIPTION, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.TEMPLATE, im_1.getCallback(4), ..., ...
		ImporterGroupSubjNIfTI.ID, im_1.getCallback(5), ..., ...
		ImporterGroupSubjNIfTI.LABEL, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.LABEL), ...
		ImporterGroupSubjNIfTI.NOTES, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NOTES), ...
		ImporterGroupSubjNIfTI.TOSTRING, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.WAITBAR, im_1.getCallback(9), ..., ...
		ImporterGroupSubjNIfTI.DIRECTORY, im_1.getCallback(10), ..., ...
		ImporterGroupSubjNIfTI.NIFTI_TYPE, im_1.getCallback(11), ..., ...
		ImporterGroupSubjNIfTI.GET_DIR, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.GR, ImporterGroupSubjNIfTI.getNoValue() ...
		);
	 
	prop_number = ImporterGroupSubjNIfTI.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ImporterGroupSubjNIfTI.getPropTag(prop));
		switch ImporterGroupSubjNIfTI.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(im_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(im_2.get(prop), im_0.get(prop)) && ~isa(im_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(im_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% ImporterGroupSubjNIfTI with 3rd callbacks
	im_3 = ImporterGroupSubjNIfTI( ...
		ImporterGroupSubjNIfTI.ELCLASS, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.NAME, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.DESCRIPTION, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.TEMPLATE, im_2.getCallback(4), ..., ...
		ImporterGroupSubjNIfTI.ID, im_2.getCallback(5), ..., ...
		ImporterGroupSubjNIfTI.LABEL, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.LABEL), ...
		ImporterGroupSubjNIfTI.NOTES, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NOTES), ...
		ImporterGroupSubjNIfTI.TOSTRING, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.WAITBAR, im_2.getCallback(9), ..., ...
		ImporterGroupSubjNIfTI.DIRECTORY, im_2.getCallback(10), ..., ...
		ImporterGroupSubjNIfTI.NIFTI_TYPE, im_2.getCallback(11), ..., ...
		ImporterGroupSubjNIfTI.GET_DIR, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.GR, ImporterGroupSubjNIfTI.getNoValue() ...
		);
	 
	prop_number = ImporterGroupSubjNIfTI.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(ImporterGroupSubjNIfTI.getPropTag(prop));
		switch ImporterGroupSubjNIfTI.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(im_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(im_3.get(prop), im_0.get(prop)) && ~isa(im_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(im_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	im = ImporterGroupSubjNIfTI();
	 
	im_copy = im.copy();
	 
	assert(im_copy ~= im, ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(im_copy, im), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		value = im.getr(prop);
		value_copy = im_copy.getr(prop);
		switch ImporterGroupSubjNIfTI.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjNIfTI.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjNIfTI.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjNIfTI.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					im_copy.isLocked(prop) == im.isLocked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjNIfTI.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					im_copy.isChecked(prop) == im.isChecked(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjNIfTI.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					im_copy.getPropSeed(prop) == im.getPropSeed(prop), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjNIfTI.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	im = ImporterGroupSubjNIfTI( ...
		ImporterGroupSubjNIfTI.ELCLASS, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.NAME, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.DESCRIPTION, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.TEMPLATE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.TEMPLATE), ...
		ImporterGroupSubjNIfTI.ID, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.ID), ...
		ImporterGroupSubjNIfTI.LABEL, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.LABEL), ...
		ImporterGroupSubjNIfTI.NOTES, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NOTES), ...
		ImporterGroupSubjNIfTI.TOSTRING, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.WAITBAR, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.WAITBAR), ...
		ImporterGroupSubjNIfTI.DIRECTORY, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.DIRECTORY), ...
		ImporterGroupSubjNIfTI.NIFTI_TYPE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NIFTI_TYPE), ...
		ImporterGroupSubjNIfTI.GET_DIR, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.GR, ImporterGroupSubjNIfTI.getNoValue() ...
		);
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		if ImporterGroupSubjNIfTI.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':ImporterGroupSubjNIfTI']);
			% im.memorize(prop);
			% warning(warning_backup)
		elseif ImporterGroupSubjNIfTI.getPropCategory(prop) == Category.EVANESCENT && im.getPropFormat(prop) == Format.HANDLE
			im.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:ImporterGroupSubjNIfTI');
			delete(ancestor(im.get(prop), 'figure'))
			warning(warning_backup)
		else
			im.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	im_copy = im.copy();
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		value = im.getr(prop);
		value_copy = im_copy.getr(prop);
		switch ImporterGroupSubjNIfTI.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjNIfTI.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjNIfTI.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjNIfTI.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						im_copy.isLocked(prop) == im.isLocked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						im_copy.isChecked(prop) == im.isChecked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						im_copy.getPropSeed(prop) == im.getPropSeed(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	im_0 = ImporterGroupSubjNIfTI( ...
		ImporterGroupSubjNIfTI.ELCLASS, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.NAME, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.DESCRIPTION, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.TEMPLATE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.TEMPLATE), ...
		ImporterGroupSubjNIfTI.ID, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.ID), ...
		ImporterGroupSubjNIfTI.LABEL, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.LABEL), ...
		ImporterGroupSubjNIfTI.NOTES, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NOTES), ...
		ImporterGroupSubjNIfTI.TOSTRING, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.WAITBAR, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.WAITBAR), ...
		ImporterGroupSubjNIfTI.DIRECTORY, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.DIRECTORY), ...
		ImporterGroupSubjNIfTI.NIFTI_TYPE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NIFTI_TYPE), ...
		ImporterGroupSubjNIfTI.GET_DIR, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.GR, ImporterGroupSubjNIfTI.getNoValue() ...
		);
	 
	im = ImporterGroupSubjNIfTI( ...
		ImporterGroupSubjNIfTI.ELCLASS, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.NAME, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.DESCRIPTION, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.TEMPLATE, im_0.getCallback(4), ..., ...
		ImporterGroupSubjNIfTI.ID, im_0.getCallback(5), ..., ...
		ImporterGroupSubjNIfTI.LABEL, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.LABEL), ...
		ImporterGroupSubjNIfTI.NOTES, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NOTES), ...
		ImporterGroupSubjNIfTI.TOSTRING, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.WAITBAR, im_0.getCallback(9), ..., ...
		ImporterGroupSubjNIfTI.DIRECTORY, im_0.getCallback(10), ..., ...
		ImporterGroupSubjNIfTI.NIFTI_TYPE, im_0.getCallback(11), ..., ...
		ImporterGroupSubjNIfTI.GET_DIR, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.GR, ImporterGroupSubjNIfTI.getNoValue() ...
		);
	 
	im_copy = im.copy();
	im_0_copy = im_copy.getr('ID').get('EL');
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
		value = im.getr(prop);
		value_copy = im_copy.getr(prop);
		switch ImporterGroupSubjNIfTI.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					'ImporterGroupSubjNIfTI.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjNIfTI.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
							'ImporterGroupSubjNIfTI.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == im_0.getCallback(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The callback should be obtained from ImporterGroupSubjNIfTI.getCallback().' ...
						)
					assert( ...
						value_copy == im_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The callback should be obtained from ImporterGroupSubjNIfTI.getCallback().' ...
						)
				end
	 
					assert( ...
						im_copy.isLocked(prop) == im.isLocked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						im_copy.isChecked(prop) == im.isChecked(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						im_copy.getPropSeed(prop) == im.getPropSeed(prop), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im_template = ImporterGroupSubjNIfTI();
	im = ImporterGroupSubjNIfTI('TEMPLATE', im_template);
	 
	for prop = 1:1:ImporterGroupSubjNIfTI.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(ImporterGroupSubjNIfTI.getPropTag(prop));
		switch ImporterGroupSubjNIfTI.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == ImporterGroupSubjNIfTI.TEMPLATE
					assert( ...
						isa(im.getr(prop), 'ImporterGroupSubjNIfTI'), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI TEMPLATE does not work. ImporterGroupSubjNIfTI.getr(''TEMPLATE'') should be a ImporterGroupSubjNIfTI element.' ...
						)
					assert( ...
						isa(im_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						'ImporterGroupSubjNIfTI TEMPLATE does not work. ImporterGroupSubjNIfTI_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(im.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjNIfTI TEMPLATE does not work. ImporterGroupSubjNIfTI.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						im.getr(prop).get('EL') == im_template && im.getr(prop).get('PROP') == prop && strcmp(im.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjNIfTI TEMPLATE does not work. ImporterGroupSubjNIfTI.getr(' TAG ') should be a Callback to im_template.' TAG '.'] ...
						)
					assert( ...
						isa(im_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
						['ImporterGroupSubjNIfTI TEMPLATE does not work. ImporterGroupSubjNIfTI_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(im.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI TEMPLATE does not work. ImporterGroupSubjNIfTI.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(im_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
					['ImporterGroupSubjNIfTI TEMPLATE does not work. ImporterGroupSubjNIfTI_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjNIfTI( ...
		ImporterGroupSubjNIfTI.ELCLASS, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.NAME, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.DESCRIPTION, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.TEMPLATE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.TEMPLATE), ...
		ImporterGroupSubjNIfTI.ID, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.ID), ...
		ImporterGroupSubjNIfTI.LABEL, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.LABEL), ...
		ImporterGroupSubjNIfTI.NOTES, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NOTES), ...
		ImporterGroupSubjNIfTI.TOSTRING, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.WAITBAR, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.WAITBAR), ...
		ImporterGroupSubjNIfTI.DIRECTORY, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.DIRECTORY), ...
		ImporterGroupSubjNIfTI.NIFTI_TYPE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NIFTI_TYPE), ...
		ImporterGroupSubjNIfTI.GET_DIR, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.GR, ImporterGroupSubjNIfTI.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'importergroupsubjnifti_to_be_erased.b2'];
	 
	Element.save(im, filename)
	 
	im_loaded = Element.load(filename);
	 
	assert( ...
		isequal(im.copy(), im_loaded), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.save(im) and/or ImporterGroupSubjNIfTI.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	im = ImporterGroupSubjNIfTI( ...
		ImporterGroupSubjNIfTI.ELCLASS, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.NAME, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.DESCRIPTION, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.TEMPLATE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.TEMPLATE), ...
		ImporterGroupSubjNIfTI.ID, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.ID), ...
		ImporterGroupSubjNIfTI.LABEL, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.LABEL), ...
		ImporterGroupSubjNIfTI.NOTES, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NOTES), ...
		ImporterGroupSubjNIfTI.TOSTRING, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.WAITBAR, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.WAITBAR), ...
		ImporterGroupSubjNIfTI.DIRECTORY, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.DIRECTORY), ...
		ImporterGroupSubjNIfTI.NIFTI_TYPE, ImporterGroupSubjNIfTI.getPropDefault(ImporterGroupSubjNIfTI.NIFTI_TYPE), ...
		ImporterGroupSubjNIfTI.GET_DIR, ImporterGroupSubjNIfTI.getNoValue(), ...
		ImporterGroupSubjNIfTI.GR, ImporterGroupSubjNIfTI.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(im);
	[im_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(im_dec ~= im, ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		'ImporterGroupSubjNIfTI.encodeJSON() or ImporterGroupSubjNIfTI.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) ImporterGroupSubjNIfTI.getPropFormat(prop), num2cell(ImporterGroupSubjNIfTI.getProps())) == Format.HANDLE) && all(cellfun(@(prop) ImporterGroupSubjNIfTI.getPropFormat(prop), num2cell(ImporterGroupSubjNIfTI.getProps())) == Format.NET)
		assert(isequal(im_dec, im), ...
			[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
			'ImporterGroupSubjNIfTI.encodeJSON() or ImporterGroupSubjNIfTI.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Create example files
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	create_example_NIfTI() % only creates files if the example folder doesn't already exist
end

%% Test 13: GUI
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	example_data_dir = fullfile(fileparts(which('SUVRConstructor')), 'Example data Nifti');
	im_gr1 = ImporterGroupSubjNIfTI('DIRECTORY',[example_data_dir filesep 'Group1'], ...
	    'NIFTI_TYPE', {'T1'},...
	    'WAITBAR', true);
	gr = im_gr1.get('GR');
	gui = GUIElement('PE', gr, 'CLOSEREQ', false);
	gui.get('DRAW')
	gui.get('SHOW')
	
	gui.get('CLOSE')
end

%% Test 14: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':ImporterGroupSubjNIfTI:' BRAPH2.FAIL_TEST], ...
		[' When testing ImporterGroupSubjNIfTI no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 15: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

