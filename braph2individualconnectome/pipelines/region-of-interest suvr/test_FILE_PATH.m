%TEST_FILE_PATH

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	FP = FILE_PATH();
	 
	% get('ELCLASS')
	if isa(FILE_PATH, 'ConcreteElement')
		assert(strcmp(FILE_PATH().get('ELCLASS'), 'FILE_PATH'), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH().get(''ELCLASS'') should return ''FILE_PATH''.')
	end
	 
	% getBuild()
	assert(FILE_PATH.getBuild() == 1 && FILE_PATH.getBuild() > 0, ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.getBuild() should return the FILE_PATH build number.')
	assert(FP.getBuild() == 1 && FP.getBuild() > 0 , ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FP.getBuild() should return the FILE_PATH build number.')
	assert(Element.getBuild(FP) == 1 && Element.getBuild(FP) > 0, ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(FP) should return the FILE_PATH build number.')
	assert(Element.getBuild('FILE_PATH') == 1 && Element.getBuild('FILE_PATH') > 0, ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''FILE_PATH'') should return the FILE_PATH build number.')
	 
	% getClass()
	assert(strcmp(FILE_PATH.getClass(), 'FILE_PATH'), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.getClass() should return ''FILE_PATH''.')
	assert(strcmp(FP.getClass(), 'FILE_PATH'), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FP.getClass() should return ''FILE_PATH''.')
	assert(strcmp(Element.getClass(FP), 'FILE_PATH'), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(FP) should return ''FILE_PATH''.')
	assert(strcmp(Element.getClass('FILE_PATH'), 'FILE_PATH'), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''FILE_PATH'') should return ''FILE_PATH''.')
	 
	% getSubclasses()
	assert(isequal(FILE_PATH.getSubclasses(), subclasses('FILE_PATH', [], [], true)), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.getSubclasses() should return the same result as subclasses(''FILE_PATH'', [], [], true).')
	assert(isequal(FP.getSubclasses(), subclasses('FILE_PATH', [], [], true)), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''FILE_PATH'', [], [], true).')
	assert(isequal(Element.getSubclasses(FP), subclasses('FILE_PATH', [], [], true)), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(FP) should return the same result as subclasses(''FILE_PATH'', [], [], true).')
	assert(isequal(Element.getSubclasses('FILE_PATH'), subclasses('FILE_PATH', [], [], true)), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''FILE_PATH'') should return the same result as subclasses(''FILE_PATH'', [], [], true).')
	 
	% getProps()
	assert(isempty(FILE_PATH.getProps()) || isequal(FILE_PATH.getProps(), 1:1:length(FILE_PATH.getProps())), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.getProps() should return a row vector [1:1:N].')
	assert(isempty(FILE_PATH.getProps()) || isequal(FP.getProps(), 1:1:length(FILE_PATH.getProps())), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FP.getProps() should return a row vector [1:1:N].')
	assert(isempty(FILE_PATH.getProps()) || isequal(Element.getProps(FP), 1:1:length(FILE_PATH.getProps())), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(FP) should return a row vector [1:1:N].')
	assert(isempty(FILE_PATH.getProps()) || isequal(Element.getProps('FILE_PATH'), 1:1:length(FILE_PATH.getProps())), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''FILE_PATH'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) FILE_PATH.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(FILE_PATH.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(FILE_PATH.getProps())), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.getProps(category) does not work.')
	tmp = cellfun(@(category) FP.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(FILE_PATH.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(FILE_PATH.getProps())), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FP.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(FP, category), categories, 'UniformOutput', false);
	assert(isempty(FILE_PATH.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(FILE_PATH.getProps())), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(FP, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('FILE_PATH', category), categories, 'UniformOutput', false);
	assert(isempty(FILE_PATH.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(FILE_PATH.getProps())), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''FILE_PATH'', category) does not work.')
	 
	% getPropNumber()
	assert(FILE_PATH.getPropNumber() == length(FILE_PATH.getProps()), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.getPropNumber() should return the number of properties.')
	assert(FP.getPropNumber() == length(FILE_PATH.getProps()), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FP.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(FP) == length(FILE_PATH.getProps()), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(FP) should return the number of properties.')
	assert(Element.getPropNumber('FILE_PATH') == length(FILE_PATH.getProps()), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''FILE_PATH'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) FILE_PATH.getPropNumber(category), categories)) == FILE_PATH.getPropNumber(), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) FP.getPropNumber(category), categories)) == FILE_PATH.getPropNumber(), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FP.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(FP, category), categories)) == FILE_PATH.getPropNumber(), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(FP, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('FILE_PATH', category), categories)) == FILE_PATH.getPropNumber(), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''FILE_PATH'', category) does not work.')
	 
	% existsProp(prop)
	assert(~FILE_PATH.existsProp(NaN), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.existsProp(prop) does not work.')
	assert(~FP.existsProp(NaN), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FP.existsProp(prop) does not work.')
	assert(~Element.existsProp(FP, NaN), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(FP, prop) does not work.')
	assert(~Element.existsProp('FILE_PATH', NaN), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''FILE_PATH'', prop) does not work.')
	 
	assert_with_error('FILE_PATH.existsProp(NaN)', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], FP)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], FP)
	assert_with_error('Element.existsProp(''FILE_PATH'', NaN)', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
		assert(FILE_PATH.existsProp(prop), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.existsProp(prop) does not work.')
		assert(FP.existsProp(prop), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.existsProp(prop) does not work.')
		assert(Element.existsProp(FP, prop), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(FP, prop) does not work.')
		assert(Element.existsProp('FILE_PATH', prop), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''FILE_PATH'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~FILE_PATH.existsTag(''), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.existsTag(tag) does not work.')
	assert(~FP.existsTag(''), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FP.existsTag(tag) does not work.')
	assert(~Element.existsTag(FP, ''), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(FP, tag) does not work.')
	assert(~Element.existsTag('FILE_PATH', ''), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''FILE_PATH'', tag) does not work.')
	 
	assert_with_error('FILE_PATH.existsTag('''')', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], FP)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], FP)
	assert_with_error('Element.existsTag(''FILE_PATH'', '''')', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
		tag = FP.getPropTag(prop);
		assert(FILE_PATH.existsTag(tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.existsTag(tag) does not work.')
		assert(FP.existsTag(tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.existsTag(tag) does not work.')
		assert(Element.existsTag(FP, tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(FP, tga) does not work.')
		assert(Element.existsTag('FILE_PATH', tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''FILE_PATH'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:FILE_PATH.getPropNumber()
		assert(FILE_PATH.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.getPropProp(prop) does not work.')
		assert(FP.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.getPropProp(prop) does not work.')
		assert(Element.getPropProp(FP, prop) == prop, ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(FP, prop) does not work.')
		assert(Element.getPropProp('FILE_PATH', prop) == prop, ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''FILE_PATH'', prop) does not work.')
	 
		tag = FP.getPropTag(prop);
		assert(FILE_PATH.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.getPropProp(tag) does not work.')
		assert(FP.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.getPropProp(tag) does not work.')
		assert(Element.getPropProp(FP, tag) == prop, ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(FP, tag) does not work.')
		assert(Element.getPropProp('FILE_PATH', prop) == prop, ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''FILE_PATH'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:FILE_PATH.getPropNumber()
		tag = FP.getPropTag(prop);
	 
		assert(strcmp(FILE_PATH.getPropTag(prop), tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.getPropTag(prop) does not work.')
		assert(strcmp(FP.getPropTag(prop), tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(FP, prop), tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(FP, prop) does not work.')
		assert(strcmp(Element.getPropTag('FILE_PATH', prop), tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''FILE_PATH'', prop) does not work.')
	 
		assert(strcmp(FILE_PATH.getPropTag(tag), tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.getPropTag(tag) does not work.')
		assert(strcmp(FP.getPropTag(tag), tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(FP, tag), tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(FP, tag) does not work.')
		assert(strcmp(Element.getPropTag('FILE_PATH', prop), tag), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''FILE_PATH'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:FILE_PATH.getPropNumber()
		tag = FP.getPropTag(prop);
	 
		assert(Category.existsCategory(FILE_PATH.getPropCategory(prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(FP.getPropCategory(prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(FP, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(FP, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(FP, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''FILE_PATH'', prop) does not work.')
	 
		assert(Category.existsCategory(FILE_PATH.getPropCategory(tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(FP.getPropCategory(tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(FP, tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(FP, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(FP, tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''FILE_PATH'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:FILE_PATH.getPropNumber()
		tag = FP.getPropTag(prop);
	 
		assert(Format.existsFormat(FILE_PATH.getPropFormat(prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(FP.getPropFormat(prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(FP, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(FP, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(FP, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''FILE_PATH'', prop) does not work.')
	 
		assert(Format.existsFormat(FILE_PATH.getPropFormat(tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(FP.getPropFormat(tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(FP, tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(FP, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(FP, tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''FILE_PATH'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:FILE_PATH.getPropNumber()
		tag = FP.getPropTag(prop);
	 
		assert(ischar(FILE_PATH.getPropDescription(prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.getPropDescription(prop) does not work.')
		assert(ischar(FP.getPropDescription(prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(FP, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(FP, prop) does not work.')
		assert(ischar(Element.getPropDescription(FP, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''FILE_PATH'', prop) does not work.')
	 
		assert(ischar(FILE_PATH.getPropDescription(tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.getPropDescription(tag) does not work.')
		assert(ischar(FP.getPropDescription(tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(FP, tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(FP, tag) does not work.')
		assert(ischar(Element.getPropDescription(FP, tag)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''FILE_PATH'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:FILE_PATH.getPropNumber()
		tag = FP.getPropTag(prop);
	 
		settings = FILE_PATH.getPropSettings(prop);
		settings = FP.getPropSettings(prop);
		settings = Element.getPropSettings(FP, prop);
		settings = Element.getPropSettings('FILE_PATH', prop);
	 
		settings = FILE_PATH.getPropSettings(tag);
		settings = FP.getPropSettings(tag);
		settings = Element.getPropSettings(FP, tag);
		settings = Element.getPropSettings('FILE_PATH', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:FILE_PATH.getPropNumber()
		tag = FP.getPropTag(prop);
	 
		default = FILE_PATH.getPropDefault(prop);
		default = FP.getPropDefault(prop);
		default = Element.getPropDefault(FP, prop);
		default = Element.getPropDefault('FILE_PATH', prop);
	 
		default = FILE_PATH.getPropDefault(tag);
		default = FP.getPropDefault(tag);
		default = Element.getPropDefault(FP, tag);
		default = Element.getPropDefault('FILE_PATH', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:FILE_PATH.getPropNumber()
		tag = FP.getPropTag(prop);
	 
		conditioned_default = FILE_PATH.getPropDefaultConditioned(prop);
		conditioned_default = FP.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(FP, prop);
		conditioned_default = Element.getPropDefaultConditioned('FILE_PATH', prop);
	 
		conditioned_default = FILE_PATH.getPropDefaultConditioned(tag);
		conditioned_default = FP.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(FP, tag);
		conditioned_default = Element.getPropDefaultConditioned('FILE_PATH', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:FILE_PATH.getPropNumber()
		tag = FP.getPropTag(prop);
	 
		assert(~FILE_PATH.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.checkProp(prop, value) does not work.')
		assert(~FP.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(FP, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(FP, prop, value) does not work.')
		assert(~Element.checkProp('FILE_PATH', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''FILE_PATH'', prop, value) does not work.')
	 
		assert_with_error('FILE_PATH.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], prop, FP)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], prop, FP)
		assert_with_error('Element.checkProp(''FILE_PATH'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~FILE_PATH.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.checkProp(tag, value) does not work.')
		assert(~FP.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(FP, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(FP, tag, value) does not work.')
		assert(~Element.checkProp('FILE_PATH', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''FILE_PATH'', tag, value) does not work.')
	 
		assert_with_error('FILE_PATH.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], tag, FP)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], tag, FP)
		assert_with_error('Element.checkProp(''FILE_PATH'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':FILE_PATH:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(FILE_PATH.checkProp(prop, Element.getPropDefaultConditioned(FILE_PATH, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.checkProp(prop, <conditioned default value>) does not work.')
		assert(FP.checkProp(prop, Element.getPropDefaultConditioned(FILE_PATH, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(FP, prop, Element.getPropDefaultConditioned(FILE_PATH, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(FP, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('FILE_PATH', prop, Element.getPropDefaultConditioned(FILE_PATH, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''FILE_PATH'', prop, <conditioned default value>) does not work.')
	 
		assert(FILE_PATH.checkProp(tag, Element.getPropDefaultConditioned(FILE_PATH, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.checkProp(tag, <conditioned default value>) does not work.')
		assert(FP.checkProp(tag, Element.getPropDefaultConditioned(FILE_PATH, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FP.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(FP, tag, Element.getPropDefaultConditioned(FILE_PATH, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(FP, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('FILE_PATH', tag, Element.getPropDefaultConditioned(FILE_PATH, prop)), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''FILE_PATH'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	FP = FILE_PATH( ...
		FILE_PATH.ELCLASS, FILE_PATH.getNoValue(), ...
		FILE_PATH.NAME, FILE_PATH.getNoValue(), ...
		FILE_PATH.DESCRIPTION, FILE_PATH.getNoValue(), ...
		FILE_PATH.TEMPLATE, FILE_PATH.getPropDefault(FILE_PATH.TEMPLATE), ...
		FILE_PATH.ID, FILE_PATH.getPropDefault(FILE_PATH.ID), ...
		FILE_PATH.LABEL, FILE_PATH.getPropDefault(FILE_PATH.LABEL), ...
		FILE_PATH.NOTES, FILE_PATH.getPropDefault(FILE_PATH.NOTES), ...
		FILE_PATH.TOSTRING, FILE_PATH.getNoValue(), ...
		FILE_PATH.PATH, FILE_PATH.getPropDefault(FILE_PATH.PATH) ...
		);
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(FILE_PATH.getPropTag(prop));
		switch FILE_PATH.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					FP.getr(prop) == FILE_PATH.getNoValue(), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['Being a ' FILE_PATH.getCategoryName(FILE_PATH.getPropCategory(prop)) ', FILE_PATH.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in FILE_PATH.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					FP.getr(TAG) == FILE_PATH.getNoValue(), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['Being a ' FILE_PATH.getCategoryName(FILE_PATH.getPropCategory(prop)) ', FILE_PATH.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in FILE_PATH.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(FP.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(FP.getPropSettings(prop))
					assert( ...
						FP.checkFormat(FP.getPropFormat(prop), FP.get(prop)), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						['FILE_PATH.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						FP.checkFormat(FP.getPropFormat(prop), FP.get(prop), FP.getPropSettings(prop)), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						['FILE_PATH.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					FP.getr(prop) == FILE_PATH.getNoValue(), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['Being a ' FILE_PATH.getCategoryName(FILE_PATH.getPropCategory(prop)) ', FILE_PATH.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in FILE_PATH.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					FP.getr(TAG) == FILE_PATH.getNoValue(), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['Being a ' FILE_PATH.getCategoryName(FILE_PATH.getPropCategory(prop)) ', FILE_PATH.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in FILE_PATH.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':FILE_PATH']);
				assert( ...
					~isa(FP.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(FP.getPropSettings(prop))
					assert( ...
						FP.checkFormat(FP.getPropFormat(prop), FP.get(prop)), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						['FILE_PATH.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						FP.checkFormat(FP.getPropFormat(prop), FP.get(prop), FP.getPropSettings(prop)), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						['FILE_PATH.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(FP.getr(prop), FILE_PATH.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by FILE_PATH.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in FILE_PATH.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(FP.getr(TAG), FILE_PATH.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' TAG ') must be inizialized to its default value ' ...
					'given by FILE_PATH.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in FILE_PATH.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	FP = FILE_PATH( ...
		FILE_PATH.ELCLASS, FILE_PATH.getNoValue(), ...
		FILE_PATH.NAME, FILE_PATH.getNoValue(), ...
		FILE_PATH.DESCRIPTION, FILE_PATH.getNoValue(), ...
		FILE_PATH.TEMPLATE, FILE_PATH.getPropDefault(FILE_PATH.TEMPLATE), ...
		FILE_PATH.ID, FILE_PATH.getPropDefault(FILE_PATH.ID), ...
		FILE_PATH.LABEL, FILE_PATH.getPropDefault(FILE_PATH.LABEL), ...
		FILE_PATH.NOTES, FILE_PATH.getPropDefault(FILE_PATH.NOTES), ...
		FILE_PATH.TOSTRING, FILE_PATH.getNoValue(), ...
		FILE_PATH.PATH, FILE_PATH.getPropDefault(FILE_PATH.PATH) ...
		);
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(FILE_PATH.getPropTag(prop));
		switch FILE_PATH.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(FP.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(FP.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(FP.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(FP.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					FP.checkFormat(FP.getPropFormat(prop), FP.getr(prop),FP.getPropSettings(prop)), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':FILE_PATH']);
				assert( ...
					~isa(FP.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(FP.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':FILE_PATH']);
	% 			assert( ...
	% 				~isa(FP.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
	% 				['FILE_PATH.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(FP.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
	% 				['FILE_PATH.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				FP.checkFormat(FP.getPropFormat(prop), FP.getr(prop),FP.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
	% 				['FILE_PATH.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':FILE_PATH']);
				assert( ...
					~isa(FP.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(FP.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(FP.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(FP.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					FP.checkFormat(FP.getPropFormat(prop), FP.getr(prop),FP.getPropSettings(prop)), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if FP.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:FILE_PATH');
					delete(ancestor(FP.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(FILE_PATH.getProps(Category.RESULT))
		for prop = 1:1:FILE_PATH.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch FILE_PATH.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						FP.isLocked(prop), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						['FILE_PATH.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~FP.isLocked(prop), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						['FILE_PATH.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	FP = FILE_PATH();
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
		TAG = upper(FILE_PATH.getPropTag(prop));
		assert( ...
			~FP.isLocked(prop), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			['FILE_PATH.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~FP.isLocked(TAG), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			['FILE_PATH.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	FP.lock()
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
		switch FILE_PATH.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					FP.isLocked(prop), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~FP.isLocked(prop), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	FP = FILE_PATH();
	 
	warning_backup = warning('off', 'BRAPH2:FILE_PATH');
	for prop = 1:1:FILE_PATH.getPropNumber()
		FP.lock(prop)
		switch FILE_PATH.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					FP.isLocked(prop), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~FP.isLocked(prop), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	FP = FILE_PATH();
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
		TAG = upper(FILE_PATH.getPropTag(prop));
		assert( ...
			FP.isChecked(prop), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			['FILE_PATH.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			FP.isChecked(TAG), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			['FILE_PATH.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	FP.unchecked()
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
		assert( ...
			~FP.isChecked(prop), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			['FILE_PATH.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	FP.checked()
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
		assert( ...
			FP.isChecked(prop), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			['FILE_PATH.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic FILE_PATH
	FP_0 = FILE_PATH( ...
		FILE_PATH.ELCLASS, FILE_PATH.getNoValue(), ...
		FILE_PATH.NAME, FILE_PATH.getNoValue(), ...
		FILE_PATH.DESCRIPTION, FILE_PATH.getNoValue(), ...
		FILE_PATH.TEMPLATE, FILE_PATH.getPropDefault(FILE_PATH.TEMPLATE), ...
		FILE_PATH.ID, FILE_PATH.getPropDefault(FILE_PATH.ID), ...
		FILE_PATH.LABEL, FILE_PATH.getPropDefault(FILE_PATH.LABEL), ...
		FILE_PATH.NOTES, FILE_PATH.getPropDefault(FILE_PATH.NOTES), ...
		FILE_PATH.TOSTRING, FILE_PATH.getNoValue(), ...
		FILE_PATH.PATH, FILE_PATH.getPropDefault(FILE_PATH.PATH) ...
		);
	 
	% FILE_PATH with 1st callbacks
	FP_1 = FILE_PATH( ...
		FILE_PATH.ELCLASS, FILE_PATH.getNoValue(), ...
		FILE_PATH.NAME, FILE_PATH.getNoValue(), ...
		FILE_PATH.DESCRIPTION, FILE_PATH.getNoValue(), ...
		FILE_PATH.TEMPLATE, FP_0.getCallback(4), ..., ...
		FILE_PATH.ID, FP_0.getCallback(5), ..., ...
		FILE_PATH.LABEL, FILE_PATH.getPropDefault(FILE_PATH.LABEL), ...
		FILE_PATH.NOTES, FILE_PATH.getPropDefault(FILE_PATH.NOTES), ...
		FILE_PATH.TOSTRING, FILE_PATH.getNoValue(), ...
		FILE_PATH.PATH, FP_0.getCallback(9) ... ...
		);
	 
	prop_number = FILE_PATH.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(FILE_PATH.getPropTag(prop));
		switch FILE_PATH.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(FP_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(FP_1.get(prop), FP_0.get(prop)) && ~isa(FP_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(FP_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% FILE_PATH with 2nd callbacks
	FP_2 = FILE_PATH( ...
		FILE_PATH.ELCLASS, FILE_PATH.getNoValue(), ...
		FILE_PATH.NAME, FILE_PATH.getNoValue(), ...
		FILE_PATH.DESCRIPTION, FILE_PATH.getNoValue(), ...
		FILE_PATH.TEMPLATE, FP_1.getCallback(4), ..., ...
		FILE_PATH.ID, FP_1.getCallback(5), ..., ...
		FILE_PATH.LABEL, FILE_PATH.getPropDefault(FILE_PATH.LABEL), ...
		FILE_PATH.NOTES, FILE_PATH.getPropDefault(FILE_PATH.NOTES), ...
		FILE_PATH.TOSTRING, FILE_PATH.getNoValue(), ...
		FILE_PATH.PATH, FP_1.getCallback(9) ... ...
		);
	 
	prop_number = FILE_PATH.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(FILE_PATH.getPropTag(prop));
		switch FILE_PATH.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(FP_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(FP_2.get(prop), FP_0.get(prop)) && ~isa(FP_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(FP_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% FILE_PATH with 3rd callbacks
	FP_3 = FILE_PATH( ...
		FILE_PATH.ELCLASS, FILE_PATH.getNoValue(), ...
		FILE_PATH.NAME, FILE_PATH.getNoValue(), ...
		FILE_PATH.DESCRIPTION, FILE_PATH.getNoValue(), ...
		FILE_PATH.TEMPLATE, FP_2.getCallback(4), ..., ...
		FILE_PATH.ID, FP_2.getCallback(5), ..., ...
		FILE_PATH.LABEL, FILE_PATH.getPropDefault(FILE_PATH.LABEL), ...
		FILE_PATH.NOTES, FILE_PATH.getPropDefault(FILE_PATH.NOTES), ...
		FILE_PATH.TOSTRING, FILE_PATH.getNoValue(), ...
		FILE_PATH.PATH, FP_2.getCallback(9) ... ...
		);
	 
	prop_number = FILE_PATH.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(FILE_PATH.getPropTag(prop));
		switch FILE_PATH.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(FP_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(FP_3.get(prop), FP_0.get(prop)) && ~isa(FP_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(FP_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	FP = FILE_PATH();
	 
	FP_copy = FP.copy();
	 
	assert(FP_copy ~= FP, ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(FP_copy, FP), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
		value = FP.getr(prop);
		value_copy = FP_copy.getr(prop);
		switch FILE_PATH.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					'FILE_PATH.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
							'FILE_PATH.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
							'FILE_PATH.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					FP_copy.isLocked(prop) == FP.isLocked(prop), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					'FILE_PATH.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					FP_copy.isChecked(prop) == FP.isChecked(prop), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					'FILE_PATH.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					FP_copy.getPropSeed(prop) == FP.getPropSeed(prop), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					'FILE_PATH.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	FP = FILE_PATH( ...
		FILE_PATH.ELCLASS, FILE_PATH.getNoValue(), ...
		FILE_PATH.NAME, FILE_PATH.getNoValue(), ...
		FILE_PATH.DESCRIPTION, FILE_PATH.getNoValue(), ...
		FILE_PATH.TEMPLATE, FILE_PATH.getPropDefault(FILE_PATH.TEMPLATE), ...
		FILE_PATH.ID, FILE_PATH.getPropDefault(FILE_PATH.ID), ...
		FILE_PATH.LABEL, FILE_PATH.getPropDefault(FILE_PATH.LABEL), ...
		FILE_PATH.NOTES, FILE_PATH.getPropDefault(FILE_PATH.NOTES), ...
		FILE_PATH.TOSTRING, FILE_PATH.getNoValue(), ...
		FILE_PATH.PATH, FILE_PATH.getPropDefault(FILE_PATH.PATH) ...
		);
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
		if FILE_PATH.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':FILE_PATH']);
			% FP.memorize(prop);
			% warning(warning_backup)
		elseif FILE_PATH.getPropCategory(prop) == Category.EVANESCENT && FP.getPropFormat(prop) == Format.HANDLE
			FP.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:FILE_PATH');
			delete(ancestor(FP.get(prop), 'figure'))
			warning(warning_backup)
		else
			FP.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	FP_copy = FP.copy();
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
		value = FP.getr(prop);
		value_copy = FP_copy.getr(prop);
		switch FILE_PATH.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					'FILE_PATH.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
							'FILE_PATH.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
							'FILE_PATH.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						FP_copy.isLocked(prop) == FP.isLocked(prop), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						FP_copy.isChecked(prop) == FP.isChecked(prop), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						FP_copy.getPropSeed(prop) == FP.getPropSeed(prop), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	FP_0 = FILE_PATH( ...
		FILE_PATH.ELCLASS, FILE_PATH.getNoValue(), ...
		FILE_PATH.NAME, FILE_PATH.getNoValue(), ...
		FILE_PATH.DESCRIPTION, FILE_PATH.getNoValue(), ...
		FILE_PATH.TEMPLATE, FILE_PATH.getPropDefault(FILE_PATH.TEMPLATE), ...
		FILE_PATH.ID, FILE_PATH.getPropDefault(FILE_PATH.ID), ...
		FILE_PATH.LABEL, FILE_PATH.getPropDefault(FILE_PATH.LABEL), ...
		FILE_PATH.NOTES, FILE_PATH.getPropDefault(FILE_PATH.NOTES), ...
		FILE_PATH.TOSTRING, FILE_PATH.getNoValue(), ...
		FILE_PATH.PATH, FILE_PATH.getPropDefault(FILE_PATH.PATH) ...
		);
	 
	FP = FILE_PATH( ...
		FILE_PATH.ELCLASS, FILE_PATH.getNoValue(), ...
		FILE_PATH.NAME, FILE_PATH.getNoValue(), ...
		FILE_PATH.DESCRIPTION, FILE_PATH.getNoValue(), ...
		FILE_PATH.TEMPLATE, FP_0.getCallback(4), ..., ...
		FILE_PATH.ID, FP_0.getCallback(5), ..., ...
		FILE_PATH.LABEL, FILE_PATH.getPropDefault(FILE_PATH.LABEL), ...
		FILE_PATH.NOTES, FILE_PATH.getPropDefault(FILE_PATH.NOTES), ...
		FILE_PATH.TOSTRING, FILE_PATH.getNoValue(), ...
		FILE_PATH.PATH, FP_0.getCallback(9) ... ...
		);
	 
	FP_copy = FP.copy();
	FP_0_copy = FP_copy.getr('ID').get('EL');
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
		value = FP.getr(prop);
		value_copy = FP_copy.getr(prop);
		switch FILE_PATH.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					'FILE_PATH.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
							'FILE_PATH.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
							'FILE_PATH.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == FP_0.getCallback(prop), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The callback should be obtained from FILE_PATH.getCallback().' ...
						)
					assert( ...
						value_copy == FP_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The callback should be obtained from FILE_PATH.getCallback().' ...
						)
				end
	 
					assert( ...
						FP_copy.isLocked(prop) == FP.isLocked(prop), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						FP_copy.isChecked(prop) == FP.isChecked(prop), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						FP_copy.getPropSeed(prop) == FP.getPropSeed(prop), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	FP_template = FILE_PATH();
	FP = FILE_PATH('TEMPLATE', FP_template);
	 
	for prop = 1:1:FILE_PATH.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(FILE_PATH.getPropTag(prop));
		switch FILE_PATH.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == FILE_PATH.TEMPLATE
					assert( ...
						isa(FP.getr(prop), 'FILE_PATH'), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH TEMPLATE does not work. FILE_PATH.getr(''TEMPLATE'') should be a FILE_PATH element.' ...
						)
					assert( ...
						isa(FP_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						'FILE_PATH TEMPLATE does not work. FILE_PATH_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(FP.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						['FILE_PATH TEMPLATE does not work. FILE_PATH.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						FP.getr(prop).get('EL') == FP_template && FP.getr(prop).get('PROP') == prop && strcmp(FP.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						['FILE_PATH TEMPLATE does not work. FILE_PATH.getr(' TAG ') should be a Callback to FP_template.' TAG '.'] ...
						)
					assert( ...
						isa(FP_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
						['FILE_PATH TEMPLATE does not work. FILE_PATH_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(FP.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH TEMPLATE does not work. FILE_PATH.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(FP_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
					['FILE_PATH TEMPLATE does not work. FILE_PATH_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	FP = FILE_PATH( ...
		FILE_PATH.ELCLASS, FILE_PATH.getNoValue(), ...
		FILE_PATH.NAME, FILE_PATH.getNoValue(), ...
		FILE_PATH.DESCRIPTION, FILE_PATH.getNoValue(), ...
		FILE_PATH.TEMPLATE, FILE_PATH.getPropDefault(FILE_PATH.TEMPLATE), ...
		FILE_PATH.ID, FILE_PATH.getPropDefault(FILE_PATH.ID), ...
		FILE_PATH.LABEL, FILE_PATH.getPropDefault(FILE_PATH.LABEL), ...
		FILE_PATH.NOTES, FILE_PATH.getPropDefault(FILE_PATH.NOTES), ...
		FILE_PATH.TOSTRING, FILE_PATH.getNoValue(), ...
		FILE_PATH.PATH, FILE_PATH.getPropDefault(FILE_PATH.PATH) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'file_path_to_be_erased.b2'];
	 
	Element.save(FP, filename)
	 
	FP_loaded = Element.load(filename);
	 
	assert( ...
		isequal(FP.copy(), FP_loaded), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.save(FP) and/or FILE_PATH.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	FP = FILE_PATH( ...
		FILE_PATH.ELCLASS, FILE_PATH.getNoValue(), ...
		FILE_PATH.NAME, FILE_PATH.getNoValue(), ...
		FILE_PATH.DESCRIPTION, FILE_PATH.getNoValue(), ...
		FILE_PATH.TEMPLATE, FILE_PATH.getPropDefault(FILE_PATH.TEMPLATE), ...
		FILE_PATH.ID, FILE_PATH.getPropDefault(FILE_PATH.ID), ...
		FILE_PATH.LABEL, FILE_PATH.getPropDefault(FILE_PATH.LABEL), ...
		FILE_PATH.NOTES, FILE_PATH.getPropDefault(FILE_PATH.NOTES), ...
		FILE_PATH.TOSTRING, FILE_PATH.getNoValue(), ...
		FILE_PATH.PATH, FILE_PATH.getPropDefault(FILE_PATH.PATH) ...
		);
	 
	[json, struct, el_list] = encodeJSON(FP);
	[FP_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(FP_dec ~= FP, ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		'FILE_PATH.encodeJSON() or FILE_PATH.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) FILE_PATH.getPropFormat(prop), num2cell(FILE_PATH.getProps())) == Format.HANDLE) && all(cellfun(@(prop) FILE_PATH.getPropFormat(prop), num2cell(FILE_PATH.getProps())) == Format.NET)
		assert(isequal(FP_dec, FP), ...
			[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
			'FILE_PATH.encodeJSON() or FILE_PATH.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':FILE_PATH:' BRAPH2.FAIL_TEST], ...
		[' When testing FILE_PATH no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 13: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

