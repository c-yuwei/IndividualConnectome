%TEST_PDFCONSTRUCTOR

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	pdfc = PDFConstructor();
	 
	% get('ELCLASS')
	if isa(PDFConstructor, 'ConcreteElement')
		assert(strcmp(PDFConstructor().get('ELCLASS'), 'PDFConstructor'), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor().get(''ELCLASS'') should return ''PDFConstructor''.')
	end
	 
	% getBuild()
	assert(PDFConstructor.getBuild() == 1 && PDFConstructor.getBuild() > 0, ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.getBuild() should return the PDFConstructor build number.')
	assert(pdfc.getBuild() == 1 && pdfc.getBuild() > 0 , ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'pdfc.getBuild() should return the PDFConstructor build number.')
	assert(Element.getBuild(pdfc) == 1 && Element.getBuild(pdfc) > 0, ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(pdfc) should return the PDFConstructor build number.')
	assert(Element.getBuild('PDFConstructor') == 1 && Element.getBuild('PDFConstructor') > 0, ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''PDFConstructor'') should return the PDFConstructor build number.')
	 
	% getClass()
	assert(strcmp(PDFConstructor.getClass(), 'PDFConstructor'), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.getClass() should return ''PDFConstructor''.')
	assert(strcmp(pdfc.getClass(), 'PDFConstructor'), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'pdfc.getClass() should return ''PDFConstructor''.')
	assert(strcmp(Element.getClass(pdfc), 'PDFConstructor'), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(pdfc) should return ''PDFConstructor''.')
	assert(strcmp(Element.getClass('PDFConstructor'), 'PDFConstructor'), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''PDFConstructor'') should return ''PDFConstructor''.')
	 
	% getSubclasses()
	assert(isequal(PDFConstructor.getSubclasses(), subclasses('PDFConstructor', [], [], true)), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.getSubclasses() should return the same result as subclasses(''PDFConstructor'', [], [], true).')
	assert(isequal(pdfc.getSubclasses(), subclasses('PDFConstructor', [], [], true)), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''PDFConstructor'', [], [], true).')
	assert(isequal(Element.getSubclasses(pdfc), subclasses('PDFConstructor', [], [], true)), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(pdfc) should return the same result as subclasses(''PDFConstructor'', [], [], true).')
	assert(isequal(Element.getSubclasses('PDFConstructor'), subclasses('PDFConstructor', [], [], true)), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''PDFConstructor'') should return the same result as subclasses(''PDFConstructor'', [], [], true).')
	 
	% getProps()
	assert(isempty(PDFConstructor.getProps()) || isequal(PDFConstructor.getProps(), 1:1:length(PDFConstructor.getProps())), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.getProps() should return a row vector [1:1:N].')
	assert(isempty(PDFConstructor.getProps()) || isequal(pdfc.getProps(), 1:1:length(PDFConstructor.getProps())), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'pdfc.getProps() should return a row vector [1:1:N].')
	assert(isempty(PDFConstructor.getProps()) || isequal(Element.getProps(pdfc), 1:1:length(PDFConstructor.getProps())), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(pdfc) should return a row vector [1:1:N].')
	assert(isempty(PDFConstructor.getProps()) || isequal(Element.getProps('PDFConstructor'), 1:1:length(PDFConstructor.getProps())), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''PDFConstructor'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) PDFConstructor.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(PDFConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PDFConstructor.getProps())), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.getProps(category) does not work.')
	tmp = cellfun(@(category) pdfc.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(PDFConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PDFConstructor.getProps())), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'pdfc.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(pdfc, category), categories, 'UniformOutput', false);
	assert(isempty(PDFConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PDFConstructor.getProps())), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(pdfc, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('PDFConstructor', category), categories, 'UniformOutput', false);
	assert(isempty(PDFConstructor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(PDFConstructor.getProps())), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''PDFConstructor'', category) does not work.')
	 
	% getPropNumber()
	assert(PDFConstructor.getPropNumber() == length(PDFConstructor.getProps()), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.getPropNumber() should return the number of properties.')
	assert(pdfc.getPropNumber() == length(PDFConstructor.getProps()), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'pdfc.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(pdfc) == length(PDFConstructor.getProps()), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(pdfc) should return the number of properties.')
	assert(Element.getPropNumber('PDFConstructor') == length(PDFConstructor.getProps()), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''PDFConstructor'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) PDFConstructor.getPropNumber(category), categories)) == PDFConstructor.getPropNumber(), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) pdfc.getPropNumber(category), categories)) == PDFConstructor.getPropNumber(), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'pdfc.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(pdfc, category), categories)) == PDFConstructor.getPropNumber(), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(pdfc, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('PDFConstructor', category), categories)) == PDFConstructor.getPropNumber(), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''PDFConstructor'', category) does not work.')
	 
	% existsProp(prop)
	assert(~PDFConstructor.existsProp(NaN), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.existsProp(prop) does not work.')
	assert(~pdfc.existsProp(NaN), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'pdfc.existsProp(prop) does not work.')
	assert(~Element.existsProp(pdfc, NaN), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(pdfc, prop) does not work.')
	assert(~Element.existsProp('PDFConstructor', NaN), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''PDFConstructor'', prop) does not work.')
	 
	assert_with_error('PDFConstructor.existsProp(NaN)', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], pdfc)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], pdfc)
	assert_with_error('Element.existsProp(''PDFConstructor'', NaN)', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
		assert(PDFConstructor.existsProp(prop), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.existsProp(prop) does not work.')
		assert(pdfc.existsProp(prop), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.existsProp(prop) does not work.')
		assert(Element.existsProp(pdfc, prop), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(pdfc, prop) does not work.')
		assert(Element.existsProp('PDFConstructor', prop), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''PDFConstructor'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~PDFConstructor.existsTag(''), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.existsTag(tag) does not work.')
	assert(~pdfc.existsTag(''), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'pdfc.existsTag(tag) does not work.')
	assert(~Element.existsTag(pdfc, ''), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(pdfc, tag) does not work.')
	assert(~Element.existsTag('PDFConstructor', ''), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''PDFConstructor'', tag) does not work.')
	 
	assert_with_error('PDFConstructor.existsTag('''')', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], pdfc)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], pdfc)
	assert_with_error('Element.existsTag(''PDFConstructor'', '''')', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
		tag = pdfc.getPropTag(prop);
		assert(PDFConstructor.existsTag(tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.existsTag(tag) does not work.')
		assert(pdfc.existsTag(tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.existsTag(tag) does not work.')
		assert(Element.existsTag(pdfc, tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(pdfc, tga) does not work.')
		assert(Element.existsTag('PDFConstructor', tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''PDFConstructor'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:PDFConstructor.getPropNumber()
		assert(PDFConstructor.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.getPropProp(prop) does not work.')
		assert(pdfc.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.getPropProp(prop) does not work.')
		assert(Element.getPropProp(pdfc, prop) == prop, ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(pdfc, prop) does not work.')
		assert(Element.getPropProp('PDFConstructor', prop) == prop, ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''PDFConstructor'', prop) does not work.')
	 
		tag = pdfc.getPropTag(prop);
		assert(PDFConstructor.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.getPropProp(tag) does not work.')
		assert(pdfc.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.getPropProp(tag) does not work.')
		assert(Element.getPropProp(pdfc, tag) == prop, ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(pdfc, tag) does not work.')
		assert(Element.getPropProp('PDFConstructor', prop) == prop, ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''PDFConstructor'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:PDFConstructor.getPropNumber()
		tag = pdfc.getPropTag(prop);
	 
		assert(strcmp(PDFConstructor.getPropTag(prop), tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.getPropTag(prop) does not work.')
		assert(strcmp(pdfc.getPropTag(prop), tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(pdfc, prop), tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(pdfc, prop) does not work.')
		assert(strcmp(Element.getPropTag('PDFConstructor', prop), tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''PDFConstructor'', prop) does not work.')
	 
		assert(strcmp(PDFConstructor.getPropTag(tag), tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.getPropTag(tag) does not work.')
		assert(strcmp(pdfc.getPropTag(tag), tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(pdfc, tag), tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(pdfc, tag) does not work.')
		assert(strcmp(Element.getPropTag('PDFConstructor', prop), tag), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''PDFConstructor'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:PDFConstructor.getPropNumber()
		tag = pdfc.getPropTag(prop);
	 
		assert(Category.existsCategory(PDFConstructor.getPropCategory(prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(pdfc.getPropCategory(prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pdfc, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(pdfc, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pdfc, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''PDFConstructor'', prop) does not work.')
	 
		assert(Category.existsCategory(PDFConstructor.getPropCategory(tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(pdfc.getPropCategory(tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pdfc, tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(pdfc, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(pdfc, tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''PDFConstructor'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:PDFConstructor.getPropNumber()
		tag = pdfc.getPropTag(prop);
	 
		assert(Format.existsFormat(PDFConstructor.getPropFormat(prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(pdfc.getPropFormat(prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pdfc, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(pdfc, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pdfc, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''PDFConstructor'', prop) does not work.')
	 
		assert(Format.existsFormat(PDFConstructor.getPropFormat(tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(pdfc.getPropFormat(tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pdfc, tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(pdfc, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(pdfc, tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''PDFConstructor'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:PDFConstructor.getPropNumber()
		tag = pdfc.getPropTag(prop);
	 
		assert(ischar(PDFConstructor.getPropDescription(prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.getPropDescription(prop) does not work.')
		assert(ischar(pdfc.getPropDescription(prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(pdfc, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(pdfc, prop) does not work.')
		assert(ischar(Element.getPropDescription(pdfc, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''PDFConstructor'', prop) does not work.')
	 
		assert(ischar(PDFConstructor.getPropDescription(tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.getPropDescription(tag) does not work.')
		assert(ischar(pdfc.getPropDescription(tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(pdfc, tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(pdfc, tag) does not work.')
		assert(ischar(Element.getPropDescription(pdfc, tag)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''PDFConstructor'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:PDFConstructor.getPropNumber()
		tag = pdfc.getPropTag(prop);
	 
		settings = PDFConstructor.getPropSettings(prop);
		settings = pdfc.getPropSettings(prop);
		settings = Element.getPropSettings(pdfc, prop);
		settings = Element.getPropSettings('PDFConstructor', prop);
	 
		settings = PDFConstructor.getPropSettings(tag);
		settings = pdfc.getPropSettings(tag);
		settings = Element.getPropSettings(pdfc, tag);
		settings = Element.getPropSettings('PDFConstructor', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:PDFConstructor.getPropNumber()
		tag = pdfc.getPropTag(prop);
	 
		default = PDFConstructor.getPropDefault(prop);
		default = pdfc.getPropDefault(prop);
		default = Element.getPropDefault(pdfc, prop);
		default = Element.getPropDefault('PDFConstructor', prop);
	 
		default = PDFConstructor.getPropDefault(tag);
		default = pdfc.getPropDefault(tag);
		default = Element.getPropDefault(pdfc, tag);
		default = Element.getPropDefault('PDFConstructor', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:PDFConstructor.getPropNumber()
		tag = pdfc.getPropTag(prop);
	 
		conditioned_default = PDFConstructor.getPropDefaultConditioned(prop);
		conditioned_default = pdfc.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(pdfc, prop);
		conditioned_default = Element.getPropDefaultConditioned('PDFConstructor', prop);
	 
		conditioned_default = PDFConstructor.getPropDefaultConditioned(tag);
		conditioned_default = pdfc.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(pdfc, tag);
		conditioned_default = Element.getPropDefaultConditioned('PDFConstructor', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:PDFConstructor.getPropNumber()
		tag = pdfc.getPropTag(prop);
	 
		assert(~PDFConstructor.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.checkProp(prop, value) does not work.')
		assert(~pdfc.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(pdfc, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pdfc, prop, value) does not work.')
		assert(~Element.checkProp('PDFConstructor', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PDFConstructor'', prop, value) does not work.')
	 
		assert_with_error('PDFConstructor.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], prop, pdfc)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], prop, pdfc)
		assert_with_error('Element.checkProp(''PDFConstructor'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~PDFConstructor.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.checkProp(tag, value) does not work.')
		assert(~pdfc.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(pdfc, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pdfc, tag, value) does not work.')
		assert(~Element.checkProp('PDFConstructor', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PDFConstructor'', tag, value) does not work.')
	 
		assert_with_error('PDFConstructor.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], tag, pdfc)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], tag, pdfc)
		assert_with_error('Element.checkProp(''PDFConstructor'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':PDFConstructor:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(PDFConstructor.checkProp(prop, Element.getPropDefaultConditioned(PDFConstructor, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.checkProp(prop, <conditioned default value>) does not work.')
		assert(pdfc.checkProp(prop, Element.getPropDefaultConditioned(PDFConstructor, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(pdfc, prop, Element.getPropDefaultConditioned(PDFConstructor, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pdfc, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('PDFConstructor', prop, Element.getPropDefaultConditioned(PDFConstructor, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PDFConstructor'', prop, <conditioned default value>) does not work.')
	 
		assert(PDFConstructor.checkProp(tag, Element.getPropDefaultConditioned(PDFConstructor, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.checkProp(tag, <conditioned default value>) does not work.')
		assert(pdfc.checkProp(tag, Element.getPropDefaultConditioned(PDFConstructor, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'pdfc.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(pdfc, tag, Element.getPropDefaultConditioned(PDFConstructor, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(pdfc, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('PDFConstructor', tag, Element.getPropDefaultConditioned(PDFConstructor, prop)), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''PDFConstructor'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pdfc = PDFConstructor( ...
		PDFConstructor.ELCLASS, PDFConstructor.getNoValue(), ...
		PDFConstructor.NAME, PDFConstructor.getNoValue(), ...
		PDFConstructor.DESCRIPTION, PDFConstructor.getNoValue(), ...
		PDFConstructor.TEMPLATE, PDFConstructor.getPropDefault(PDFConstructor.TEMPLATE), ...
		PDFConstructor.ID, PDFConstructor.getPropDefault(PDFConstructor.ID), ...
		PDFConstructor.LABEL, PDFConstructor.getPropDefault(PDFConstructor.LABEL), ...
		PDFConstructor.NOTES, PDFConstructor.getPropDefault(PDFConstructor.NOTES), ...
		PDFConstructor.TOSTRING, PDFConstructor.getNoValue(), ...
		PDFConstructor.REF_REGION_LIST, PDFConstructor.getPropDefault(PDFConstructor.REF_REGION_LIST), ...
		PDFConstructor.ATLAS_KIND, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_KIND), ...
		PDFConstructor.BA, PDFConstructor.getPropDefault(PDFConstructor.BA), ...
		PDFConstructor.ATLAS_INDEX, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_INDEX), ...
		PDFConstructor.ATLAS_PATH_DICT, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_PATH_DICT), ...
		PDFConstructor.GR_PET, PDFConstructor.getPropDefault(PDFConstructor.GR_PET), ...
		PDFConstructor.GR_T1, PDFConstructor.getPropDefault(PDFConstructor.GR_T1), ...
		PDFConstructor.SUVR_REGION_SELECTION, PDFConstructor.getPropDefault(PDFConstructor.SUVR_REGION_SELECTION), ...
		PDFConstructor.CALC_SUBJ_PDF, PDFConstructor.getNoValue(), ...
		PDFConstructor.GR, PDFConstructor.getNoValue(), ...
		PDFConstructor.WAITBAR, PDFConstructor.getPropDefault(PDFConstructor.WAITBAR) ...
		);
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(PDFConstructor.getPropTag(prop));
		switch PDFConstructor.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					pdfc.getr(prop) == PDFConstructor.getNoValue(), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' PDFConstructor.getCategoryName(PDFConstructor.getPropCategory(prop)) ', PDFConstructor.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PDFConstructor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					pdfc.getr(TAG) == PDFConstructor.getNoValue(), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' PDFConstructor.getCategoryName(PDFConstructor.getPropCategory(prop)) ', PDFConstructor.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PDFConstructor.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(pdfc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(pdfc.getPropSettings(prop))
					assert( ...
						pdfc.checkFormat(pdfc.getPropFormat(prop), pdfc.get(prop)), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						['PDFConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						pdfc.checkFormat(pdfc.getPropFormat(prop), pdfc.get(prop), pdfc.getPropSettings(prop)), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						['PDFConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					pdfc.getr(prop) == PDFConstructor.getNoValue(), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' PDFConstructor.getCategoryName(PDFConstructor.getPropCategory(prop)) ', PDFConstructor.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PDFConstructor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					pdfc.getr(TAG) == PDFConstructor.getNoValue(), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['Being a ' PDFConstructor.getCategoryName(PDFConstructor.getPropCategory(prop)) ', PDFConstructor.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in PDFConstructor.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':PDFConstructor']);
				assert( ...
					~isa(pdfc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(pdfc.getPropSettings(prop))
					assert( ...
						pdfc.checkFormat(pdfc.getPropFormat(prop), pdfc.get(prop)), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						['PDFConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						pdfc.checkFormat(pdfc.getPropFormat(prop), pdfc.get(prop), pdfc.getPropSettings(prop)), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						['PDFConstructor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(pdfc.getr(prop), PDFConstructor.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by PDFConstructor.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in PDFConstructor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(pdfc.getr(TAG), PDFConstructor.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' TAG ') must be inizialized to its default value ' ...
					'given by PDFConstructor.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in PDFConstructor.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pdfc = PDFConstructor( ...
		PDFConstructor.ELCLASS, PDFConstructor.getNoValue(), ...
		PDFConstructor.NAME, PDFConstructor.getNoValue(), ...
		PDFConstructor.DESCRIPTION, PDFConstructor.getNoValue(), ...
		PDFConstructor.TEMPLATE, PDFConstructor.getPropDefault(PDFConstructor.TEMPLATE), ...
		PDFConstructor.ID, PDFConstructor.getPropDefault(PDFConstructor.ID), ...
		PDFConstructor.LABEL, PDFConstructor.getPropDefault(PDFConstructor.LABEL), ...
		PDFConstructor.NOTES, PDFConstructor.getPropDefault(PDFConstructor.NOTES), ...
		PDFConstructor.TOSTRING, PDFConstructor.getNoValue(), ...
		PDFConstructor.REF_REGION_LIST, PDFConstructor.getPropDefault(PDFConstructor.REF_REGION_LIST), ...
		PDFConstructor.ATLAS_KIND, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_KIND), ...
		PDFConstructor.BA, PDFConstructor.getPropDefault(PDFConstructor.BA), ...
		PDFConstructor.ATLAS_INDEX, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_INDEX), ...
		PDFConstructor.ATLAS_PATH_DICT, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_PATH_DICT), ...
		PDFConstructor.GR_PET, PDFConstructor.getPropDefault(PDFConstructor.GR_PET), ...
		PDFConstructor.GR_T1, PDFConstructor.getPropDefault(PDFConstructor.GR_T1), ...
		PDFConstructor.SUVR_REGION_SELECTION, PDFConstructor.getPropDefault(PDFConstructor.SUVR_REGION_SELECTION), ...
		PDFConstructor.CALC_SUBJ_PDF, PDFConstructor.getNoValue(), ...
		PDFConstructor.GR, PDFConstructor.getNoValue(), ...
		PDFConstructor.WAITBAR, PDFConstructor.getPropDefault(PDFConstructor.WAITBAR) ...
		);
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(PDFConstructor.getPropTag(prop));
		switch PDFConstructor.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(pdfc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(pdfc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(pdfc.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(pdfc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					pdfc.checkFormat(pdfc.getPropFormat(prop), pdfc.getr(prop),pdfc.getPropSettings(prop)), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':PDFConstructor']);
				assert( ...
					~isa(pdfc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(pdfc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':PDFConstructor']);
	% 			assert( ...
	% 				~isa(pdfc.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
	% 				['PDFConstructor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(pdfc.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
	% 				['PDFConstructor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				pdfc.checkFormat(pdfc.getPropFormat(prop), pdfc.getr(prop),pdfc.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
	% 				['PDFConstructor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':PDFConstructor']);
				assert( ...
					~isa(pdfc.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(pdfc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(pdfc.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(pdfc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					pdfc.checkFormat(pdfc.getPropFormat(prop), pdfc.getr(prop),pdfc.getPropSettings(prop)), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if pdfc.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:PDFConstructor');
					delete(ancestor(pdfc.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(PDFConstructor.getProps(Category.RESULT))
		for prop = 1:1:PDFConstructor.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch PDFConstructor.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						pdfc.isLocked(prop), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						['PDFConstructor.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~pdfc.isLocked(prop), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						['PDFConstructor.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pdfc = PDFConstructor();
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
		TAG = upper(PDFConstructor.getPropTag(prop));
		assert( ...
			~pdfc.isLocked(prop), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			['PDFConstructor.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~pdfc.isLocked(TAG), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			['PDFConstructor.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	pdfc.lock()
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
		switch PDFConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					pdfc.isLocked(prop), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~pdfc.isLocked(prop), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pdfc = PDFConstructor();
	 
	warning_backup = warning('off', 'BRAPH2:PDFConstructor');
	for prop = 1:1:PDFConstructor.getPropNumber()
		pdfc.lock(prop)
		switch PDFConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					pdfc.isLocked(prop), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~pdfc.isLocked(prop), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pdfc = PDFConstructor();
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
		TAG = upper(PDFConstructor.getPropTag(prop));
		assert( ...
			pdfc.isChecked(prop), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			['PDFConstructor.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			pdfc.isChecked(TAG), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			['PDFConstructor.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	pdfc.unchecked()
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
		assert( ...
			~pdfc.isChecked(prop), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			['PDFConstructor.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	pdfc.checked()
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
		assert( ...
			pdfc.isChecked(prop), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			['PDFConstructor.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic PDFConstructor
	pdfc_0 = PDFConstructor( ...
		PDFConstructor.ELCLASS, PDFConstructor.getNoValue(), ...
		PDFConstructor.NAME, PDFConstructor.getNoValue(), ...
		PDFConstructor.DESCRIPTION, PDFConstructor.getNoValue(), ...
		PDFConstructor.TEMPLATE, PDFConstructor.getPropDefault(PDFConstructor.TEMPLATE), ...
		PDFConstructor.ID, PDFConstructor.getPropDefault(PDFConstructor.ID), ...
		PDFConstructor.LABEL, PDFConstructor.getPropDefault(PDFConstructor.LABEL), ...
		PDFConstructor.NOTES, PDFConstructor.getPropDefault(PDFConstructor.NOTES), ...
		PDFConstructor.TOSTRING, PDFConstructor.getNoValue(), ...
		PDFConstructor.REF_REGION_LIST, PDFConstructor.getPropDefault(PDFConstructor.REF_REGION_LIST), ...
		PDFConstructor.ATLAS_KIND, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_KIND), ...
		PDFConstructor.BA, PDFConstructor.getPropDefault(PDFConstructor.BA), ...
		PDFConstructor.ATLAS_INDEX, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_INDEX), ...
		PDFConstructor.ATLAS_PATH_DICT, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_PATH_DICT), ...
		PDFConstructor.GR_PET, PDFConstructor.getPropDefault(PDFConstructor.GR_PET), ...
		PDFConstructor.GR_T1, PDFConstructor.getPropDefault(PDFConstructor.GR_T1), ...
		PDFConstructor.SUVR_REGION_SELECTION, PDFConstructor.getPropDefault(PDFConstructor.SUVR_REGION_SELECTION), ...
		PDFConstructor.CALC_SUBJ_PDF, PDFConstructor.getNoValue(), ...
		PDFConstructor.GR, PDFConstructor.getNoValue(), ...
		PDFConstructor.WAITBAR, PDFConstructor.getPropDefault(PDFConstructor.WAITBAR) ...
		);
	 
	% PDFConstructor with 1st callbacks
	pdfc_1 = PDFConstructor( ...
		PDFConstructor.ELCLASS, PDFConstructor.getNoValue(), ...
		PDFConstructor.NAME, PDFConstructor.getNoValue(), ...
		PDFConstructor.DESCRIPTION, PDFConstructor.getNoValue(), ...
		PDFConstructor.TEMPLATE, pdfc_0.getCallback(4), ..., ...
		PDFConstructor.ID, pdfc_0.getCallback(5), ..., ...
		PDFConstructor.LABEL, PDFConstructor.getPropDefault(PDFConstructor.LABEL), ...
		PDFConstructor.NOTES, PDFConstructor.getPropDefault(PDFConstructor.NOTES), ...
		PDFConstructor.TOSTRING, PDFConstructor.getNoValue(), ...
		PDFConstructor.REF_REGION_LIST, pdfc_0.getCallback(9), ..., ...
		PDFConstructor.ATLAS_KIND, pdfc_0.getCallback(10), ..., ...
		PDFConstructor.BA, pdfc_0.getCallback(11), ..., ...
		PDFConstructor.ATLAS_INDEX, pdfc_0.getCallback(12), ..., ...
		PDFConstructor.ATLAS_PATH_DICT, pdfc_0.getCallback(13), ..., ...
		PDFConstructor.GR_PET, pdfc_0.getCallback(14), ..., ...
		PDFConstructor.GR_T1, pdfc_0.getCallback(15), ..., ...
		PDFConstructor.SUVR_REGION_SELECTION, pdfc_0.getCallback(16), ..., ...
		PDFConstructor.CALC_SUBJ_PDF, PDFConstructor.getNoValue(), ...
		PDFConstructor.GR, PDFConstructor.getNoValue(), ...
		PDFConstructor.WAITBAR, pdfc_0.getCallback(19) ... ...
		);
	 
	prop_number = PDFConstructor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PDFConstructor.getPropTag(prop));
		switch PDFConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pdfc_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pdfc_1.get(prop), pdfc_0.get(prop)) && ~isa(pdfc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pdfc_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% PDFConstructor with 2nd callbacks
	pdfc_2 = PDFConstructor( ...
		PDFConstructor.ELCLASS, PDFConstructor.getNoValue(), ...
		PDFConstructor.NAME, PDFConstructor.getNoValue(), ...
		PDFConstructor.DESCRIPTION, PDFConstructor.getNoValue(), ...
		PDFConstructor.TEMPLATE, pdfc_1.getCallback(4), ..., ...
		PDFConstructor.ID, pdfc_1.getCallback(5), ..., ...
		PDFConstructor.LABEL, PDFConstructor.getPropDefault(PDFConstructor.LABEL), ...
		PDFConstructor.NOTES, PDFConstructor.getPropDefault(PDFConstructor.NOTES), ...
		PDFConstructor.TOSTRING, PDFConstructor.getNoValue(), ...
		PDFConstructor.REF_REGION_LIST, pdfc_1.getCallback(9), ..., ...
		PDFConstructor.ATLAS_KIND, pdfc_1.getCallback(10), ..., ...
		PDFConstructor.BA, pdfc_1.getCallback(11), ..., ...
		PDFConstructor.ATLAS_INDEX, pdfc_1.getCallback(12), ..., ...
		PDFConstructor.ATLAS_PATH_DICT, pdfc_1.getCallback(13), ..., ...
		PDFConstructor.GR_PET, pdfc_1.getCallback(14), ..., ...
		PDFConstructor.GR_T1, pdfc_1.getCallback(15), ..., ...
		PDFConstructor.SUVR_REGION_SELECTION, pdfc_1.getCallback(16), ..., ...
		PDFConstructor.CALC_SUBJ_PDF, PDFConstructor.getNoValue(), ...
		PDFConstructor.GR, PDFConstructor.getNoValue(), ...
		PDFConstructor.WAITBAR, pdfc_1.getCallback(19) ... ...
		);
	 
	prop_number = PDFConstructor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PDFConstructor.getPropTag(prop));
		switch PDFConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pdfc_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pdfc_2.get(prop), pdfc_0.get(prop)) && ~isa(pdfc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pdfc_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% PDFConstructor with 3rd callbacks
	pdfc_3 = PDFConstructor( ...
		PDFConstructor.ELCLASS, PDFConstructor.getNoValue(), ...
		PDFConstructor.NAME, PDFConstructor.getNoValue(), ...
		PDFConstructor.DESCRIPTION, PDFConstructor.getNoValue(), ...
		PDFConstructor.TEMPLATE, pdfc_2.getCallback(4), ..., ...
		PDFConstructor.ID, pdfc_2.getCallback(5), ..., ...
		PDFConstructor.LABEL, PDFConstructor.getPropDefault(PDFConstructor.LABEL), ...
		PDFConstructor.NOTES, PDFConstructor.getPropDefault(PDFConstructor.NOTES), ...
		PDFConstructor.TOSTRING, PDFConstructor.getNoValue(), ...
		PDFConstructor.REF_REGION_LIST, pdfc_2.getCallback(9), ..., ...
		PDFConstructor.ATLAS_KIND, pdfc_2.getCallback(10), ..., ...
		PDFConstructor.BA, pdfc_2.getCallback(11), ..., ...
		PDFConstructor.ATLAS_INDEX, pdfc_2.getCallback(12), ..., ...
		PDFConstructor.ATLAS_PATH_DICT, pdfc_2.getCallback(13), ..., ...
		PDFConstructor.GR_PET, pdfc_2.getCallback(14), ..., ...
		PDFConstructor.GR_T1, pdfc_2.getCallback(15), ..., ...
		PDFConstructor.SUVR_REGION_SELECTION, pdfc_2.getCallback(16), ..., ...
		PDFConstructor.CALC_SUBJ_PDF, PDFConstructor.getNoValue(), ...
		PDFConstructor.GR, PDFConstructor.getNoValue(), ...
		PDFConstructor.WAITBAR, pdfc_2.getCallback(19) ... ...
		);
	 
	prop_number = PDFConstructor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(PDFConstructor.getPropTag(prop));
		switch PDFConstructor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(pdfc_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(pdfc_3.get(prop), pdfc_0.get(prop)) && ~isa(pdfc_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(pdfc_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	pdfc = PDFConstructor();
	 
	pdfc_copy = pdfc.copy();
	 
	assert(pdfc_copy ~= pdfc, ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(pdfc_copy, pdfc), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
		value = pdfc.getr(prop);
		value_copy = pdfc_copy.getr(prop);
		switch PDFConstructor.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					'PDFConstructor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
							'PDFConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
							'PDFConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					pdfc_copy.isLocked(prop) == pdfc.isLocked(prop), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					'PDFConstructor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					pdfc_copy.isChecked(prop) == pdfc.isChecked(prop), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					'PDFConstructor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					pdfc_copy.getPropSeed(prop) == pdfc.getPropSeed(prop), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					'PDFConstructor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	pdfc = PDFConstructor( ...
		PDFConstructor.ELCLASS, PDFConstructor.getNoValue(), ...
		PDFConstructor.NAME, PDFConstructor.getNoValue(), ...
		PDFConstructor.DESCRIPTION, PDFConstructor.getNoValue(), ...
		PDFConstructor.TEMPLATE, PDFConstructor.getPropDefault(PDFConstructor.TEMPLATE), ...
		PDFConstructor.ID, PDFConstructor.getPropDefault(PDFConstructor.ID), ...
		PDFConstructor.LABEL, PDFConstructor.getPropDefault(PDFConstructor.LABEL), ...
		PDFConstructor.NOTES, PDFConstructor.getPropDefault(PDFConstructor.NOTES), ...
		PDFConstructor.TOSTRING, PDFConstructor.getNoValue(), ...
		PDFConstructor.REF_REGION_LIST, PDFConstructor.getPropDefault(PDFConstructor.REF_REGION_LIST), ...
		PDFConstructor.ATLAS_KIND, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_KIND), ...
		PDFConstructor.BA, PDFConstructor.getPropDefault(PDFConstructor.BA), ...
		PDFConstructor.ATLAS_INDEX, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_INDEX), ...
		PDFConstructor.ATLAS_PATH_DICT, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_PATH_DICT), ...
		PDFConstructor.GR_PET, PDFConstructor.getPropDefault(PDFConstructor.GR_PET), ...
		PDFConstructor.GR_T1, PDFConstructor.getPropDefault(PDFConstructor.GR_T1), ...
		PDFConstructor.SUVR_REGION_SELECTION, PDFConstructor.getPropDefault(PDFConstructor.SUVR_REGION_SELECTION), ...
		PDFConstructor.CALC_SUBJ_PDF, PDFConstructor.getNoValue(), ...
		PDFConstructor.GR, PDFConstructor.getNoValue(), ...
		PDFConstructor.WAITBAR, PDFConstructor.getPropDefault(PDFConstructor.WAITBAR) ...
		);
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
		if PDFConstructor.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':PDFConstructor']);
			% pdfc.memorize(prop);
			% warning(warning_backup)
		elseif PDFConstructor.getPropCategory(prop) == Category.EVANESCENT && pdfc.getPropFormat(prop) == Format.HANDLE
			pdfc.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:PDFConstructor');
			delete(ancestor(pdfc.get(prop), 'figure'))
			warning(warning_backup)
		else
			pdfc.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	pdfc_copy = pdfc.copy();
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
		value = pdfc.getr(prop);
		value_copy = pdfc_copy.getr(prop);
		switch PDFConstructor.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					'PDFConstructor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
							'PDFConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
							'PDFConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						pdfc_copy.isLocked(prop) == pdfc.isLocked(prop), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pdfc_copy.isChecked(prop) == pdfc.isChecked(prop), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pdfc_copy.getPropSeed(prop) == pdfc.getPropSeed(prop), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	pdfc_0 = PDFConstructor( ...
		PDFConstructor.ELCLASS, PDFConstructor.getNoValue(), ...
		PDFConstructor.NAME, PDFConstructor.getNoValue(), ...
		PDFConstructor.DESCRIPTION, PDFConstructor.getNoValue(), ...
		PDFConstructor.TEMPLATE, PDFConstructor.getPropDefault(PDFConstructor.TEMPLATE), ...
		PDFConstructor.ID, PDFConstructor.getPropDefault(PDFConstructor.ID), ...
		PDFConstructor.LABEL, PDFConstructor.getPropDefault(PDFConstructor.LABEL), ...
		PDFConstructor.NOTES, PDFConstructor.getPropDefault(PDFConstructor.NOTES), ...
		PDFConstructor.TOSTRING, PDFConstructor.getNoValue(), ...
		PDFConstructor.REF_REGION_LIST, PDFConstructor.getPropDefault(PDFConstructor.REF_REGION_LIST), ...
		PDFConstructor.ATLAS_KIND, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_KIND), ...
		PDFConstructor.BA, PDFConstructor.getPropDefault(PDFConstructor.BA), ...
		PDFConstructor.ATLAS_INDEX, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_INDEX), ...
		PDFConstructor.ATLAS_PATH_DICT, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_PATH_DICT), ...
		PDFConstructor.GR_PET, PDFConstructor.getPropDefault(PDFConstructor.GR_PET), ...
		PDFConstructor.GR_T1, PDFConstructor.getPropDefault(PDFConstructor.GR_T1), ...
		PDFConstructor.SUVR_REGION_SELECTION, PDFConstructor.getPropDefault(PDFConstructor.SUVR_REGION_SELECTION), ...
		PDFConstructor.CALC_SUBJ_PDF, PDFConstructor.getNoValue(), ...
		PDFConstructor.GR, PDFConstructor.getNoValue(), ...
		PDFConstructor.WAITBAR, PDFConstructor.getPropDefault(PDFConstructor.WAITBAR) ...
		);
	 
	pdfc = PDFConstructor( ...
		PDFConstructor.ELCLASS, PDFConstructor.getNoValue(), ...
		PDFConstructor.NAME, PDFConstructor.getNoValue(), ...
		PDFConstructor.DESCRIPTION, PDFConstructor.getNoValue(), ...
		PDFConstructor.TEMPLATE, pdfc_0.getCallback(4), ..., ...
		PDFConstructor.ID, pdfc_0.getCallback(5), ..., ...
		PDFConstructor.LABEL, PDFConstructor.getPropDefault(PDFConstructor.LABEL), ...
		PDFConstructor.NOTES, PDFConstructor.getPropDefault(PDFConstructor.NOTES), ...
		PDFConstructor.TOSTRING, PDFConstructor.getNoValue(), ...
		PDFConstructor.REF_REGION_LIST, pdfc_0.getCallback(9), ..., ...
		PDFConstructor.ATLAS_KIND, pdfc_0.getCallback(10), ..., ...
		PDFConstructor.BA, pdfc_0.getCallback(11), ..., ...
		PDFConstructor.ATLAS_INDEX, pdfc_0.getCallback(12), ..., ...
		PDFConstructor.ATLAS_PATH_DICT, pdfc_0.getCallback(13), ..., ...
		PDFConstructor.GR_PET, pdfc_0.getCallback(14), ..., ...
		PDFConstructor.GR_T1, pdfc_0.getCallback(15), ..., ...
		PDFConstructor.SUVR_REGION_SELECTION, pdfc_0.getCallback(16), ..., ...
		PDFConstructor.CALC_SUBJ_PDF, PDFConstructor.getNoValue(), ...
		PDFConstructor.GR, PDFConstructor.getNoValue(), ...
		PDFConstructor.WAITBAR, pdfc_0.getCallback(19) ... ...
		);
	 
	pdfc_copy = pdfc.copy();
	pdfc_0_copy = pdfc_copy.getr('ID').get('EL');
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
		value = pdfc.getr(prop);
		value_copy = pdfc_copy.getr(prop);
		switch PDFConstructor.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					'PDFConstructor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
							'PDFConstructor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
							'PDFConstructor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == pdfc_0.getCallback(prop), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The callback should be obtained from PDFConstructor.getCallback().' ...
						)
					assert( ...
						value_copy == pdfc_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The callback should be obtained from PDFConstructor.getCallback().' ...
						)
				end
	 
					assert( ...
						pdfc_copy.isLocked(prop) == pdfc.isLocked(prop), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pdfc_copy.isChecked(prop) == pdfc.isChecked(prop), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						pdfc_copy.getPropSeed(prop) == pdfc.getPropSeed(prop), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pdfc_template = PDFConstructor();
	pdfc = PDFConstructor('TEMPLATE', pdfc_template);
	 
	for prop = 1:1:PDFConstructor.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(PDFConstructor.getPropTag(prop));
		switch PDFConstructor.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == PDFConstructor.TEMPLATE
					assert( ...
						isa(pdfc.getr(prop), 'PDFConstructor'), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor TEMPLATE does not work. PDFConstructor.getr(''TEMPLATE'') should be a PDFConstructor element.' ...
						)
					assert( ...
						isa(pdfc_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						'PDFConstructor TEMPLATE does not work. PDFConstructor_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(pdfc.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						['PDFConstructor TEMPLATE does not work. PDFConstructor.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						pdfc.getr(prop).get('EL') == pdfc_template && pdfc.getr(prop).get('PROP') == prop && strcmp(pdfc.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						['PDFConstructor TEMPLATE does not work. PDFConstructor.getr(' TAG ') should be a Callback to pdfc_template.' TAG '.'] ...
						)
					assert( ...
						isa(pdfc_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
						['PDFConstructor TEMPLATE does not work. PDFConstructor_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(pdfc.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor TEMPLATE does not work. PDFConstructor.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(pdfc_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
					['PDFConstructor TEMPLATE does not work. PDFConstructor_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pdfc = PDFConstructor( ...
		PDFConstructor.ELCLASS, PDFConstructor.getNoValue(), ...
		PDFConstructor.NAME, PDFConstructor.getNoValue(), ...
		PDFConstructor.DESCRIPTION, PDFConstructor.getNoValue(), ...
		PDFConstructor.TEMPLATE, PDFConstructor.getPropDefault(PDFConstructor.TEMPLATE), ...
		PDFConstructor.ID, PDFConstructor.getPropDefault(PDFConstructor.ID), ...
		PDFConstructor.LABEL, PDFConstructor.getPropDefault(PDFConstructor.LABEL), ...
		PDFConstructor.NOTES, PDFConstructor.getPropDefault(PDFConstructor.NOTES), ...
		PDFConstructor.TOSTRING, PDFConstructor.getNoValue(), ...
		PDFConstructor.REF_REGION_LIST, PDFConstructor.getPropDefault(PDFConstructor.REF_REGION_LIST), ...
		PDFConstructor.ATLAS_KIND, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_KIND), ...
		PDFConstructor.BA, PDFConstructor.getPropDefault(PDFConstructor.BA), ...
		PDFConstructor.ATLAS_INDEX, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_INDEX), ...
		PDFConstructor.ATLAS_PATH_DICT, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_PATH_DICT), ...
		PDFConstructor.GR_PET, PDFConstructor.getPropDefault(PDFConstructor.GR_PET), ...
		PDFConstructor.GR_T1, PDFConstructor.getPropDefault(PDFConstructor.GR_T1), ...
		PDFConstructor.SUVR_REGION_SELECTION, PDFConstructor.getPropDefault(PDFConstructor.SUVR_REGION_SELECTION), ...
		PDFConstructor.CALC_SUBJ_PDF, PDFConstructor.getNoValue(), ...
		PDFConstructor.GR, PDFConstructor.getNoValue(), ...
		PDFConstructor.WAITBAR, PDFConstructor.getPropDefault(PDFConstructor.WAITBAR) ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'pdfconstructor_to_be_erased.b2'];
	 
	Element.save(pdfc, filename)
	 
	pdfc_loaded = Element.load(filename);
	 
	assert( ...
		isequal(pdfc.copy(), pdfc_loaded), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.save(pdfc) and/or PDFConstructor.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	pdfc = PDFConstructor( ...
		PDFConstructor.ELCLASS, PDFConstructor.getNoValue(), ...
		PDFConstructor.NAME, PDFConstructor.getNoValue(), ...
		PDFConstructor.DESCRIPTION, PDFConstructor.getNoValue(), ...
		PDFConstructor.TEMPLATE, PDFConstructor.getPropDefault(PDFConstructor.TEMPLATE), ...
		PDFConstructor.ID, PDFConstructor.getPropDefault(PDFConstructor.ID), ...
		PDFConstructor.LABEL, PDFConstructor.getPropDefault(PDFConstructor.LABEL), ...
		PDFConstructor.NOTES, PDFConstructor.getPropDefault(PDFConstructor.NOTES), ...
		PDFConstructor.TOSTRING, PDFConstructor.getNoValue(), ...
		PDFConstructor.REF_REGION_LIST, PDFConstructor.getPropDefault(PDFConstructor.REF_REGION_LIST), ...
		PDFConstructor.ATLAS_KIND, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_KIND), ...
		PDFConstructor.BA, PDFConstructor.getPropDefault(PDFConstructor.BA), ...
		PDFConstructor.ATLAS_INDEX, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_INDEX), ...
		PDFConstructor.ATLAS_PATH_DICT, PDFConstructor.getPropDefault(PDFConstructor.ATLAS_PATH_DICT), ...
		PDFConstructor.GR_PET, PDFConstructor.getPropDefault(PDFConstructor.GR_PET), ...
		PDFConstructor.GR_T1, PDFConstructor.getPropDefault(PDFConstructor.GR_T1), ...
		PDFConstructor.SUVR_REGION_SELECTION, PDFConstructor.getPropDefault(PDFConstructor.SUVR_REGION_SELECTION), ...
		PDFConstructor.CALC_SUBJ_PDF, PDFConstructor.getNoValue(), ...
		PDFConstructor.GR, PDFConstructor.getNoValue(), ...
		PDFConstructor.WAITBAR, PDFConstructor.getPropDefault(PDFConstructor.WAITBAR) ...
		);
	 
	[json, struct, el_list] = encodeJSON(pdfc);
	[pdfc_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(pdfc_dec ~= pdfc, ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		'PDFConstructor.encodeJSON() or PDFConstructor.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) PDFConstructor.getPropFormat(prop), num2cell(PDFConstructor.getProps())) == Format.HANDLE) && all(cellfun(@(prop) PDFConstructor.getPropFormat(prop), num2cell(PDFConstructor.getProps())) == Format.NET)
		assert(isequal(pdfc_dec, pdfc), ...
			[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
			'PDFConstructor.encodeJSON() or PDFConstructor.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Example data
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	create_example_NIfTI()
end

%% Test 13: Compare Mathematical Expectation with VOIs Table (Using PDFConstructor)
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	% Step 1: Generate Simulated Data
	output_dir = fullfile(fileparts(which('PDFConstructor')), 'Example data Nifti');
	
	% Step 2: Load Brain Atlas
	im_ba = ImporterBrainAtlasXLS('FILE', which('aal94_atlas.xlsx'));
	ba = im_ba.get('BA');
	
	% Step 3: Load PET and T1 Data
	group_dir = fullfile(output_dir, 'Group1');
	im_gr1_PET = ImporterGroupSubjNIfTI('DIRECTORY', group_dir, 'NIFTI_TYPE', {'PET'}, 'WAITBAR', true);
	gr1_PET = im_gr1_PET.get('GR');
	
	im_gr1_WM_GM = ImporterGroupSubjNIfTI('DIRECTORY', group_dir, 'NIFTI_TYPE', {'T1'}, 'WAITBAR', true);
	gr1_WM_GM = im_gr1_WM_GM.get('GR');
	
	% Step 4: Create PDFConstructor
	path_dict = IndexedDictionary('IT_CLASS', 'FILE_PATH', 'IT_LIST', {FILE_PATH('PATH', which('upsampled_AAL2.nii'))});
	% suvr_brain_label = readtable(which('AAL2_Atlas_Labels.csv')).Var4;
	ref_region_list = [2001]; % Reference region label
	
	im_gr_pdf = PDFConstructor('GR_PET', gr1_PET, 'GR_T1', gr1_WM_GM, 'BA', ba, ...
	    'ATLAS_PATH_DICT', path_dict, 'REF_REGION_LIST', {ref_region_list}, ...
	    'ATLAS_KIND', {'AAL2'});
	gr1 = im_gr_pdf.get('GR');
	
	
	% Step 6: Calculate Means by Subject and Region
	num_subjects = gr1.get('SUB_DICT').get('LENGTH');
	num_regions = size(gr1.get('SUB_DICT').get('IT', 1).get('FUN'), 2);
	calculated_subject_ids = cell(num_subjects, 1);
	
	for subj_idx = 1:num_subjects
	    % Retrieve subject-specific data
	    subj_data = gr1.get('SUB_DICT').get('IT', subj_idx).get('FUN');
	    calculated_subject_ids{subj_idx} = gr1.get('SUB_DICT').get('IT', subj_idx).get('ID');
	
	    % Calculate means for the first 20 regions and other regions
	    mean_first20 = mean(subj_data(:, 1:20), 'all');  % Mean of first 20 regions
	    mean_others = mean(subj_data(:, 21:end), 'all'); % Mean of other regions
	
	    % Assert that mean of first 20 regions is smaller
	    assert(mean_first20 > mean_others, ...
	        sprintf('Subject %s: Mean of first 20 regions is not larger than other regions.', calculated_subject_ids{subj_idx}));
	end
end

%% Test 14: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':PDFConstructor:' BRAPH2.FAIL_TEST], ...
		[' When testing PDFConstructor no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 15: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

