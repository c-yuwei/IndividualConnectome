%TEST_INDIVIDUALDISTANCECONCONSTURCTOR

%% Test 1: Inspection Methods
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	categories = num2cell(Category.getCategories());
	icd = IndividualDistanceConConsturctor();
	 
	% get('ELCLASS')
	if isa(IndividualDistanceConConsturctor, 'ConcreteElement')
		assert(strcmp(IndividualDistanceConConsturctor().get('ELCLASS'), 'IndividualDistanceConConsturctor'), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor().get(''ELCLASS'') should return ''IndividualDistanceConConsturctor''.')
	end
	 
	% getBuild()
	assert(IndividualDistanceConConsturctor.getBuild() == 1 && IndividualDistanceConConsturctor.getBuild() > 0, ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.getBuild() should return the IndividualDistanceConConsturctor build number.')
	assert(icd.getBuild() == 1 && icd.getBuild() > 0 , ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'icd.getBuild() should return the IndividualDistanceConConsturctor build number.')
	assert(Element.getBuild(icd) == 1 && Element.getBuild(icd) > 0, ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(icd) should return the IndividualDistanceConConsturctor build number.')
	assert(Element.getBuild('IndividualDistanceConConsturctor') == 1 && Element.getBuild('IndividualDistanceConConsturctor') > 0, ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getBuild(''IndividualDistanceConConsturctor'') should return the IndividualDistanceConConsturctor build number.')
	 
	% getClass()
	assert(strcmp(IndividualDistanceConConsturctor.getClass(), 'IndividualDistanceConConsturctor'), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.getClass() should return ''IndividualDistanceConConsturctor''.')
	assert(strcmp(icd.getClass(), 'IndividualDistanceConConsturctor'), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'icd.getClass() should return ''IndividualDistanceConConsturctor''.')
	assert(strcmp(Element.getClass(icd), 'IndividualDistanceConConsturctor'), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(icd) should return ''IndividualDistanceConConsturctor''.')
	assert(strcmp(Element.getClass('IndividualDistanceConConsturctor'), 'IndividualDistanceConConsturctor'), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getClass(''IndividualDistanceConConsturctor'') should return ''IndividualDistanceConConsturctor''.')
	 
	% getSubclasses()
	assert(isequal(IndividualDistanceConConsturctor.getSubclasses(), subclasses('IndividualDistanceConConsturctor', [], [], true)), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.getSubclasses() should return the same result as subclasses(''IndividualDistanceConConsturctor'', [], [], true).')
	assert(isequal(icd.getSubclasses(), subclasses('IndividualDistanceConConsturctor', [], [], true)), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'el.getSubclasses() should return the same result as subclasses(''IndividualDistanceConConsturctor'', [], [], true).')
	assert(isequal(Element.getSubclasses(icd), subclasses('IndividualDistanceConConsturctor', [], [], true)), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(icd) should return the same result as subclasses(''IndividualDistanceConConsturctor'', [], [], true).')
	assert(isequal(Element.getSubclasses('IndividualDistanceConConsturctor'), subclasses('IndividualDistanceConConsturctor', [], [], true)), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getSubclasses(''IndividualDistanceConConsturctor'') should return the same result as subclasses(''IndividualDistanceConConsturctor'', [], [], true).')
	 
	% getProps()
	assert(isempty(IndividualDistanceConConsturctor.getProps()) || isequal(IndividualDistanceConConsturctor.getProps(), 1:1:length(IndividualDistanceConConsturctor.getProps())), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.getProps() should return a row vector [1:1:N].')
	assert(isempty(IndividualDistanceConConsturctor.getProps()) || isequal(icd.getProps(), 1:1:length(IndividualDistanceConConsturctor.getProps())), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'icd.getProps() should return a row vector [1:1:N].')
	assert(isempty(IndividualDistanceConConsturctor.getProps()) || isequal(Element.getProps(icd), 1:1:length(IndividualDistanceConConsturctor.getProps())), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(icd) should return a row vector [1:1:N].')
	assert(isempty(IndividualDistanceConConsturctor.getProps()) || isequal(Element.getProps('IndividualDistanceConConsturctor'), 1:1:length(IndividualDistanceConConsturctor.getProps())), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''IndividualDistanceConConsturctor'') should return a row vector [1:1:N].')
	 
	% getProps(category)
	tmp = cellfun(@(category) IndividualDistanceConConsturctor.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(IndividualDistanceConConsturctor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualDistanceConConsturctor.getProps())), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.getProps(category) does not work.')
	tmp = cellfun(@(category) icd.getProps(category), categories, 'UniformOutput', false);
	assert(isempty(IndividualDistanceConConsturctor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualDistanceConConsturctor.getProps())), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'icd.getProps(category) does not work.')
	tmp = cellfun(@(category) Element.getProps(icd, category), categories, 'UniformOutput', false);
	assert(isempty(IndividualDistanceConConsturctor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualDistanceConConsturctor.getProps())), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(icd, category) does not work.')
	tmp = cellfun(@(category) Element.getProps('IndividualDistanceConConsturctor', category), categories, 'UniformOutput', false);
	assert(isempty(IndividualDistanceConConsturctor.getProps()) || isequal(sort(horzcat(tmp{:})), 1:1:length(IndividualDistanceConConsturctor.getProps())), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getProps(''IndividualDistanceConConsturctor'', category) does not work.')
	 
	% getPropNumber()
	assert(IndividualDistanceConConsturctor.getPropNumber() == length(IndividualDistanceConConsturctor.getProps()), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.getPropNumber() should return the number of properties.')
	assert(icd.getPropNumber() == length(IndividualDistanceConConsturctor.getProps()), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'icd.getPropNumber() should return the number of properties.')
	assert(Element.getPropNumber(icd) == length(IndividualDistanceConConsturctor.getProps()), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(icd) should return the number of properties.')
	assert(Element.getPropNumber('IndividualDistanceConConsturctor') == length(IndividualDistanceConConsturctor.getProps()), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''IndividualDistanceConConsturctor'') should return the number of properties.')
	 
	% getPropNumber(category)
	assert(sum(cellfun(@(category) IndividualDistanceConConsturctor.getPropNumber(category), categories)) == IndividualDistanceConConsturctor.getPropNumber(), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) icd.getPropNumber(category), categories)) == IndividualDistanceConConsturctor.getPropNumber(), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'icd.getPropNumber(category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber(icd, category), categories)) == IndividualDistanceConConsturctor.getPropNumber(), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(icd, category) does not work.')
	assert(sum(cellfun(@(category) Element.getPropNumber('IndividualDistanceConConsturctor', category), categories)) == IndividualDistanceConConsturctor.getPropNumber(), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.getPropNumber(''IndividualDistanceConConsturctor'', category) does not work.')
	 
	% existsProp(prop)
	assert(~IndividualDistanceConConsturctor.existsProp(NaN), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.existsProp(prop) does not work.')
	assert(~icd.existsProp(NaN), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'icd.existsProp(prop) does not work.')
	assert(~Element.existsProp(icd, NaN), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(icd, prop) does not work.')
	assert(~Element.existsProp('IndividualDistanceConConsturctor', NaN), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.existsProp(''IndividualDistanceConConsturctor'', prop) does not work.')
	 
	assert_with_error('IndividualDistanceConConsturctor.existsProp(NaN)', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsProp(NaN)', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], icd)
	assert_with_error('Element.existsProp(varargin{1}, NaN)', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], icd)
	assert_with_error('Element.existsProp(''IndividualDistanceConConsturctor'', NaN)', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		assert(IndividualDistanceConConsturctor.existsProp(prop), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.existsProp(prop) does not work.')
		assert(icd.existsProp(prop), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.existsProp(prop) does not work.')
		assert(Element.existsProp(icd, prop), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(icd, prop) does not work.')
		assert(Element.existsProp('IndividualDistanceConConsturctor', prop), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.existsProp(''IndividualDistanceConConsturctor'', prop) does not work.')
	end
	 
	% existsTag(tag)
	assert(~IndividualDistanceConConsturctor.existsTag(''), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.existsTag(tag) does not work.')
	assert(~icd.existsTag(''), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'icd.existsTag(tag) does not work.')
	assert(~Element.existsTag(icd, ''), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(icd, tag) does not work.')
	assert(~Element.existsTag('IndividualDistanceConConsturctor', ''), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'Element.existsTag(''IndividualDistanceConConsturctor'', tag) does not work.')
	 
	assert_with_error('IndividualDistanceConConsturctor.existsTag('''')', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT])
	assert_with_error('varargin{1}.existsTag('''')', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], icd)
	assert_with_error('Element.existsTag(varargin{1}, '''')', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], icd)
	assert_with_error('Element.existsTag(''IndividualDistanceConConsturctor'', '''')', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT])
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		tag = icd.getPropTag(prop);
		assert(IndividualDistanceConConsturctor.existsTag(tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.existsTag(tag) does not work.')
		assert(icd.existsTag(tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.existsTag(tag) does not work.')
		assert(Element.existsTag(icd, tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(icd, tga) does not work.')
		assert(Element.existsTag('IndividualDistanceConConsturctor', tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.existsTag(''IndividualDistanceConConsturctor'', tag) does not work.')
	end
	 
	% getPropProp(pointer)
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		assert(IndividualDistanceConConsturctor.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.getPropProp(prop) does not work.')
		assert(icd.getPropProp(prop) == prop, ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.getPropProp(prop) does not work.')
		assert(Element.getPropProp(icd, prop) == prop, ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(icd, prop) does not work.')
		assert(Element.getPropProp('IndividualDistanceConConsturctor', prop) == prop, ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''IndividualDistanceConConsturctor'', prop) does not work.')
	 
		tag = icd.getPropTag(prop);
		assert(IndividualDistanceConConsturctor.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.getPropProp(tag) does not work.')
		assert(icd.getPropProp(tag) == prop, ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.getPropProp(tag) does not work.')
		assert(Element.getPropProp(icd, tag) == prop, ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(icd, tag) does not work.')
		assert(Element.getPropProp('IndividualDistanceConConsturctor', prop) == prop, ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropProp(''IndividualDistanceConConsturctor'', tag) does not work.')
	end
	 
	% getPropTag(pointer)
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		tag = icd.getPropTag(prop);
	 
		assert(strcmp(IndividualDistanceConConsturctor.getPropTag(prop), tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.getPropTag(prop) does not work.')
		assert(strcmp(icd.getPropTag(prop), tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.getPropTag(prop) does not work.')
		assert(strcmp(Element.getPropTag(icd, prop), tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(icd, prop) does not work.')
		assert(strcmp(Element.getPropTag('IndividualDistanceConConsturctor', prop), tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''IndividualDistanceConConsturctor'', prop) does not work.')
	 
		assert(strcmp(IndividualDistanceConConsturctor.getPropTag(tag), tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.getPropTag(tag) does not work.')
		assert(strcmp(icd.getPropTag(tag), tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.getPropTag(tag) does not work.')
		assert(strcmp(Element.getPropTag(icd, tag), tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(icd, tag) does not work.')
		assert(strcmp(Element.getPropTag('IndividualDistanceConConsturctor', prop), tag), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropTag(''IndividualDistanceConConsturctor'', tag) does not work.')
	end
	 
	% getPropCategory(pointer)
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		tag = icd.getPropTag(prop);
	 
		assert(Category.existsCategory(IndividualDistanceConConsturctor.getPropCategory(prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(icd.getPropCategory(prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.getPropCategory(prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(icd, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(icd, prop) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(icd, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''IndividualDistanceConConsturctor'', prop) does not work.')
	 
		assert(Category.existsCategory(IndividualDistanceConConsturctor.getPropCategory(tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(icd.getPropCategory(tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.getPropCategory(tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(icd, tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(icd, tag) does not work.')
		assert(Category.existsCategory(Element.getPropCategory(icd, tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropCategory(''IndividualDistanceConConsturctor'', tag) does not work.')
	end
	 
	% getPropFormat(pointer)
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		tag = icd.getPropTag(prop);
	 
		assert(Format.existsFormat(IndividualDistanceConConsturctor.getPropFormat(prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(icd.getPropFormat(prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.getPropFormat(prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(icd, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(icd, prop) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(icd, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''IndividualDistanceConConsturctor'', prop) does not work.')
	 
		assert(Format.existsFormat(IndividualDistanceConConsturctor.getPropFormat(tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(icd.getPropFormat(tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.getPropFormat(tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(icd, tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(icd, tag) does not work.')
		assert(Format.existsFormat(Element.getPropFormat(icd, tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropFormat(''IndividualDistanceConConsturctor'', tag) does not work.')
	end
	 
	% getPropDescription(pointer)
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		tag = icd.getPropTag(prop);
	 
		assert(ischar(IndividualDistanceConConsturctor.getPropDescription(prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.getPropDescription(prop) does not work.')
		assert(ischar(icd.getPropDescription(prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.getPropDescription(prop) does not work.')
		assert(ischar(Element.getPropDescription(icd, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(icd, prop) does not work.')
		assert(ischar(Element.getPropDescription(icd, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''IndividualDistanceConConsturctor'', prop) does not work.')
	 
		assert(ischar(IndividualDistanceConConsturctor.getPropDescription(tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.getPropDescription(tag) does not work.')
		assert(ischar(icd.getPropDescription(tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.getPropDescription(tag) does not work.')
		assert(ischar(Element.getPropDescription(icd, tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(icd, tag) does not work.')
		assert(ischar(Element.getPropDescription(icd, tag)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.getPropDescription(''IndividualDistanceConConsturctor'', tag) does not work.')
	end
	 
	% getPropSettings(pointer)
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		tag = icd.getPropTag(prop);
	 
		settings = IndividualDistanceConConsturctor.getPropSettings(prop);
		settings = icd.getPropSettings(prop);
		settings = Element.getPropSettings(icd, prop);
		settings = Element.getPropSettings('IndividualDistanceConConsturctor', prop);
	 
		settings = IndividualDistanceConConsturctor.getPropSettings(tag);
		settings = icd.getPropSettings(tag);
		settings = Element.getPropSettings(icd, tag);
		settings = Element.getPropSettings('IndividualDistanceConConsturctor', tag);
	end
	 
	% getPropDefault(pointer)
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		tag = icd.getPropTag(prop);
	 
		default = IndividualDistanceConConsturctor.getPropDefault(prop);
		default = icd.getPropDefault(prop);
		default = Element.getPropDefault(icd, prop);
		default = Element.getPropDefault('IndividualDistanceConConsturctor', prop);
	 
		default = IndividualDistanceConConsturctor.getPropDefault(tag);
		default = icd.getPropDefault(tag);
		default = Element.getPropDefault(icd, tag);
		default = Element.getPropDefault('IndividualDistanceConConsturctor', tag);
	end
	 
	% getPropDefaultConditioned(pointer)
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		tag = icd.getPropTag(prop);
	 
		conditioned_default = IndividualDistanceConConsturctor.getPropDefaultConditioned(prop);
		conditioned_default = icd.getPropDefaultConditioned(prop);
		conditioned_default = Element.getPropDefaultConditioned(icd, prop);
		conditioned_default = Element.getPropDefaultConditioned('IndividualDistanceConConsturctor', prop);
	 
		conditioned_default = IndividualDistanceConConsturctor.getPropDefaultConditioned(tag);
		conditioned_default = icd.getPropDefaultConditioned(tag);
		conditioned_default = Element.getPropDefaultConditioned(icd, tag);
		conditioned_default = Element.getPropDefaultConditioned('IndividualDistanceConConsturctor', tag);
	end
	 
	% checkProp(pointer, value)
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		tag = icd.getPropTag(prop);
	 
		assert(~IndividualDistanceConConsturctor.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.checkProp(prop, value) does not work.')
		assert(~icd.checkProp(prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.checkProp(prop, value) does not work.')
		assert(~Element.checkProp(icd, prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(icd, prop, value) does not work.')
		assert(~Element.checkProp('IndividualDistanceConConsturctor', prop, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualDistanceConConsturctor'', prop, value) does not work.')
	 
		assert_with_error('IndividualDistanceConConsturctor.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], prop)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], prop, icd)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], prop, icd)
		assert_with_error('Element.checkProp(''IndividualDistanceConConsturctor'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], prop)
	 
		assert(~IndividualDistanceConConsturctor.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.checkProp(tag, value) does not work.')
		assert(~icd.checkProp(tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.checkProp(tag, value) does not work.')
		assert(~Element.checkProp(icd, tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(icd, tag, value) does not work.')
		assert(~Element.checkProp('IndividualDistanceConConsturctor', tag, {'probably wrong value', 1}), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualDistanceConConsturctor'', tag, value) does not work.')
	 
		assert_with_error('IndividualDistanceConConsturctor.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], tag)
		assert_with_error('varargin{2}.checkProp(varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], tag, icd)
		assert_with_error('Element.checkProp(varargin{2}, varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], tag, icd)
		assert_with_error('Element.checkProp(''IndividualDistanceConConsturctor'', varargin{1}, {''probably wrong value'', 1})', [BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.WRONG_INPUT], tag)
	 
		assert(IndividualDistanceConConsturctor.checkProp(prop, Element.getPropDefaultConditioned(IndividualDistanceConConsturctor, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.checkProp(prop, <conditioned default value>) does not work.')
		assert(icd.checkProp(prop, Element.getPropDefaultConditioned(IndividualDistanceConConsturctor, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.checkProp(prop, <conditioned default value>) does not work.')
		assert(Element.checkProp(icd, prop, Element.getPropDefaultConditioned(IndividualDistanceConConsturctor, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(icd, prop, <conditioned default value>) does not work.')
		assert(Element.checkProp('IndividualDistanceConConsturctor', prop, Element.getPropDefaultConditioned(IndividualDistanceConConsturctor, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualDistanceConConsturctor'', prop, <conditioned default value>) does not work.')
	 
		assert(IndividualDistanceConConsturctor.checkProp(tag, Element.getPropDefaultConditioned(IndividualDistanceConConsturctor, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.checkProp(tag, <conditioned default value>) does not work.')
		assert(icd.checkProp(tag, Element.getPropDefaultConditioned(IndividualDistanceConConsturctor, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'icd.checkProp(tag, <conditioned default value>) does not work.')
		assert(Element.checkProp(icd, tag, Element.getPropDefaultConditioned(IndividualDistanceConConsturctor, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(icd, tag, <conditioned default value>) does not work.')
		assert(Element.checkProp('IndividualDistanceConConsturctor', tag, Element.getPropDefaultConditioned(IndividualDistanceConConsturctor, prop)), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'Element.checkProp(''IndividualDistanceConConsturctor'', tag, <conditioned default value>) does not work.')
	 
	end
	 
end

%% Test 2: Instantiation - defaults
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icd = IndividualDistanceConConsturctor( ...
		IndividualDistanceConConsturctor.ELCLASS, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.NAME, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.DESCRIPTION, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.TEMPLATE, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.TEMPLATE), ...
		IndividualDistanceConConsturctor.ID, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.ID), ...
		IndividualDistanceConConsturctor.LABEL, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.LABEL), ...
		IndividualDistanceConConsturctor.NOTES, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.NOTES), ...
		IndividualDistanceConConsturctor.TOSTRING, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.WAITBAR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.WAITBAR), ...
		IndividualDistanceConConsturctor.GR_SUVR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR), ...
		IndividualDistanceConConsturctor.GR_SUVR_REF, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR_REF), ...
		IndividualDistanceConConsturctor.CONNECTOME_CONSTUCT_METHOD, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.GR, IndividualDistanceConConsturctor.getNoValue() ...
		);
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndividualDistanceConConsturctor.getPropTag(prop));
		switch IndividualDistanceConConsturctor.getPropCategory(prop)
			case {Category.CONSTANT, Category.RESULT, Category.QUERY}
				% getr
				assert( ...
					icd.getr(prop) == IndividualDistanceConConsturctor.getNoValue(), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualDistanceConConsturctor.getCategoryName(IndividualDistanceConConsturctor.getPropCategory(prop)) ', IndividualDistanceConConsturctor.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualDistanceConConsturctor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					icd.getr(TAG) == IndividualDistanceConConsturctor.getNoValue(), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualDistanceConConsturctor.getCategoryName(IndividualDistanceConConsturctor.getPropCategory(prop)) ', IndividualDistanceConConsturctor.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualDistanceConConsturctor.getr(' TAG ').'] ...
					)
				% get
				assert( ...
					~isa(icd.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(icd.getPropSettings(prop))
					assert( ...
						icd.checkFormat(icd.getPropFormat(prop), icd.get(prop)), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						['IndividualDistanceConConsturctor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						icd.checkFormat(icd.getPropFormat(prop), icd.get(prop), icd.getPropSettings(prop)), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						['IndividualDistanceConConsturctor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
			case Category.EVANESCENT
				% getr
				assert( ...
					icd.getr(prop) == IndividualDistanceConConsturctor.getNoValue(), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualDistanceConConsturctor.getCategoryName(IndividualDistanceConConsturctor.getPropCategory(prop)) ', IndividualDistanceConConsturctor.getr(' int2str(prop) ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualDistanceConConsturctor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					icd.getr(TAG) == IndividualDistanceConConsturctor.getNoValue(), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['Being a ' IndividualDistanceConConsturctor.getCategoryName(IndividualDistanceConConsturctor.getPropCategory(prop)) ', IndividualDistanceConConsturctor.getr(' TAG ') must be inizialized to NoValue(). ' ...
					'Or there could be an error in IndividualDistanceConConsturctor.getr(' TAG ').'] ...
					)
				% get
				warning_backup = warning('off', [BRAPH2.STR ':IndividualDistanceConConsturctor']);
				assert( ...
					~isa(icd.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				if isempty(icd.getPropSettings(prop))
					assert( ...
						icd.checkFormat(icd.getPropFormat(prop), icd.get(prop)), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						['IndividualDistanceConConsturctor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				else
					assert( ...
						icd.checkFormat(icd.getPropFormat(prop), icd.get(prop), icd.getPropSettings(prop)), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						['IndividualDistanceConConsturctor.get(' int2str(prop) ') returns a value with the wrong format.'] ...
						)
				end
				warning(warning_backup)
			otherwise % case {Category.METADATA, Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isequal(icd.getr(prop), IndividualDistanceConConsturctor.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must be inizialized to its default value ' ...
					'given by IndividualDistanceConConsturctor.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in IndividualDistanceConConsturctor.getr(' int2str(prop) ').'] ...
					)
				assert( ...
					isequal(icd.getr(TAG), IndividualDistanceConConsturctor.getPropDefaultConditioned(prop)), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' TAG ') must be inizialized to its default value ' ...
					'given by IndividualDistanceConConsturctor.getPropDefaultConditioned(' int2str(prop) '). ' ...
					'Or there could be an error in IndividualDistanceConConsturctor.getr(' TAG ').'] ...
					)
		end
	end
end

%% Test 3: Memorize
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icd = IndividualDistanceConConsturctor( ...
		IndividualDistanceConConsturctor.ELCLASS, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.NAME, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.DESCRIPTION, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.TEMPLATE, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.TEMPLATE), ...
		IndividualDistanceConConsturctor.ID, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.ID), ...
		IndividualDistanceConConsturctor.LABEL, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.LABEL), ...
		IndividualDistanceConConsturctor.NOTES, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.NOTES), ...
		IndividualDistanceConConsturctor.TOSTRING, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.WAITBAR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.WAITBAR), ...
		IndividualDistanceConConsturctor.GR_SUVR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR), ...
		IndividualDistanceConConsturctor.GR_SUVR_REF, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR_REF), ...
		IndividualDistanceConConsturctor.CONNECTOME_CONSTUCT_METHOD, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.GR, IndividualDistanceConConsturctor.getNoValue() ...
		);
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndividualDistanceConConsturctor.getPropTag(prop));
		switch IndividualDistanceConConsturctor.getPropCategory(prop)
			case Category.RESULT
				assert( ...
					~isa(icd.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(icd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(icd.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(icd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					icd.checkFormat(icd.getPropFormat(prop), icd.getr(prop),icd.getPropSettings(prop)), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
			case Category.QUERY
	% 			warning_backup = warning('off', [BRAPH2.STR ':IndividualDistanceConConsturctor']);
				assert( ...
					~isa(icd.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					isa(icd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
	% following tests excluded because properties QUERY should not be memorized
	% 			warning_backup = warning('off', [BRAPH2.STR ':IndividualDistanceConConsturctor']);
	% 			assert( ...
	% 				~isa(icd.memorize(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
	% 				['IndividualDistanceConConsturctor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
	% 				)
	% 			warning(warning_backup)
	% 			assert( ...
	% 				~isa(icd.getr(prop), 'NoValue'), ...
	% 				[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
	% 				['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
	% 				)
	% 			assert( ...
	% 				icd.checkFormat(icd.getPropFormat(prop), icd.getr(prop),icd.getPropSettings(prop)), ...
	% 				[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
	% 				['IndividualDistanceConConsturctor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
	% 				)
	% 			warning(warning_backup)
			case Category.EVANESCENT
				warning_backup = warning('off', [BRAPH2.STR ':IndividualDistanceConConsturctor']);
				assert( ...
					~isa(icd.get(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.get(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				warning(warning_backup)
				assert( ...
					isa(icd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must be a NoValue, because it should NOT have been memorized.'] ...
					)
				assert( ...
					~isa(icd.memorize(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.memorize(' int2str(prop) ') must NOT be a NoValue, because it should have been calculated.'] ...
					)
				assert( ...
					~isa(icd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must NOT be a NoValue, because it should have been memorized.'] ...
					)
				assert( ...
					icd.checkFormat(icd.getPropFormat(prop), icd.getr(prop),icd.getPropSettings(prop)), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') returns a value with the wrong format.'] ...
					)
				if icd.getPropFormat(prop) == Format.HANDLE
					warning_backup = warning('off', 'BRAPH2:IndividualDistanceConConsturctor');
					delete(ancestor(icd.get(prop), 'figure'))
					warning(warning_backup)
				end
		end
	end
	 
	if ~isempty(IndividualDistanceConConsturctor.getProps(Category.RESULT))
		for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
	 
			% excluded props
			if any(prop == [])
				continue
			end
	 
			switch IndividualDistanceConConsturctor.getPropCategory(prop)
				case {Category.PARAMETER, Category.DATA}
					assert( ...
						icd.isLocked(prop), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						['IndividualDistanceConConsturctor.isLocked(' int2str(prop) ') must be locked because a result has been calculated.'] ...
						)
				otherwise
					assert( ...
						~icd.isLocked(prop), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						['IndividualDistanceConConsturctor.isLocked(' int2str(prop) ') must NOT be locked even though a result has been calculated.'] ...
						)
			end
		end
	end
end

%% Test 4: Lock 1
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icd = IndividualDistanceConConsturctor();
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		TAG = upper(IndividualDistanceConConsturctor.getPropTag(prop));
		assert( ...
			~icd.isLocked(prop), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			['IndividualDistanceConConsturctor.isLocked(' int2str(prop) ') must NOT be locked when it is instantiated.'] ...
			)
		assert( ...
			~icd.isLocked(TAG), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			['IndividualDistanceConConsturctor.isLocked(' TAG ') must NOT be locked when it is instantiated.'] ...
			)
	end
	 
	icd.lock()
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		switch IndividualDistanceConConsturctor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA}
				assert( ...
					icd.isLocked(prop), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.isLocked(' int2str(prop) ') must be locked because the element is now locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT, Category.FIGURE, Category.GUI}
				assert( ...
					~icd.isLocked(prop), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.isLocked(' int2str(prop) ') must NOT be locked even though the element is now locked.'] ...
					)
		end
	end
end

%% Test 5: Lock 2
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icd = IndividualDistanceConConsturctor();
	 
	warning_backup = warning('off', 'BRAPH2:IndividualDistanceConConsturctor');
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		icd.lock(prop)
		switch IndividualDistanceConConsturctor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					icd.isLocked(prop), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.isLocked(' int2str(prop) ') must be locked.'] ...
					)
			case {Category.CONSTANT, Category.METADATA, Category.RESULT, Category.QUERY, Category.EVANESCENT}
				assert( ...
					~icd.isLocked(prop), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.isLocked(' int2str(prop) ') must NOT be locked even though locking has been attempted.'] ...
					)
		end
	end
	warning(warning_backup)
end

%% Test 6: Check
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icd = IndividualDistanceConConsturctor();
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		TAG = upper(IndividualDistanceConConsturctor.getPropTag(prop));
		assert( ...
			icd.isChecked(prop), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			['IndividualDistanceConConsturctor.isChecked(' int2str(prop) ') must be checked when it is instantiated.'] ...
			)
		assert( ...
			icd.isChecked(TAG), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			['IndividualDistanceConConsturctor.isChecked(' TAG ') must be checked when it is instantiated.'] ...
			)
	end
	 
	icd.unchecked()
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		assert( ...
			~icd.isChecked(prop), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			['IndividualDistanceConConsturctor.isChecked(' int2str(prop) ') must NOT be checked because it has been set to unchecked.'] ...
			)
	end
	 
	icd.checked()
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		assert( ...
			icd.isChecked(prop), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			['IndividualDistanceConConsturctor.isChecked(' int2str(prop) ') must be checked because it has been set to checked.'] ...
			)
	end
end

%% Test 7: Callbacks
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% basic IndividualDistanceConConsturctor
	icd_0 = IndividualDistanceConConsturctor( ...
		IndividualDistanceConConsturctor.ELCLASS, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.NAME, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.DESCRIPTION, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.TEMPLATE, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.TEMPLATE), ...
		IndividualDistanceConConsturctor.ID, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.ID), ...
		IndividualDistanceConConsturctor.LABEL, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.LABEL), ...
		IndividualDistanceConConsturctor.NOTES, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.NOTES), ...
		IndividualDistanceConConsturctor.TOSTRING, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.WAITBAR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.WAITBAR), ...
		IndividualDistanceConConsturctor.GR_SUVR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR), ...
		IndividualDistanceConConsturctor.GR_SUVR_REF, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR_REF), ...
		IndividualDistanceConConsturctor.CONNECTOME_CONSTUCT_METHOD, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.GR, IndividualDistanceConConsturctor.getNoValue() ...
		);
	 
	% IndividualDistanceConConsturctor with 1st callbacks
	icd_1 = IndividualDistanceConConsturctor( ...
		IndividualDistanceConConsturctor.ELCLASS, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.NAME, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.DESCRIPTION, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.TEMPLATE, icd_0.getCallback(4), ..., ...
		IndividualDistanceConConsturctor.ID, icd_0.getCallback(5), ..., ...
		IndividualDistanceConConsturctor.LABEL, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.LABEL), ...
		IndividualDistanceConConsturctor.NOTES, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.NOTES), ...
		IndividualDistanceConConsturctor.TOSTRING, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.WAITBAR, icd_0.getCallback(9), ..., ...
		IndividualDistanceConConsturctor.GR_SUVR, icd_0.getCallback(10), ..., ...
		IndividualDistanceConConsturctor.GR_SUVR_REF, icd_0.getCallback(11), ..., ...
		IndividualDistanceConConsturctor.CONNECTOME_CONSTUCT_METHOD, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.GR, IndividualDistanceConConsturctor.getNoValue() ...
		);
	 
	prop_number = IndividualDistanceConConsturctor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndividualDistanceConConsturctor.getPropTag(prop));
		switch IndividualDistanceConConsturctor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(icd_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(icd_1.get(prop), icd_0.get(prop)) && ~isa(icd_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(icd_1.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% IndividualDistanceConConsturctor with 2nd callbacks
	icd_2 = IndividualDistanceConConsturctor( ...
		IndividualDistanceConConsturctor.ELCLASS, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.NAME, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.DESCRIPTION, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.TEMPLATE, icd_1.getCallback(4), ..., ...
		IndividualDistanceConConsturctor.ID, icd_1.getCallback(5), ..., ...
		IndividualDistanceConConsturctor.LABEL, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.LABEL), ...
		IndividualDistanceConConsturctor.NOTES, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.NOTES), ...
		IndividualDistanceConConsturctor.TOSTRING, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.WAITBAR, icd_1.getCallback(9), ..., ...
		IndividualDistanceConConsturctor.GR_SUVR, icd_1.getCallback(10), ..., ...
		IndividualDistanceConConsturctor.GR_SUVR_REF, icd_1.getCallback(11), ..., ...
		IndividualDistanceConConsturctor.CONNECTOME_CONSTUCT_METHOD, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.GR, IndividualDistanceConConsturctor.getNoValue() ...
		);
	 
	prop_number = IndividualDistanceConConsturctor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndividualDistanceConConsturctor.getPropTag(prop));
		switch IndividualDistanceConConsturctor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(icd_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(icd_2.get(prop), icd_0.get(prop)) && ~isa(icd_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(icd_2.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
	% IndividualDistanceConConsturctor with 3rd callbacks
	icd_3 = IndividualDistanceConConsturctor( ...
		IndividualDistanceConConsturctor.ELCLASS, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.NAME, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.DESCRIPTION, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.TEMPLATE, icd_2.getCallback(4), ..., ...
		IndividualDistanceConConsturctor.ID, icd_2.getCallback(5), ..., ...
		IndividualDistanceConConsturctor.LABEL, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.LABEL), ...
		IndividualDistanceConConsturctor.NOTES, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.NOTES), ...
		IndividualDistanceConConsturctor.TOSTRING, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.WAITBAR, icd_2.getCallback(9), ..., ...
		IndividualDistanceConConsturctor.GR_SUVR, icd_2.getCallback(10), ..., ...
		IndividualDistanceConConsturctor.GR_SUVR_REF, icd_2.getCallback(11), ..., ...
		IndividualDistanceConConsturctor.CONNECTOME_CONSTUCT_METHOD, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.GR, IndividualDistanceConConsturctor.getNoValue() ...
		);
	 
	prop_number = IndividualDistanceConConsturctor.getPropNumber();
	for prop = 1:1:prop_number
		TAG = upper(IndividualDistanceConConsturctor.getPropTag(prop));
		switch IndividualDistanceConConsturctor.getPropCategory(prop)
			case {Category.PARAMETER, Category.DATA, Category.FIGURE, Category.GUI}
				assert( ...
					isa(icd_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must be a callback.'] ...
					)
				assert( ...
					isequal(icd_3.get(prop), icd_0.get(prop)) && ~isa(icd_1.get(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.get(' int2str(prop) ') must be the actual property and NOT a callback.'] ...
					)
			otherwise
				assert( ...
					~isa(icd_3.getr(prop), 'Callback'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor.getr(' int2str(prop) ') must NOT be a callback.'] ...
					)
		end
	end
	 
end

%% Test 8: Copy
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	% copy empty element
	icd = IndividualDistanceConConsturctor();
	 
	icd_copy = icd.copy();
	 
	assert(icd_copy ~= icd, ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.copy() does not work. A copied element must point to a copied element.')
	assert(isequal(icd_copy, icd), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.copy() does not work. A copied element must have the same property values of the original element.')
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		value = icd.getr(prop);
		value_copy = icd_copy.getr(prop);
		switch IndividualDistanceConConsturctor.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					'IndividualDistanceConConsturctor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
							'IndividualDistanceConConsturctor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
							'IndividualDistanceConConsturctor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				assert( ...
					icd_copy.isLocked(prop) == icd.isLocked(prop), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					'IndividualDistanceConConsturctor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					icd_copy.isChecked(prop) == icd.isChecked(prop), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					'IndividualDistanceConConsturctor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
					)
				assert( ...
					icd_copy.getPropSeed(prop) == icd.getPropSeed(prop), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					'IndividualDistanceConConsturctor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
					)
		end
	end
	 
	% copy element with default initialization and memorization
	icd = IndividualDistanceConConsturctor( ...
		IndividualDistanceConConsturctor.ELCLASS, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.NAME, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.DESCRIPTION, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.TEMPLATE, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.TEMPLATE), ...
		IndividualDistanceConConsturctor.ID, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.ID), ...
		IndividualDistanceConConsturctor.LABEL, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.LABEL), ...
		IndividualDistanceConConsturctor.NOTES, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.NOTES), ...
		IndividualDistanceConConsturctor.TOSTRING, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.WAITBAR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.WAITBAR), ...
		IndividualDistanceConConsturctor.GR_SUVR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR), ...
		IndividualDistanceConConsturctor.GR_SUVR_REF, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR_REF), ...
		IndividualDistanceConConsturctor.CONNECTOME_CONSTUCT_METHOD, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.GR, IndividualDistanceConConsturctor.getNoValue() ...
		);
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		if IndividualDistanceConConsturctor.getPropCategory(prop) == Category.QUERY
			% properties QUERY should not be memorized
			% warning_backup = warning('off', [BRAPH2.STR ':IndividualDistanceConConsturctor']);
			% icd.memorize(prop);
			% warning(warning_backup)
		elseif IndividualDistanceConConsturctor.getPropCategory(prop) == Category.EVANESCENT && icd.getPropFormat(prop) == Format.HANDLE
			icd.memorize(prop);
			warning_backup = warning('off', 'BRAPH2:IndividualDistanceConConsturctor');
			delete(ancestor(icd.get(prop), 'figure'))
			warning(warning_backup)
		else
			icd.memorize(prop);
		end
	end
	 
	% copy element with default initialization
	icd_copy = icd.copy();
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		value = icd.getr(prop);
		value_copy = icd_copy.getr(prop);
		switch IndividualDistanceConConsturctor.getPropCategory(prop)
			case {Category.EVANESCENT Category.QUERY}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					'IndividualDistanceConConsturctor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
							'IndividualDistanceConConsturctor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
							'IndividualDistanceConConsturctor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
	 
					assert( ...
						icd_copy.isLocked(prop) == icd.isLocked(prop), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						icd_copy.isChecked(prop) == icd.isChecked(prop), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						icd_copy.getPropSeed(prop) == icd.getPropSeed(prop), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
	% copy element with callbacks
	icd_0 = IndividualDistanceConConsturctor( ...
		IndividualDistanceConConsturctor.ELCLASS, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.NAME, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.DESCRIPTION, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.TEMPLATE, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.TEMPLATE), ...
		IndividualDistanceConConsturctor.ID, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.ID), ...
		IndividualDistanceConConsturctor.LABEL, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.LABEL), ...
		IndividualDistanceConConsturctor.NOTES, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.NOTES), ...
		IndividualDistanceConConsturctor.TOSTRING, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.WAITBAR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.WAITBAR), ...
		IndividualDistanceConConsturctor.GR_SUVR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR), ...
		IndividualDistanceConConsturctor.GR_SUVR_REF, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR_REF), ...
		IndividualDistanceConConsturctor.CONNECTOME_CONSTUCT_METHOD, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.GR, IndividualDistanceConConsturctor.getNoValue() ...
		);
	 
	icd = IndividualDistanceConConsturctor( ...
		IndividualDistanceConConsturctor.ELCLASS, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.NAME, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.DESCRIPTION, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.TEMPLATE, icd_0.getCallback(4), ..., ...
		IndividualDistanceConConsturctor.ID, icd_0.getCallback(5), ..., ...
		IndividualDistanceConConsturctor.LABEL, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.LABEL), ...
		IndividualDistanceConConsturctor.NOTES, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.NOTES), ...
		IndividualDistanceConConsturctor.TOSTRING, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.WAITBAR, icd_0.getCallback(9), ..., ...
		IndividualDistanceConConsturctor.GR_SUVR, icd_0.getCallback(10), ..., ...
		IndividualDistanceConConsturctor.GR_SUVR_REF, icd_0.getCallback(11), ..., ...
		IndividualDistanceConConsturctor.CONNECTOME_CONSTUCT_METHOD, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.GR, IndividualDistanceConConsturctor.getNoValue() ...
		);
	 
	icd_copy = icd.copy();
	icd_0_copy = icd_copy.getr('ID').get('EL');
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
		value = icd.getr(prop);
		value_copy = icd_copy.getr(prop);
		switch IndividualDistanceConConsturctor.getPropCategory(prop)
			case {Category.EVANESCENT}
				assert( ...
					isa(value_copy, 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					'IndividualDistanceConConsturctor.copy() does not work. The copied value of an EVANESCENT property must be NoValue.' ...
					)
			otherwise
				if isa(value, 'NoValue')
					assert( ...
						value_copy == value, ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. There should be a unique instance of NoValue.' ...
						)
				elseif isa(value, 'Element')
					assert( ...
						value_copy ~= value, ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The handle of a copied element should point to a copied element.' ...
						)
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. When empty, a copied element should be equal to the element.' ...
						)
				elseif iscell(value) && all(all(cellfun(@(x) isa(x, 'Element'), value)))
					for j = 1:1:length(value)
						assert( ...
							value_copy ~= value, ...
							[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
							'IndividualDistanceConConsturctor.copy() does not work. The handle of a copied element should point to a copied element.' ...
							)
						assert( ...
							isequal(value_copy, value), ...
							[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
							'IndividualDistanceConConsturctor.copy() does not work. When empty, a copied element should be equal to the element.' ...
							)
					end
				else
					assert( ...
						isequal(value_copy, value), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The value copy should be equal to the original.' ...
						)
				end
				if isa(value, 'Callback')
					assert( ...
						value == icd_0.getCallback(prop), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The callback should be obtained from IndividualDistanceConConsturctor.getCallback().' ...
						)
					assert( ...
						value_copy == icd_0_copy.getCallback(prop), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The callback should be obtained from IndividualDistanceConConsturctor.getCallback().' ...
						)
				end
	 
					assert( ...
						icd_copy.isLocked(prop) == icd.isLocked(prop), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The locked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						icd_copy.isChecked(prop) == icd.isChecked(prop), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The checked status of the copied and original elements must be the same.' ...
						)
	 
					assert( ...
						icd_copy.getPropSeed(prop) == icd.getPropSeed(prop), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor.copy() does not work. The randomization seeds of the copied and original elements must be the same.' ...
						)
		end
	end
	 
end

%% Test 9: Template
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icd_template = IndividualDistanceConConsturctor();
	icd = IndividualDistanceConConsturctor('TEMPLATE', icd_template);
	 
	for prop = 1:1:IndividualDistanceConConsturctor.getPropNumber()
	 
		% excluded props
		if any(prop == [])
			continue
		end
	 
		TAG = upper(IndividualDistanceConConsturctor.getPropTag(prop));
		switch IndividualDistanceConConsturctor.getPropCategory(prop)
			case {Category.PARAMETER}
				if prop == IndividualDistanceConConsturctor.TEMPLATE
					assert( ...
						isa(icd.getr(prop), 'IndividualDistanceConConsturctor'), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor TEMPLATE does not work. IndividualDistanceConConsturctor.getr(''TEMPLATE'') should be a IndividualDistanceConConsturctor element.' ...
						)
					assert( ...
						isa(icd_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						'IndividualDistanceConConsturctor TEMPLATE does not work. IndividualDistanceConConsturctor_template.getr(''TEMPLATE'') should be a NoValue.' ...
						)
				else
					assert( ...
						isa(icd.getr(prop), 'Callback'), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						['IndividualDistanceConConsturctor TEMPLATE does not work. IndividualDistanceConConsturctor.getr(' TAG ') should be a Callback.'] ...
						)
					assert( ...
						icd.getr(prop).get('EL') == icd_template && icd.getr(prop).get('PROP') == prop && strcmp(icd.getr(prop).get('TAG'), TAG), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						['IndividualDistanceConConsturctor TEMPLATE does not work. IndividualDistanceConConsturctor.getr(' TAG ') should be a Callback to icd_template.' TAG '.'] ...
						)
					assert( ...
						isa(icd_template.getr(prop), 'NoValue'), ...
						[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
						['IndividualDistanceConConsturctor TEMPLATE does not work. IndividualDistanceConConsturctor_template.getr(' TAG ') should be a NoValue.'] ...
						)
				end
			otherwise
				assert( ...
					isa(icd.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor TEMPLATE does not work. IndividualDistanceConConsturctor.getr(' TAG ') should be a NoValue.'] ...
					)
				assert( ...
					isa(icd_template.getr(prop), 'NoValue'), ...
					[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
					['IndividualDistanceConConsturctor TEMPLATE does not work. IndividualDistanceConConsturctor_template.getr(' TAG ') should be a NoValue.'] ...
					)
		end
	end
end

%% Test 10: Save Load
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icd = IndividualDistanceConConsturctor( ...
		IndividualDistanceConConsturctor.ELCLASS, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.NAME, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.DESCRIPTION, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.TEMPLATE, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.TEMPLATE), ...
		IndividualDistanceConConsturctor.ID, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.ID), ...
		IndividualDistanceConConsturctor.LABEL, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.LABEL), ...
		IndividualDistanceConConsturctor.NOTES, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.NOTES), ...
		IndividualDistanceConConsturctor.TOSTRING, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.WAITBAR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.WAITBAR), ...
		IndividualDistanceConConsturctor.GR_SUVR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR), ...
		IndividualDistanceConConsturctor.GR_SUVR_REF, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR_REF), ...
		IndividualDistanceConConsturctor.CONNECTOME_CONSTUCT_METHOD, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.GR, IndividualDistanceConConsturctor.getNoValue() ...
		);
	 
	filename = [fileparts(which('test_braph2')) filesep 'individualdistanceconconsturctor_to_be_erased.b2'];
	 
	Element.save(icd, filename)
	 
	icd_loaded = Element.load(filename);
	 
	assert( ...
		isequal(icd.copy(), icd_loaded), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.save(icd) and/or IndividualDistanceConConsturctor.load() do not work.' ...
		)
	 
	delete(filename)
end

%% Test 11: JSON
if rand() >= (1 - .01) * BRAPH2TEST.RANDOM
	icd = IndividualDistanceConConsturctor( ...
		IndividualDistanceConConsturctor.ELCLASS, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.NAME, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.DESCRIPTION, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.TEMPLATE, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.TEMPLATE), ...
		IndividualDistanceConConsturctor.ID, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.ID), ...
		IndividualDistanceConConsturctor.LABEL, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.LABEL), ...
		IndividualDistanceConConsturctor.NOTES, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.NOTES), ...
		IndividualDistanceConConsturctor.TOSTRING, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.WAITBAR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.WAITBAR), ...
		IndividualDistanceConConsturctor.GR_SUVR, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR), ...
		IndividualDistanceConConsturctor.GR_SUVR_REF, IndividualDistanceConConsturctor.getPropDefault(IndividualDistanceConConsturctor.GR_SUVR_REF), ...
		IndividualDistanceConConsturctor.CONNECTOME_CONSTUCT_METHOD, IndividualDistanceConConsturctor.getNoValue(), ...
		IndividualDistanceConConsturctor.GR, IndividualDistanceConConsturctor.getNoValue() ...
		);
	 
	[json, struct, el_list] = encodeJSON(icd);
	[icd_dec, struct_dec, el_list_dec] = Element.decodeJSON(json);
	 
	assert(icd_dec ~= icd, ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		'IndividualDistanceConConsturctor.encodeJSON() or IndividualDistanceConConsturctor.decodeJSON() does not work. A JSON encoded/decoded element must point to an element other than the original one.' ...
		)
	if all(cellfun(@(prop) IndividualDistanceConConsturctor.getPropFormat(prop), num2cell(IndividualDistanceConConsturctor.getProps())) == Format.HANDLE) && all(cellfun(@(prop) IndividualDistanceConConsturctor.getPropFormat(prop), num2cell(IndividualDistanceConConsturctor.getProps())) == Format.NET)
		assert(isequal(icd_dec, icd), ...
			[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
			'IndividualDistanceConConsturctor.encodeJSON() or IndividualDistanceConConsturctor.decodeJSON() does not work. A JSON encoded/decoded element must have the same property values of the original element.' ...
			)
	end
end

%% Test 12: Example
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	create_example_NIfTI()
end

%% Test 13: Verify the Distance-based individual connectome pipeline
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	im_ba = ImporterBrainAtlasXLS('FILE', which('aal94_atlas.xlsx'));
	ba = im_ba.get('BA');
	
	group_dir = fullfile(fileparts(which('IndividualDeviationConConstructor')),'Example data Nifti', 'Group1');
	im_gr1_WM_GM = ImporterGroupSubjNIfTI( ...
	    'DIRECTORY', group_dir, ...
	    'NIFTI_TYPE', {'T1'}, ...
	    'WAITBAR', true ...
	    );
	gr1_WM_GM = im_gr1_WM_GM.get('GR');
	
	im_gr1_PET = ImporterGroupSubjNIfTI( ...
	    'DIRECTORY', group_dir, ...
	    'NIFTI_TYPE', {'PET'}, ...
	    'WAITBAR', true ...
	    );
	gr1_PET = im_gr1_PET.get('GR');
	
	path_dict = IndexedDictionary(...
	    'IT_CLASS', 'FILE_PATH', ...
	    'IT_LIST', {FILE_PATH('PATH', which('upsampled_AAL2.nii'))} ...
	    );
	
	% suvr_brain_label = readtable(which('AAL2_Atlas_Labels.csv'));
	% suvr_brain_label = suvr_brain_label.Var4;
	ref_region_list = [2001];% reference region label
	
	gr1 = SUVRConstructor('GR_PET',gr1_PET, ...
	    'GR_T1',gr1_WM_GM, ...
	    'BA', ba,...
	    'ATLAS_PATH_DICT' ,path_dict, ...
	    'REF_REGION_LIST',{ref_region_list}, ...
	    'ATLAS_KIND', {'AAL2'});
	
	
	SUVR_gr1 = gr1.get('GR');
	
	
	constructor1 = IndividualDistanceConConsturctor( ...
	    'GR_SUVR', SUVR_gr1);
	
	distance_connectomes_gr1 = constructor1.get('GR');
	
	g_temp  = GraphWU('STANDARDIZE_RULE', 'range');
	a_WU1 = AnalyzeEnsemble_CON_WU('GR', distance_connectomes_gr1,'GRAPH_TEMPLATE', g_temp);
	num_subjects = a_WU1.get('G_DICT').get('LENGTH');
	
	% Initialize arrays for strength measures
	strength_first20_1 = zeros(num_subjects, 20);
	strength_others_1 = zeros(num_subjects,size(distance_connectomes_gr1.get('SUB_DICT').get('IT', 1).get('CON'),1)- 20);
	
	for i = 1:num_subjects
	    g = a_WU1.get('G_DICT').get('IT', i);
	    strength = g.get('MEASURE', 'Strength').get('M'); % Strength for all regions
	    strength20_regions = strength{1}(1:20,:);
	    strengthother_regions = strength{1}(21:end,:);
	    mean_20 = mean(strength20_regions(:));
	    mean_others = mean(strengthother_regions(:));
	    % Assert for each subject
	    assert(mean_20 < mean_others, ...
	        sprintf('Test failed for subject %d: The first 20 regions do not have higher distance than the other regions.', i));
	end
end

%% Test 14: No Figures Left
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	assert(isempty(findall(0, 'type', 'figure')), ...
		[BRAPH2.STR ':IndividualDistanceConConsturctor:' BRAPH2.FAIL_TEST], ...
		[' When testing IndividualDistanceConConsturctor no figures should be left over, either visible or not. ' ...
		int2str(length(findall(0, 'type', 'figure'))) ' figure(s) were left over.'] ...
		)
end

%% Test 15: Delete Figures
if rand() >= (1 - 1) * BRAPH2TEST.RANDOM
	delete(findall(0, 'type', 'figure'))
end

